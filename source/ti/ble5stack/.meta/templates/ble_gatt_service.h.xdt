%%{
	const Common = system.getScript("/ti/ble5stack/ble_common.js");
    let serviceMod  = system.modules['/ti/ble5stack/gatt_services/Service'];
%%}
% if(serviceMod){
/*******************************************************************************
 * Filename:    ble_gatt_service.h
 *
 * Description:    This file contains the services definitions and
 *                 prototypes.
 *
 * Copyright (c) 2015-2019, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/

#ifndef _SERVICES_H_
#define _SERVICES_H_

#ifdef __cplusplus
extern "C"
{
#endif


/*********************************************************************
* INCLUDES
*********************************************************************/
#include <stdint.h>
#include <bcomdef.h>
/*********************************************************************
* CONSTANTS
*********************************************************************/
// Profile Parameters
% let numOfChar = 0;
% for (let i = 0; i < serviceMod.$instances.length; i++) {
// Service UUID
#define `serviceMod.$instances[i].name.toUpperCase()`_SERV_UUID `Common.decimalToHexString(serviceMod.$instances[i].uuid)`
% for (let cidx = 0; cidx < serviceMod.$instances[i].characteristics.length; ++ cidx) {
%    let char        = serviceMod.$instances[i].characteristics[cidx];
%    let charName    = char.name;
%    let capCharName = charName.toUpperCase();
// Characteristic defines
#define `serviceMod.$instances[i].name.toUpperCase()`_`capCharName`   `numOfChar`
#define `serviceMod.$instances[i].name.toUpperCase()`_`capCharName`_UUID `Common.decimalToHexString(char.uuid)`
#define `serviceMod.$instances[i].name.toUpperCase()`_`capCharName`_LEN  `char.bytes`
% numOfChar++;
%}
% }

/*********************************************************************
 * TYPEDEFS
*********************************************************************/

/*********************************************************************
 * MACROS
*********************************************************************/

/*********************************************************************
 * Profile Callbacks
*********************************************************************/
% for (let i = 0; i < serviceMod.$instances.length; i++) {

// Callback when a characteristic value has changed
typedef void (*`serviceMod.$instances[i].name`Change_t)( uint8_t paramID);

typedef struct
{
  `serviceMod.$instances[i].name`Change_t        pfnSimpleProfileChange;  // Called when characteristic value changes
  `serviceMod.$instances[i].name`Change_t        pfnCfgChangeCb;
} `serviceMod.$instances[i].name`CBs_t;
% }
/*********************************************************************
 * API FUNCTIONS
*********************************************************************/
/*
 * _AddService- Initializes the service by registering
 *          GATT attributes with the GATT server.
 *
 */
% for (let i = 0; i < serviceMod.$instances.length; i++) {
extern bStatus_t `serviceMod.$instances[i].name`_AddService( uint32 services);
% }

/*
 * _RegisterAppCBs - Registers the application callback function.
 *                    Only call this function once.
 *
 *    appCallbacks - pointer to application callbacks.
 */
% for (let i = 0; i < serviceMod.$instances.length; i++) {
extern bStatus_t `serviceMod.$instances[i].name`_RegisterAppCBs( `serviceMod.$instances[i].name`CBs_t *appCallbacks );
% }

/*
 * _SetParameter - Set a service parameter.
 *
 *    param - Profile parameter ID
 *    len - length of data to right
 *    value - pointer to data to write.  This is dependent on
 *          the parameter ID and WILL be cast to the appropriate
 *          data type (example: data type of uint16 will be cast to
 *          uint16 pointer).
 */
% for (let i = 0; i < serviceMod.$instances.length; i++) {
extern bStatus_t `serviceMod.$instances[i].name`_SetParameter(uint8 param, uint8 len, void *value);
% }

/*
 * _GetParameter - Get a service parameter.
 *
 *    param - Profile parameter ID
 *    value - pointer to data to write.  This is dependent on
 *          the parameter ID and WILL be cast to the appropriate
 *          data type (example: data type of uint16 will be cast to
 *          uint16 pointer).
 */
% for (let i = 0; i < serviceMod.$instances.length; i++) {
extern bStatus_t `serviceMod.$instances[i].name`_GetParameter(uint8 param, void *value);
% }

/*****************************************************
Extern variables
*****************************************************/
% for(let i = 0; i < serviceMod.$instances.length; i++)
%{
extern `serviceMod.$instances[i].name`CBs_t *`serviceMod.$instances[i].name`_AppCBs;
%    for (let cidx = 0; cidx < serviceMod.$instances[i].characteristics.length; ++ cidx) {
%    let char        = serviceMod.$instances[i].characteristics[cidx];
%    let charName    = char.name;
%    let combo_Name   = serviceMod.$instances[i].name + '_' + charName;
%    let comboName   = serviceMod.$instances[i].name + charName;
%    let cap_Combo_Name = combo_Name.toUpperCase();
%    if(char.bytes > 1){
extern uint8 `comboName`[`cap_Combo_Name`_LEN];
%}
%else
%{
extern uint8 `comboName`;
%}
%}
%}
/*********************************************************************
*********************************************************************/

#ifdef __cplusplus
}
#endif

#endif /* _SERVICES_H_ */
% }