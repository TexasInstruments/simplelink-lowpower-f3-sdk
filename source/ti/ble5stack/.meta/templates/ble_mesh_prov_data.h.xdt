/*
 *  ======== ti_ble_mesh_prov_data.h ========
 *  Configured BLE Mesh module definitions
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

#ifndef TI_BLE_MESH_PROV_DATA_H
#define TI_BLE_MESH_PROV_DATA_H

%%{
/*
 *  ======== ti_ble_mesh_prov_data.h.xdt ========
 */

// Get the ble module
const ble = system.modules["/ti/ble5stack/ble"].$static;

const common = system.getScript("/ti/ble5stack/ble_common.js");

%%}

/* ------------------------------------------------------------------------- */
//Provisioning Callbacks - Should be implemented by the user
/* ------------------------------------------------------------------------- */

% if(ble.outputNumberCbName != "")
% {
extern int `ble.outputNumberCbName`(bt_mesh_output_action_t act, uint32_t num);
% }
% if(ble.outputStringCbName != "")
% {
extern int `ble.outputStringCbName`(const char *str);
% }
% if(ble.inputCbName != "")
% {
extern int `ble.inputCbName`(bt_mesh_input_action_t act, uint8_t size);
% }
% if(ble.inputCompleteCbName != "")
% {
extern void `ble.inputCompleteCbName`(void);
% }
% if(ble.unprovBeaconCbName != "")
% {
extern void `ble.unprovBeaconCbName`(uint8_t uuid[16],
					    bt_mesh_prov_oob_info_t oob_info,
					    uint32_t *uri_hash);
% }
% if(ble.linkOpenCbName != "")
% {
extern void `ble.linkOpenCbName`(bt_mesh_prov_bearer_t bearer);
% }
% if(ble.linkCloseCbName != "")
% {
extern void `ble.linkCloseCbName`(bt_mesh_prov_bearer_t bearer);
% }
% if(ble.completeCbName != "")
% {
extern void `ble.completeCbName`(uint16_t net_idx, uint16_t addr);
% }
% if(ble.nodeAddedCbName != "")
% {
extern void `ble.nodeAddedCbName`(uint16_t net_idx, uint8_t uuid[16], uint16_t addr, uint8_t num_elem);
% }
% if(ble.resetCbName != "")
% {
extern void `ble.resetCbName`(void);
% }


/* ------------------------------------------------------------------------- */
//Provisioning Properties and Capabilities
/* ------------------------------------------------------------------------- */

uint8_t dev_uuid[16] = {`common.listOfHexValues(common.addZeroFromLeft(ble.uuid.toString(16)))`};
% if(ble.oobAuthenticationMethod == "staticOob")
% {
const uint8_t static_val[16] = {`common.listOfHexValues(common.addZeroFromLeft(ble.staticVal.toString(16)))`};
% }

struct bt_mesh_prov prov = {
    .uuid = dev_uuid,
% if(ble.uri != "")
% {
    .uri = "`ble.uri`",
% }
% if(ble.oobInfo != "none")
% {
	.oob_info = `ble.oobInfo`,
% }
% if(ble.oobAuthenticationMethod == "staticOob")
% {
	.static_val = static_val,
	.static_val_len = `_.divide(common.addZeroFromLeft(ble.staticVal.toString(16)).length,2)`,
% }
% if(ble.oobAuthenticationMethod == "outputOob")
% {
	.output_size = `ble.outputSize`,
	.output_actions = `ble.outputActions`,
% }
% if(ble.oobAuthenticationMethod == "inputOob")
% {
	.input_size = `ble.inputSize`,
	.input_actions = `ble.inputSize`,
% }
% if(ble.outputNumberCbName != "")
% {
	.output_number = `ble.outputNumberCbName`,
% }
% if(ble.outputStringCbName != "")
% {
	.output_string = `ble.outputStringCbName`,
% }
% if(ble.inputCbName != "")
% {
	.input = `ble.inputCbName`,
% }
% if(ble.inputCompleteCbName != "")
% {
	.input_complete = `ble.inputCompleteCbName`,
% }
% if(ble.unprovBeaconCbName != "")
% {
	.unprovisioned_beacon = `ble.unprovBeaconCbName`,
% }
% if(ble.linkOpenCbName != "")
% {
	.link_open = `ble.linkOpenCbName`,
% }
% if(ble.linkCloseCbName != "")
% {
	.link_close = `ble.linkCloseCbName`,
% }
% if(ble.completeCbName != "")
% {
	.complete = `ble.completeCbName`,
% }
% if(ble.nodeAddedCbName != "")
% {
	.node_added = `ble.nodeAddedCbName`,
% }
% if(ble.resetCbName != "")
% {
	.reset = `ble.resetCbName`
% }
};

#endif /* TI_BLE_MESH_CONFIG_H */
