%const ble = system.modules["/ti/ble5stack/ble"].$static;
% if(ble.Element){
/*
 *  ======== device_composition.c ========
 *  Configured BLE module definitions
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */
%%{
/*
 *  ======== device_composition.c.xdt ========
 */

// Get the ble module
// const ble = system.modules["/ti/ble5stack/ble"].$static;
//const dcd  = system.modules["/ti/ble5stack/mesh_dcd/mesh_dcd"];
//const elementMod  = system.modules['/ti/mesh_dcd/mesh_element'];
//const modelMod  = system.modules['/ti/mesh_dcd/mesh_model'];

const common = system.getScript("/ti/ble5stack/ble_common.js");
const elementsObj = ble.Element;

let i = 0;
let numOfElement = elementsObj.length;
let numOfModelOnEachElement =[];
let numOfVendorOnEachElement = [];
let numOfSIGOnEachElement = [];
let elemIndex = 0;
let modelIndex = 0;
let countVendor = 0;
let countSIG = 0;
let sigModelArray = [];
let sigPubArray = [];
//let vendorModelArray = [];
let vendorModelArrayIndex = [];
let healthModelArray = [];

// Add element's 0 Health Server model to the healthModelArray
healthModelArray.push(["health_srv",ble.healthSrvCbk,0,modelIndex]);

for(elemIndex = 0 ; elemIndex < numOfElement ; elemIndex++ ) {
    if(elementsObj[elemIndex].model){
        numOfModelOnEachElement[elemIndex] = elementsObj[elemIndex].model.length;
        countVendor =  0;
        countSIG = 0;
        for(modelIndex = 0 ; modelIndex < numOfModelOnEachElement[elemIndex] ; modelIndex++ ) {
            let modelObj = elementsObj[elemIndex].model[modelIndex];
            if(modelObj.modelType == "Vendor"){
                countVendor ++;
                //vendorModelArray.push(modelObj);
                vendorModelArrayIndex.push([modelObj,elemIndex,modelIndex]) ;

            }else{
                sigModelArray.push([modelObj,elemIndex,modelIndex]);
                if(modelObj.sigModelName.toLowerCase() == "health_srv" ||
                modelObj.sigModelName.toLowerCase() == "health_cli"){
                   healthModelArray.push([modelObj.sigModelName.toLowerCase(),modelObj.healthCbk,elemIndex,modelIndex])//[sigModelName,healthCbk,num_element,num_model]
                }
                if(modelObj.sigModelName.toLowerCase() != "health_cli"){
                    sigPubArray.push(modelObj.sigModelName.toLowerCase()+"_pub"+(elemIndex==0? "_root":"_elem" +elemIndex));
                }
                countSIG++;
            }
        }
        numOfSIGOnEachElement[elemIndex] =  countSIG;
        numOfVendorOnEachElement[elemIndex] =  countVendor;
    }else{
        numOfModelOnEachElement[elemIndex] = 0;
    }
}

%%}
#include <ti_device_composition.h>

/*
*======================Foundation models======================
*/

%
%if(ble.configurationClient)
%{

struct bt_mesh_cfg_cli cfg_cli = {
    .model = NULL
};

%}


%for(modelIndex = 0 ; modelIndex < healthModelArray.length ; modelIndex++ ){
    %let healthName = healthModelArray[modelIndex][0];
    %let healthCB = healthModelArray[modelIndex][1]== "" ? "NULL" : healthModelArray[modelIndex][1];
    %let healthNumElem = healthModelArray[modelIndex][2];
    %let healthNumMod = healthModelArray[modelIndex][3];
struct bt_mesh_`healthName` `healthName+"_"+healthNumElem` = {
    %if(healthName == "health_srv" ){
        %if(healthCB == "NULL")
        %{
    .cb = NULL,
        %}
        %else
        %{
    .cb = &`healthCB`,
        %}
    %}else// if(healthModName == "health_cli")
    %{
    .current_status = `healthCB`,
    %}
};
%}


/*
*======================Foundation models End======================
*/

/*
*======================Vendor models======================
*/


/* Definitions of models publication context (Start) */
%for(let modelIndex = 0 ; modelIndex < vendorModelArrayIndex.length;modelIndex++){
    %let modelObj = vendorModelArrayIndex[modelIndex][0];
    %if(modelObj.namePubCon != ""){
BT_MESH_MODEL_PUB_DEFINE(`modelObj.namePubCon`,`modelObj.updateFunc==""?'NULL':modelObj.updateFunc` , `modelObj.pubLength`);
    %}
%}
/* Definitions of models publication context (End) */


%for(let modelIndex = 0 ; modelIndex < vendorModelArrayIndex.length;modelIndex++){
    %let vendorModel        = vendorModelArrayIndex[modelIndex][0];
    %let vendorElemIndex    = vendorModelArrayIndex[modelIndex][1];
    %let vendorModelIndex   = vendorModelArrayIndex[modelIndex][2];
struct bt_mesh_model_op `vendorModel.vendorName`_ops_`vendorElemIndex`_`vendorModelIndex`[] = {
        %for(let handlerIndex= 1 ; handlerIndex <= vendorModel.numOfHandlers ; handlerIndex++){
            %let handlerObj = vendorModel["handler"+handlerIndex];
    { BT_MESH_MODEL_OP_3(`common.decimalToHexString(handlerObj.handlerOpCode)`,`common.decimalToHexString(vendorModel.companyVendorID)` ), `handlerObj.handlerLenMsg`  , `handlerObj.handlerFunction` },
        %}
    BT_MESH_MODEL_OP_END,
};
    %
%}

%i = 0 ;
%for(let elemIndex=0;elemIndex<numOfElement ;elemIndex++){

    %if(numOfVendorOnEachElement[elemIndex] >0){
struct bt_mesh_model vnd_models`elemIndex`[] = {
        %for(let modelIndex = 0 ; modelIndex < numOfVendorOnEachElement[ elemIndex ];modelIndex++, i++){
            %let vendorModel        = vendorModelArrayIndex[i][0];
            %let vendorElemIndex    = vendorModelArrayIndex[i][1];
            %let vendorModelIndex   = vendorModelArrayIndex[i][2];
            %let vendorModelUserData = vendorModel.userDataName==""?"NULL": "&" + vendorModel.userDataName;
            %let vendorModelCbStructName = vendorModel.modelCbStructName;
            %if(vendorModelCbStructName == "")
            %{
    BT_MESH_MODEL_VND(`common.decimalToHexString(vendorModel.companyVendorID)`, `common.decimalToHexString(vendorModel.vendorID)`, `vendorModel.vendorName`_ops_`vendorElemIndex`_`vendorModelIndex`, `vendorModel.namePubCon==""?'NULL':vendorModel.namePubCon`, `vendorModelUserData`),
            %}
            % else{
    BT_MESH_MODEL_VND_CB(`common.decimalToHexString(vendorModel.companyVendorID)`, `common.decimalToHexString(vendorModel.vendorID)`, `vendorModel.vendorName`_ops_`vendorElemIndex`_`vendorModelIndex`, `vendorModel.namePubCon==""?'NULL':vendorModel.namePubCon`, `vendorModelUserData`, &`vendorModelCbStructName`),
            %}
        %}
};

    %}
%}

/*
*======================Vendor models End======================
*/
/*
*======================SIG models======================
*/


%let sigModelArrayNoDup = [];
%for( i = 0;i<sigModelArray.length;i++){//Use to remove duplicate elements from the array
    %if(sigModelArrayNoDup.indexOf(sigModelArray[i][0].sigModelName.toLowerCase())<0){
        %sigModelArrayNoDup.push((sigModelArray[i][0].sigModelName.toLowerCase()));
    %}
%}
%//let sigModelArrayNoDup = Array.from(new Set(sigModelArray)) ;//Use to remove duplicate elements from the array
%for(modelIndex = 0; modelIndex<sigModelArrayNoDup.length;modelIndex++){
    %if(sigModelArrayNoDup[modelIndex] != "health_srv" &&sigModelArrayNoDup[modelIndex] != "health_cli"){

        %let sigModelObj = common.sigModelMapping[sigModelArrayNoDup[modelIndex]];
        %let sigModelMsgObj = sigModelObj["messages"];
/* Mapping of message handlers for `sigModelObj["Name"]` (`sigModelObj["sig_id"]`) */
const struct bt_mesh_model_op `sigModelArrayNoDup[modelIndex]`_op[] = {
        %for(let handlerIndex = 1;handlerIndex<=sigModelMsgObj["num_of_msg"] ; handlerIndex++){
            %if(sigModelMsgObj["opcode"+handlerIndex].length == 4)
            %{
                {BT_MESH_MODEL_OP_1(`sigModelMsgObj["opcode"+handlerIndex]`) , `sigModelMsgObj["min_len_msg"+handlerIndex]`, `sigModelMsgObj["msgName"+handlerIndex]` },
            %}
            %else
            %{
                {BT_MESH_MODEL_OP_2(`sigModelMsgObj["opcode"+handlerIndex]`) , `sigModelMsgObj["min_len_msg"+handlerIndex]`, `sigModelMsgObj["msgName"+handlerIndex]` },
            %}
        %}
        BT_MESH_MODEL_OP_END,
};
    %}
%}

/* Definitions of models publication context (Start) */
BT_MESH_HEALTH_PUB_DEFINE(health_srv_pub_root, `ble.healthSrvMaxFaultsFound`);
%for(modelIndex = 0; modelIndex<sigModelArray.length;modelIndex++){
    %let sigModelName = sigModelArray[modelIndex][0].sigModelName.toLowerCase();
    %let sigElemIndex = sigModelArray[modelIndex][1];
    %let pubName = sigModelName+"_pub"+(sigElemIndex==0? "_root":"_elem" +sigElemIndex);
    %if(sigModelName == "health_srv"){
    %let maxFaults = sigModelArray[modelIndex][0].healthSrvMaxFaults;
BT_MESH_HEALTH_PUB_DEFINE(`pubName`, `maxFaults`);
    %}else if(sigModelName == "health_cli"){
        %//no publication for health_cli
    %}else{
    %let pubLen = common.sigModelMapping[sigModelName]["publication_size"];
BT_MESH_MODEL_PUB_DEFINE(`pubName`, NULL, `pubLen`);
    %}
%}
/* Definitions of models publication context (End) */

%i = 0 ;
%for(elemIndex = 0 ; elemIndex<numOfElement ; elemIndex++){
    %if(elemIndex == 0){
struct bt_mesh_model root_models[] = {
    BT_MESH_MODEL_CFG_SRV,
    %if(ble.configurationClient)
    %{
    BT_MESH_MODEL_CFG_CLI(&cfg_cli),
    %}
    BT_MESH_MODEL_HEALTH_SRV(&`"health_srv_"+elemIndex`, &health_srv_pub_root),
    %
    %}else{
    %if(numOfSIGOnEachElement[elemIndex]>0)
    %{
struct bt_mesh_model SIG_models`elemIndex`[] = {
    %}
    %}
    %for(modelIndex = 0;modelIndex< numOfSIGOnEachElement[elemIndex];modelIndex++,i++){
        %let sigModelIndex  = sigModelArray[i][2];
        %let sigElemIndex   = sigModelArray[i][1];
        %let sigModel       = sigModelArray[i][0];
        %let sigModelUserData = sigModel.userDataName==""?"NULL": "&" + sigModel.userDataName;
        %let sigModelCbStructName = sigModel.modelCbStructName;
        %//let modelName = sigModel.sigModelName;
        %let modelNameLower = sigModel.sigModelName.toLowerCase();
        %if(modelNameLower == "health_srv"){
    BT_MESH_MODEL_HEALTH_SRV(&`modelNameLower+"_"+sigElemIndex`, &`modelNameLower`_pub`sigElemIndex==0?"_root":"_elem"+sigElemIndex`),
        %}else if(modelNameLower == "health_cli"){
    BT_MESH_MODEL_HEALTH_CLI(&`modelNameLower+"_"+sigElemIndex`),
        %}else{
            %if(sigModelCbStructName == "")
            %{
    BT_MESH_MODEL(BT_MESH_MODEL_ID_`sigModel.sigModelName`,
                `modelNameLower`_op, &`modelNameLower`_pub`sigElemIndex==0?"_root":"_elem"+sigElemIndex`,
                `sigModelUserData`),
            %}
            % else{
    BT_MESH_MODEL_CB(BT_MESH_MODEL_ID_`sigModel.sigModelName`,
                `modelNameLower`_op, &`modelNameLower`_pub`sigElemIndex==0?"_root":"_elem"+sigElemIndex`,
                `sigModelUserData`, &`sigModelCbStructName`),
            %}
        %}
    %}
    %if(elemIndex == 0 || numOfSIGOnEachElement[elemIndex]>0)
    %{
};
    %}

%}


/*
*======================SIG models End======================
*/
/*
*======================Elements======================
*/
struct bt_mesh_elem elements[] = {
    BT_MESH_ELEM(0, root_models, `(numOfVendorOnEachElement[0]>0) ? "vnd_models0" : "BT_MESH_MODEL_NONE" `),
    %for(let elemIndex=1;elemIndex<numOfElement ;elemIndex++){
        %if(numOfModelOnEachElement[elemIndex] >0){
    BT_MESH_ELEM(0, `(numOfSIGOnEachElement[elemIndex]>0) ? "SIG_models"+elemIndex : "BT_MESH_MODEL_NONE" `, `(numOfVendorOnEachElement[elemIndex]>0) ? "vnd_models"+elemIndex : "BT_MESH_MODEL_NONE" `),
        %}
	%}

};
/*
*======================Elements End======================
*/

struct bt_mesh_comp comp = {
    .cid = `common.decimalToHexString(ble.cid)`,
    .elem = elements,
    .elem_count = ARRAY_SIZE(elements),
    %if(ble.pid != ""){
    .pid = `common.decimalToHexString(ble.pid)`,
    %}
     %if(ble.vid != ""){
    .vid = `common.decimalToHexString(ble.vid)`,
    %}
};
%}
