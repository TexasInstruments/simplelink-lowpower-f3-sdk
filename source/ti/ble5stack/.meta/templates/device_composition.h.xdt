/*
 *  ======== device_composition.h ========
 *  Configured BLE module definitions
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */
%%{
/*
 *  ======== device_composition.h.xdt ========
 */

// Get the ble module
const ble = system.modules["/ti/ble5stack/ble"].$static;
const common = system.getScript("/ti/ble5stack/ble_common.js");
const elementsObj = ble.Element;
let numOfElement = elementsObj.length;
//const dcd  = system.modules["/ti/ble5stack/mesh_dcd/mesh_dcd"];
//const common = system.getScript("/ti/ble5stack/ble_common.js");
let feat = "";
if(ble.hb_pub_feat_relay){
    feat = feat + "BT_MESH_FEAT_RELAY"
}
if(ble.hb_pub_feat_proxy){
    feat != ""?feat = feat +" |":feat = feat;
    feat = feat + "BT_MESH_FEAT_PROXY"
}
if(ble.hb_pub_feat_friend){
    feat != ""?feat = feat +" |":feat = feat;
    feat = feat + "BT_MESH_FEAT_FRIEND"
}
if(ble.hb_pub_feat_low_power){
    feat != ""?feat = feat +" |":feat = feat;
    feat = feat + "BT_MESH_FEAT_LOW_POWER "
}

%%}

#include "autoconf.h"
#include <zephyr.h>
#include <settings/settings.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/mesh.h>

%if(ble){
#define BT_COMP_ID `ble.cid`
#define FEAT_SUPPORTED   (`feat`)
    %let numOfHealthSrv = 0;
    %if(ble.healthSrvCbk == "health_cb"){
        %numOfHealthSrv++;
    %}
    %for(let elemIndex=1;elemIndex<numOfElement;elemIndex++){
        %if(elementsObj[elemIndex].model){
            %for(let modelIndex = 0 ; modelIndex < elementsObj[elemIndex].model.length; modelIndex++) {
                %let modelObj = elementsObj[elemIndex].model[modelIndex];
                %if(modelObj.sigModelName.toLowerCase() == "health_srv" && modelObj.healthCbk == "health_cb"){
                    %numOfHealthSrv++;
                %}
            %}
        %}
    %}
#define HEALTH_SRV_NUM `numOfHealthSrv`
%}
%if(ble.hb_sub_func){
extern void `ble.hb_sub_func`(uint8_t hops, uint16_t feat);
%}

%let healthModelCb  = [];
%let modelCbStruct = [];
%let modelUserData = [];

// Add the Health Server callback function name to the healthModelCb list
%if(ble.healthSrvCbk != "" && healthModelCb.indexOf(ble.healthSrvCbk) == -1)
%{
%  healthModelCb.push(ble.healthSrvCbk);
%}

%for(let elemIndex=0;elemIndex<numOfElement;elemIndex++){
    %if(elementsObj[elemIndex].model){
        %let countVendor = 0;
        %let countSig = 0;
        %for(let modelIndex = 0 ; modelIndex < elementsObj[elemIndex].model.length; modelIndex++) {
            %let modelObj = elementsObj[elemIndex].model[modelIndex];
            %if(modelObj.sigModelName.toLowerCase() == "health_srv" && modelObj.healthCbk != ""
            %   && healthModelCb.indexOf(modelObj.healthCbk) == -1)
            %{
            %  healthModelCb.push(modelObj.healthCbk);
            %}
            %if(modelObj.modelCbStructName != "" && modelCbStruct.indexOf(modelObj.modelCbStructName) == -1)
            %{
            %  modelCbStruct.push(modelObj.modelCbStructName)
            %}
            %if(modelObj.userDataName != "" && modelObj.userDataStructType != "" &&
            %   modelUserData.indexOf(modelObj.userDataStructType + " " + modelObj.userDataName) == -1)
            %{
            %  modelUserData.push(modelObj.userDataStructType + " " + modelObj.userDataName)
            %}
            %if(modelObj.modelType == "Vendor"){
                %countVendor ++;
                %for(let handlerIndex = 1;handlerIndex<=modelObj.numOfHandlers;handlerIndex++){
                    %let handlerObj = modelObj["handler"+handlerIndex];
extern void `handlerObj.handlerFunction`(struct bt_mesh_model *model,
                      struct bt_mesh_msg_ctx *ctx,
                      struct net_buf_simple *buf);
                %}
            %}else{
                %countSig ++;
                %let modelData  = common.sigModelMapping[modelObj.sigModelName.toLowerCase()];
                %for(let sigHandlerIndex = 1 ;sigHandlerIndex<= modelData.messages.num_of_msg; sigHandlerIndex ++){
extern void `modelData.messages["msgName"+sigHandlerIndex]`(struct bt_mesh_model *model,
                      struct bt_mesh_msg_ctx *ctx,
                      struct net_buf_simple *buf);
                %}
            %}
        %}
        %if(countVendor>0){

extern struct bt_mesh_model vnd_models`elemIndex`[];
        %}
        %if(elemIndex != 0 && countSig>0)
        %{
extern struct bt_mesh_model SIG_models`elemIndex`[];
        %}
    %}
%}
extern struct bt_mesh_cfg_srv cfg_srv;
extern struct bt_mesh_model root_models[];
extern struct bt_mesh_comp comp;
%if(modelCbStruct.length > 0){

// Models bt_mesh_model_cb
%}
%for(let i = 0; i < modelCbStruct.length; i++)
%{
extern const struct bt_mesh_model_cb `modelCbStruct[i]`;
%}
%if(modelUserData.length > 0){

// Models User Data
%}
%for(let i = 0; i < modelUserData.length; i++)
%{
extern struct `modelUserData[i]`;
%}

// Health Server Callback
%for(let i = 0; i < healthModelCb.length; i++)
%{
extern struct bt_mesh_health_srv_cb `healthModelCb[i]`;
%}
