%%{
/*
 * Copyright (c) 2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ANSIX936KDFXX.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let ANSIX936KDF = args[0];

    /* shorthand names for some common references in template below */
    let instances = ANSIX936KDF.$instances;
    if (instances.length == 0) return;

    /* get Common /ti/drivers utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ANSIX936KDF.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== ANSIX936KDF ===============================
 */

#include <ti/drivers/ANSIX936KDF.h>
#include <ti/drivers/ansix936kdf/ANSIX936KDFXX.h>

#define `countDef` `instances.length`

/*
 *  ======== ANSIX936KDFXX_objects ========
 */
ANSIX936KDFXX_Object ANSIX936KDFXX_objects[`countDef`];

/*
 *  ======== ANSIX936KDFXX_hwAttrs ========
 */
const ANSIX936KDFXX_HWAttrs ANSIX936KDFXX_hwAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    %
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    % if (typeof inst.interruptPriority !== 'undefined') {
    {
        .sha2HWAttrs.intPriority = `Common.intPriority2Hex(inst.interruptPriority)`
    },
    % } else {
    {{0}},
    % }
% }
};

/*
 *  ======== ANSIX936KDF_config ========
 */
const ANSIX936KDF_Config ANSIX936KDF_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .object = &ANSIX936KDFXX_objects[`inst.$name`],
        .hwAttrs = &ANSIX936KDFXX_hwAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t ANSIX936KDF_count = `countDef`;
