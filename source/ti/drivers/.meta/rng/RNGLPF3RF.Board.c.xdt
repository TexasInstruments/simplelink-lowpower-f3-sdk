%%{
/*
 * Copyright (c) 2021-2023, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== RNGLPF3RF.Board.c.xdt ========
 */

    let RNG      = args[0];
    let Common    = system.getScript("/ti/drivers/Common.js");

    let instances = RNG.$instances;

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = RNG.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== RNG ===============================
 */

#include <ti/drivers/RNG.h>
#include <ti/drivers/rng/RNGLPF3RF.h>

#define `countDef` `instances.length`

const size_t RNG_poolByteSize = RNG_POOL_BYTE_SIZE;
#if defined(__IAR_SYSTEMS_ICC__)
#pragma data_alignment=4
#else
__attribute__((aligned(4)))
#endif
uint8_t  RNG_instancePool[RNG_POOL_BYTE_SIZE];

const RNG_ReturnBehavior RNGLPF3RF_returnBehavior = `RNG.$static.rngReturnBehavior`;

const RNGLPF3RF_HWAttrs RNGLPF3RF_hwAttrs = {
    .intPriority = `Common.intPriority2Hex(RNG.$static.interruptPriority)`
};

% if (instances.length > 0) {
RNGLPF3RF_Object RNGLPF3RF_objects[`countDef`];

const RNG_Config RNG_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst    = instances[i];
    {   /* `inst.$name` */
        .object         = &RNGLPF3RF_objects[`inst.$name`],
        .hwAttrs        = &RNGLPF3RF_hwAttrs
    },
% }
};

% }
`declarations`
const uint_least8_t RNG_count = `countDef`;

const uint32_t RNGLPF3RF_noiseInputWordLen = `RNG.$static.rawNoiseLenWords`;

uint32_t RNGLPF3RF_noiseConditioningKeyWord0 = `"0x" + RNG.$static.noiseConditioningKeyW0.toString(16)`;
uint32_t RNGLPF3RF_noiseConditioningKeyWord1 = `"0x" + RNG.$static.noiseConditioningKeyW1.toString(16)`;
uint32_t RNGLPF3RF_noiseConditioningKeyWord2 = `"0x" + RNG.$static.noiseConditioningKeyW2.toString(16)`;
uint32_t RNGLPF3RF_noiseConditioningKeyWord3 = `"0x" + RNG.$static.noiseConditioningKeyW3.toString(16)`;
