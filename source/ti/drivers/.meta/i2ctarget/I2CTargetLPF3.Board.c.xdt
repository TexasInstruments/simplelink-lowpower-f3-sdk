%%{
/*
 * Copyright (c) 2023, Texas Instruments Incorporated - https://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== I2CTargetLPF3.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let I2CTarget = args[0];
    let instances = I2CTarget.$instances;
    if (instances.length == 0) return;
    let GPIO      = system.getScript("/ti/drivers/GPIO.syscfg.js");

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = I2CTarget.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== I2CTarget ===============================
 */

#include <ti/drivers/I2CTarget.h>
#include <ti/drivers/i2ctarget/I2CTargetLPF3.h>
#include <ti/drivers/Power.h>

#include <ti/devices/DeviceFamily.h>
#include DeviceFamily_constructPath(inc/hw_ints.h)
#include DeviceFamily_constructPath(inc/hw_memmap.h)

#define `countDef` `instances.length`

/*
 *  ======== I2CTargetLPF3_objects ========
 */
I2CTargetLPF3_Object I2CTargetLPF3_objects[`countDef`];

/*
 *  ======== I2CTargetLPF3_hwAttrs ========
 */
const I2CTargetLPF3_HWAttrs I2CTargetLPF3_hwAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let hwName = inst.i2c.$solution.peripheralName;
    % let peripheral = system.deviceData.peripherals[hwName];
    %
    % let sclPinMuxMode = GPIO._getPinMuxMode(peripheral.peripheralPins[inst.i2c.$solution.peripheralName + 'SCL'],
    %                                                   inst.i2c.sclPin.$solution.devicePinName);
    % let sclPinMuxName = 'GPIO_MUX_PORTCFG_PFUNC' + sclPinMuxMode.toString();
    %
    % let sdaPinMuxMode = GPIO._getPinMuxMode(peripheral.peripheralPins[inst.i2c.$solution.peripheralName + 'SDA'],
    %                                                   inst.i2c.sdaPin.$solution.devicePinName);
    % let sdaPinMuxName = 'GPIO_MUX_PORTCFG_PFUNC' + sdaPinMuxMode.toString();
    %
    %
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .baseAddr    = `hwName`_BASE,
        .powerMngrId = PowerLPF3_PERIPH_`hwName`,
        .intNum      = INT_I2C0_IRQ,
        .intPriority = `Common.intPriority2Hex(inst.interruptPriority)`,
        .sclPin      = `inst.sclPinInstance.$name`,
        .sclPinMux   = `sclPinMuxName`,
        .sdaPin      = `inst.sdaPinInstance.$name`,
        .sdaPinMux   = `sdaPinMuxName`
    },
% }
};

/*
 *  ======== I2CTarget_config ========
 */
const I2CTarget_Config I2CTarget_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .object      = &I2CTargetLPF3_objects[`inst.$name`],
        .hwAttrs     = &I2CTargetLPF3_hwAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t I2CTarget_count = `countDef`;
