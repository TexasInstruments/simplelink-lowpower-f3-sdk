%%{
/*
 * Copyright (c) 2022-2024, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== PowerCC27XX.Board_init.c.xdt ========
 */
    let CCFG = system.modules["/ti/devices/CCFG"];
    let overrideCapArraySettings = false;

    if (CCFG !== undefined) {
        if (CCFG.$static.overrideHfxtCapArray === true) {
            // If the cap array settings were altered from their default, emit the code to set them
            overrideCapArraySettings = true;
        }
    }

    let board = system.deviceData.board;
    let isFPGA = false;

    /* Users may be using SysConfig with no provided board */
    if (board !== undefined) {
        isFPGA = board.name.match(/FPGA/);
    }
%%}
%   if (overrideCapArraySettings) {

    /* Set non-default cap array trims */
    CKMDSetInitialCapTrim(`CCFG.$static.hfxtCapArrayQ1`, `CCFG.$static.hfxtCapArrayQ2`);
    CKMDSetTargetCapTrim(`CCFG.$static.hfxtCapArrayQ1`, `CCFG.$static.hfxtCapArrayQ2`);
%   }

    Power_init();

    /* Entering standby with a debug probe connected currently causes an
     * immediate fault on wakeup. Disable standby by default to prevent this
     * until a fix is rolled out by CCS and IAR.
     */
    Power_setConstraint(PowerLPF3_DISALLOW_STANDBY);

%   if (CCFG.$static.srcClkLF === "LF XOSC") {
    PowerLPF3_selectLFXT();
%   }
%   else if (CCFG.$static.srcClkLF === "LF RCOSC") {
    PowerLPF3_selectLFOSC();
%   }
%   else if (CCFG.$static.srcClkLF === "External LF clock") {
    PowerLPF3_selectEXTLF();
%   }
%   if (!isFPGA && CCFG.$static.voltageRegulator == 'DCDC') {
    PMCTLSetVoltageRegulator(PMCTL_VOLTAGE_REGULATOR_DCDC);
%   }

%   if (isFPGA) {
    Power_setConstraint(PowerLPF3_DISALLOW_IDLE);
    Power_setConstraint(PowerLPF3_DISALLOW_STANDBY);
%   }

%   if ((CCFG !== undefined) && (CCFG.$static.srcClkLF === "LF RCOSC") && (CCFG.$static.enableLfoscComp)) {
    PowerLPF3_initLfoscCompensation();
%       if (CCFG.$static.defaultLfoscCompProfile != null) {
    PowerLPF3_setLfoscCompensationProfile(&`CCFG.$static.defaultLfoscCompProfile.$name`);
    PowerLPF3_enableLfoscCompensation();
%       }
%   }
