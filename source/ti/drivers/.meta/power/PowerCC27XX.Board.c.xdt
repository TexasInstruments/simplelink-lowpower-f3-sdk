%%{
/*
 * Copyright (c) 2022-2024, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== PowerCC27XX.Board.c.xdt ========
 */

    let POWER                      = args[0];
    let CCFG                       = system.modules["/ti/devices/CCFG"];
    let pow                        = POWER.$static;
    let policyInitFxn              = pow.policyInitFunction;
    let policyFxn                  = pow.policyFunction;

    /* By default, disable initial HFXT amplitude compensation by setting
     * the C pointer to the function to start the HFXT amplitude compensation
     * to NULL. The pointer will be set to PowerLPF3_startInitialHfxtAmpComp
     * below if initial HFXT amplitude compensation is enabled.
     */
    let startInitialHfxtAmpCompFxn = "NULL";

    if (policyInitFxn === 'Custom') {
        policyInitFxn = pow.policyInitCustomFunction;
    }

    if (policyInitFxn === 'Not Required') {
        policyInitFxn = 'NULL';
    }

    if (policyFxn === 'Custom') {
        policyFxn = pow.policyCustomFunction;
    }

    if (CCFG.$static.enableInitialHfxtAmpComp)
    {
        startInitialHfxtAmpCompFxn = "PowerLPF3_startInitialHfxtAmpComp";
    }
%%}
/*
 *  =============================== Power ===============================
 */
#include <ti/drivers/Power.h>
#include "ti_drivers_config.h"
#include DeviceFamily_constructPath(driverlib/ckmd.h)
#include DeviceFamily_constructPath(driverlib/pmctl.h)

% if (policyInitFxn !== 'NULL') {
extern void `policyInitFxn`(void);
% }
% if (policyFxn !== 'NULL') {
extern void `policyFxn`(void);
% }

%if (CCFG.$static.srcClkLF === "External LF clock") {
const uint8_t PowerLPF3_extlfPin      = `CCFG.$static.extlfPinInstance.$name`;
% let extlfPinMuxMode = CCFG.$static.extlf.extlfPin.$solution.muxMode;
% let extlfPinMuxName = 'GPIO_MUX_PORTCFG_PFUNC' + extlfPinMuxMode.toString();
const uint8_t PowerLPF3_extlfPinMux   = `extlfPinMuxName`;
% }

const PowerCC27XX_Config PowerCC27XX_config = {
    .policyInitFxn              = `policyInitFxn`,
    .policyFxn                  = `policyFxn`,
    .startInitialHfxtAmpCompFxn = `startInitialHfxtAmpCompFxn`,
};
