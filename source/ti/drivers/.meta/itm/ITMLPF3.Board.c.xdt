%%{
/*
 * Copyright (c) 2024, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ITMLPF3.Board.c.xdt ========
 */

    let ITM         = args[0];
    let itmStatic   = ITM.$static;
%%}
/*
 *  =============================== ITM ===============================
 */
#include <ti/drivers/ITM.h>
#include <ti/drivers/itm/ITMLPF3.h>
#include DeviceFamily_constructPath(inc/hw_ioc.h)

/*
 *  ======== itmHWAttrs ========
 */
static const ITMLPF3_HWAttrs ITMLPF3_hwAttrs = {
    .format             = `itmStatic.tpiuSerialFormat`,
    .tpiuPrescaler      = `itmStatic.tpiuPrescaler`,
    .fullPacketInCycles = `itmStatic.fullPacketInCycles`,
    .traceEnable        = `"0x" + itmStatic.traceEnable.toString(16)`,
    .swoPin             = `itmStatic.swoPinInstance.$name`,
};

void *itmHwAttrs = (void *)&ITMLPF3_hwAttrs;

extern void ITM_commonFlush(void);
extern void ITM_commonRestore(void);
extern void ITMLPF3_flush(void);
extern void ITMLPF3_restore(void);

/*
 *  ======== ITM_flush ========
 */
void ITM_flush(void)
{
    /* First, call the common ITM flush */
    ITM_commonFlush();

    /* Then, do CC27XX specific pin muxing */
    ITMLPF3_flush();
}

/*
 *  ======== ITM_restore ========
 */
void ITM_restore(void)
{
    /* First, call CC27XX specific function to remux pin */
    ITM_commonRestore();

    /* Then, do common restore */
    ITMLPF3_restore();
}
