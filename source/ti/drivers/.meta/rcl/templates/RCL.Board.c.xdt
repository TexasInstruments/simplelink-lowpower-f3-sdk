%%{
/*
 * Copyright (c) 2022-2024, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== RCL.Board.c.xdt ========
 */
let Common = system.getScript("/ti/drivers/Common.js");
let GPIO = system.getScript("/ti/drivers/GPIO.syscfg.js");
let rclGpio = system.getScript("/ti/drivers/rcl/rclgpio.syscfg.js");
let RCL = args[0];
let instances = RCL.$instances;
const rclStatic = RCL.$static;

/* This function generates all necessary strings  */
function getLrfdStrings(pin, pinInstance, pinFunction) {
    let lrfMuxNumber = -1
    let lrfdNumber = 0
    let lrfMaxPinNumber = 7
    let gpioSelTreshold = 3
    const solution = rclStatic.lrfGpio.$solution;
    let peripheral = system.deviceData.peripherals[solution.peripheralName];
    for (; lrfdNumber <= lrfMaxPinNumber; lrfdNumber++) {
        lrfMuxNumber = GPIO._getPinMuxMode(
        peripheral.peripheralPins["LRFD" + lrfdNumber.toString()],
        pin.$solution.devicePinName);

        if (lrfMuxNumber != -1) {break; }
    }
    let dioPin = GPIO.getDioForInst(pinInstance);
    let gpioSelNumber = 0
    if (lrfdNumber > gpioSelTreshold){
       gpioSelNumber = 1
    }
    let gpioSelStr1 = 'LRFDDBELL_O_GPOSEL' + gpioSelNumber.toString()
    let gpioSelStr2 = 'LRFDDBELL_GPOSEL' + gpioSelNumber.toString()
    let regWriteStr = 'HWREG_WRITE_LRF(LRFDDBELL_BASE + ' + gpioSelStr1 + ')'
    let regReadStr = 'HWREG_READ_LRF(LRFDDBELL_BASE + ' + gpioSelStr1 + ')'
    let portCfgStr = 'IOC_IOC' + dioPin.toString() + '_PORTCFG_PFUNC' +  lrfMuxNumber.toString()
    let setLrfdStr = regWriteStr + ' = ' + regReadStr + '| (' + gpioSelStr2 + '_SRC' + lrfdNumber + '_' + pinFunction + ')'
    let setGpioStr = 'GPIO_setConfigAndMux' + '(' + dioPin + ', GPIO_CFG_NO_DIR, ' + portCfgStr + ')'
    let resetGpioStr = 'GPIO_resetConfig' + '(' + dioPin + ')'
    return [setLrfdStr, setGpioStr, resetGpioStr]
 }

%%}

% if(rclStatic.lrfGpio){
/*
 *  =============================== RCL GPIOS ===============================
 */
#include DeviceFamily_constructPath(inc/hw_lrfddbell.h)
#include DeviceFamily_constructPath(inc/hw_ioc.h)
#include <ti/drivers/rcl/LRF.h>
%   if (rclStatic.lrfGpio.rfctrcPin){
#include <ti/drivers/rcl/RCL.h>
#include <ti/drivers/rcl/RCL_Tracer.h>
#include DeviceFamily_constructPath(inc/hw_lrfdtrc.h)

static bool tracerEnabled = false;

/*
 *  ======== RCL_Tracer_enable ========
 */
void RCL_Tracer_enable(void)
{
    if (!tracerEnabled)
    {
        tracerEnabled = true;

        /* Enable tracer clock */
        Power_setDependency(PowerLPF3_PERIPH_LRFD_TRC);

        /* Request power notification to keep tracer up after standby */
        RCL_openPowerNotifications();

        /* Do the same enabling as after wakeup */
        RCL_Tracer_wakeup();
    }
}

/*
 *  ======== RCL_Tracer_disable ========
 */
 void RCL_Tracer_disable(void)
{
    if (tracerEnabled)
    {
        /* Disable tracer pins as when going to standby */
        RCL_Tracer_standby();

        /* Remove power notifications */
        RCL_closePowerNotifications();

        /* Disable the tracer */
        HWREG_WRITE_LRF(LRFDTRC_BASE + LRFDTRC_O_CFG) = (LRFDTRC_CFG_CH1EN_OFF) |
                                                        (LRFDTRC_CFG_CH2EN_OFF) |
                                                        (LRFDTRC_CFG_CH3EN_OFF) |
                                                        (LRFDTRC_CFG_TSEN_OFF);

        /* Disable tracer clock */
        Power_releaseDependency(PowerLPF3_PERIPH_LRFD_TRC);

        tracerEnabled = false;
    }
}

/*
 *  ======== RCL_Tracer_wakeup ========
 */
void RCL_Tracer_wakeup(void)
{
    if (tracerEnabled)
    {
        /* Enable the Tracer */
        % if (rclStatic.rftrcTimestamp == 1) {
        HWREG_WRITE_LRF(LRFDTRC_BASE + LRFDTRC_O_CFG) = LRFDTRC_CFG_TSEN_ON |
        %}
        % else if (rclStatic.rftrcTimestamp == 2) {
        HWREG_WRITE_LRF(LRFDTRC_BASE + LRFDTRC_O_CFG) = LRFDTRC_CFG_TSEN_OFF |
        %}
        % if (rclStatic.rftrcMode == 0) {
                                                        LRFDTRC_CFG_CH1EN_NORM |
                                                        LRFDTRC_CFG_CH2EN_OFF |
                                                        LRFDTRC_CFG_CH3EN_OFF |
        %}
        % else if (rclStatic.rftrcMode == 1) {
                                                        LRFDTRC_CFG_CH1EN_OFF |
                                                        LRFDTRC_CFG_CH2EN_TOPSM |
                                                        LRFDTRC_CFG_CH3EN_TOPSM |
        %}
        % else if (rclStatic.rftrcMode == 2) {
                                                        LRFDTRC_CFG_CH1EN_NORM |
                                                        LRFDTRC_CFG_CH2EN_TOPSM |
                                                        LRFDTRC_CFG_CH3EN_TOPSM |
        %}
                                                        LRFDTRC_CFG_PRESCAL_DIV`rclStatic.rftrc_prescal`;

%   let lrfdStringList0 = getLrfdStrings(rclStatic.lrfGpio.rfctrcPin, rclStatic.rfctrcPinInstance, "RFCTRC")
                `lrfdStringList0[0]`;
                `lrfdStringList0[1]`;
    }
}

/*
 *  ======== RCL_Tracer_standby ========
 */
void RCL_Tracer_standby(void)
{
    if (tracerEnabled)
    {
        /* Disable the tracer output */
        `lrfdStringList0[2]`;
    }
}

%}
/*
 *  ======== RCL_GPIO_enable ========
 */
void RCL_GPIO_enable (void)
{
%rclGpio.signalList.forEach(signal => {
%   let pin = rclStatic.lrfGpio[`${signal.name.toLowerCase()}Pin`]
%        if (pin && signal.name != "RFCTRC")
%        {
%           let pinInstance = rclStatic[`${signal.name.toLowerCase()}PinInstance`]
%           let lrfdStringList0 = getLrfdStrings(pin, pinInstance, signal.name)

    /* `signal.name` */
    `lrfdStringList0[0]`;
    `lrfdStringList0[1]`;
%        }
%    });
}

/*
 *  ======== RCL_GPIO_disable ========
 */
void RCL_GPIO_disable (void)
{
%rclGpio.signalList.forEach(signal => {
%   let pin = rclStatic.lrfGpio[`${signal.name.toLowerCase()}Pin`]
%        if (pin && signal.name != "RFCTRC")
%        {
%           let pinInstance = rclStatic[`${signal.name.toLowerCase()}PinInstance`]
%           let lrfdStringList0 = getLrfdStrings(pin, pinInstance, signal.name)

    /* `signal.name` */
    `lrfdStringList0[2]`;
%        }
%    });
}

%}
