%%{
/*
 * Copyright (c) 2022, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ADCLPF3.Board.c.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let ADC = args[0];
    let instances = ADC.$instances;
    if (instances.length == 0) return;

    /* get Common /ti/drivers utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = ADC.defaultInstanceName + "COUNT";

    let map = {
        "1"   : "ADCLPF3_CLKDIV_1",
        "2"   : "ADCLPF3_CLKDIV_2",
        "4"   : "ADCLPF3_CLKDIV_4",
        "8"   : "ADCLPF3_CLKDIV_8",
        "16"  : "ADCLPF3_CLKDIV_16",
        "24"  : "ADCLPF3_CLKDIV_24",
        "32"  : "ADCLPF3_CLKDIV_32",
        "48"  : "ADCLPF3_CLKDIV_48",
        "12 Bits" : "ADCLPF3_RESOLUTION_12_BIT",
        "10 Bits" : "ADCLPF3_RESOLUTION_10_BIT",
        "8 Bits" : "ADCLPF3_RESOLUTION_8_BIT",
        "VDDS" : "ADCLPF3_VDDS_REFERENCE",
        "Internal 1.4V" : "ADCLPF3_FIXED_REFERENCE_1V4",
        "Internal 2.5V" : "ADCLPF3_FIXED_REFERENCE_2V5",
        "External reference" : "ADCLPF3_EXTERNAL_REFERENCE"
    };

%%}
/*
 *  =============================== ADC ===============================
 */

#include <ti/drivers/ADC.h>
#include <ti/drivers/adc/ADCLPF3.h>
#include <ti/drivers/GPIO.h>

#define `countDef` `instances.length`

/*
 *  ======== adcLpf3Objects ========
 */
ADCLPF3_Object adcLpf3Objects[`countDef`];

/*
 *  ======== adcLpf3HWAttrs ========
 */
const ADCLPF3_HWAttrs adcLpf3HWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let inputPin, refPosPin, refNegPin, adcChannel, refVoltage;
    % if (inst.internalSignal === "None") {
    %     inputPin = inst.adcPinInstance.$name;
    %     adcChannel = ADC._pinToADCChannel(inst.adc.adcPin.$solution);
    % }
    % else {
    %     inputPin = "GPIO_INVALID_INDEX";
    %     adcChannel = 15;
    % }
    % if (inst.referenceSource === "External reference") {
    %     refPosPin = inst.adcRefPInstance.$name;
    %     refNegPin = inst.adcRefNInstance.$name;
    % }
    % else {
    %     refPosPin = "GPIO_INVALID_INDEX";
    %     refNegPin = "GPIO_INVALID_INDEX";
    % }
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    % if(map[inst.referenceSource] == "ADCLPF3_FIXED_REFERENCE_1V4"){
    %   refVoltage = "1400000";
    % } else if(map[inst.referenceSource] == "ADCLPF3_FIXED_REFERENCE_2V5"){
    %   refVoltage = "2500000";
    % } else {
    %   refVoltage = inst.referenceVoltage;
    % }
    {
        .adcInputDIO         = `inputPin`,
        .adcRefPosDIO        = `refPosPin`,
        .adcRefNegDIO        = `refNegPin`,
        .internalChannel     = `adcChannel`,
        .refSource           = `map[inst.referenceSource]`,
        .samplingDuration    = `inst.adcSampleTime`,
        .refVoltage          = `refVoltage`,
        .returnAdjustedVal   = `inst.adjustSampleValue`,
        .resolutionBits      = `map[inst.resolution]`,
        .adcClkkDivider      = `map[inst.adcClockDivider]`
    },
% }
};

/*
 *  ======== ADC_config ========
 */
const ADC_Config ADC_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .fxnTablePtr = &ADCLPF3_fxnTable,
        .object = &adcLpf3Objects[`inst.$name`],
        .hwAttrs = &adcLpf3HWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t ADC_count = `countDef`;
