%%{
/*
 * Copyright (c) 2020-2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== CCFG.Board_init.c.xdt ========
 */

    let CCFG = system.modules["/ti/devices/CCFG"];

    if (CCFG == undefined) {
        return;
    }

    let computeHposcPolynomial = false;
    let computeXoscPolynomial = false;
    let useFcfgInsertion = false;
    let compensateXOSCLFRTC = CCFG.$static.enableXoscLfComp;

    /* Enable XOSC_HF polynomial computation */
    if (CCFG.$static.enableXoscHfComp === true) {

        /* Choose whether to compute coefficients for BAW or a generic
         * crystal.
         */
        if (CCFG.$static.srcClkHF === "Internal High Precision Oscillator") {

            computeHposcPolynomial = true;
        }
        else if (CCFG.$static.useFcfgXoscHfInsertion === true) {
            useFcfgInsertion = true;
        }
        else {
            computeXoscPolynomial = true;
        }
    }
%%}
%   if (computeHposcPolynomial === true) {
    OSC_HPOSCInitializeFrequencyOffsetParameters();
%   }
%   else if (useFcfgInsertion === true) {
    OSC_HPOSCInitializeSingleInsertionFreqOffsParams(FCFG1_BASE + FCFG1_O_HPOSC_MEAS_1);
%   }
%   else if (computeXoscPolynomial === true) {
    uint32_t xoscHfInsertion = `CCFG.$static.xoscSinglePointCalibration`;
    OSC_HPOSCInitializeSingleInsertionFreqOffsParams((uint32_t)(&xoscHfInsertion));
%   }
%   if (compensateXOSCLFRTC) {
    PowerCC26X2_enableXoscLfRtcCompensation();
%   }
