%%{
/*
 * Copyright (c) 2021-2024, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ti_devices_cc23x0_config.c.xdt ========
 */

    var module = system.modules['/ti/devices/CCFG'];
    var inst = module.$static;
    const Common = system.getScript("/ti/drivers/Common.js");
    var i = 0;

%%}
/*
 *  ======== ti_devices_config.c ========
 *  Customer Configuration for CC23X0 devices.
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 *
 */

#include <ti/devices/DeviceFamily.h>
#include DeviceFamily_constructPath(inc/hw_ccfg.h)
% if(inst.useHwInitCopyList){
#include "`inst.hwInitCopyListFile`"    //hardware initialisation copy list
% }
% if(inst.enableUserRecord){
#include "`inst.userRecordFile`"    //user record
% }

#if defined(__IAR_SYSTEMS_ICC__)
__root const ccfg_t ccfg @ ".ccfg" =
#elif defined(__TI_COMPILER_VERSION__)
#pragma DATA_SECTION(ccfg, ".ccfg")
#pragma RETAIN(ccfg)
const ccfg_t ccfg =
#elif defined(__llvm__)
const ccfg_t ccfg __attribute__((section(".ccfg"), retain)) =
#else
const ccfg_t ccfg __attribute__((section(".ccfg"), used)) =
#endif
{
% if(inst.bldrSetting == "Default FCFG bootloader, with CCFG settings"){
    .bootCfg.pBldrVtor = CCFG_BC_PBLDR_USE_FCFG,
% }
% else if(inst.bldrSetting == "User-specific bootloader"){
    .bootCfg.pBldrVtor = (void*)0x`inst.pBldrVtor.toString(16)`,
% }
% else if(inst.bldrSetting == "Any bootloader forbidden"){
    .bootCfg.pBldrVtor = XCFG_BC_PBLDR_FORBID,
% }
% else {
    .bootCfg.pBldrVtor = XCFG_BC_PBLDR_UNDEF,
% }

% if(inst.bldrEnabled){
    .bootCfg.bldrParam.serialRomBldrParamStruct.bldrEnabled = XCFG_BC_BLDR_EN,
% } else {
    .bootCfg.bldrParam.serialRomBldrParamStruct.bldrEnabled = XCFG_BC_BLDR_DIS,
% }
    .bootCfg.bldrParam.serialRomBldrParamStruct.serialIoCfgIndex = `inst.serialIoCfgIndex`,
    .bootCfg.bldrParam.serialRomBldrParamStruct.pinTriggerDio = `inst.pinTriggerDio`,
% if(inst.pinTriggerEnabled){
    .bootCfg.bldrParam.serialRomBldrParamStruct.pinTriggerEnabled = XCFG_BC_PINTRIG_EN,
% } else {
    .bootCfg.bldrParam.serialRomBldrParamStruct.pinTriggerEnabled = XCFG_BC_PINTRIG_DIS,
% }
% if(inst.pinTriggerLevel === "HIGH"){
    .bootCfg.bldrParam.serialRomBldrParamStruct.pinTriggerLevel = XCFG_BC_PINTRIG_LEVEL_HI,
% } else {
    .bootCfg.bldrParam.serialRomBldrParamStruct.pinTriggerLevel = XCFG_BC_PINTRIG_LEVEL_LO,
% }
    .bootCfg.pAppVtor = (void*)0x`inst.pAppVtor.toString(16)`,

    /* Set to 0. This checksum must be calculated and updated prior to
     * programming the application to the device (this is normally handled as a
     * post-build step, or by the flashloader).
     */
    .bootCfg.crc32 = 0x00000000,

    .hwOpts = {0x`inst.hwOpts0.toString(16)`, 0x`inst.hwOpts1.toString(16)`},

% if(inst.allowDebugPort){
    .permissions.allowDebugPort = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowDebugPort = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowEnergyTrace){
    .permissions.allowEnergyTrace = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowEnergyTrace = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowFlashVerify){
    .permissions.allowFlashVerify = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowFlashVerify = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowFlashProgram){
    .permissions.allowFlashProgram = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowFlashProgram = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowChipErase){
    .permissions.allowChipErase = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowChipErase = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowToolsClientMode){
    .permissions.allowToolsClientMode = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowToolsClientMode = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowFakeStby){
    .permissions.allowFakeStby = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowFakeStby = CCFG_PERMISSION_FORBID,
% }
% if(inst.allowReturnToFactory){
    .permissions.allowReturnToFactory = CCFG_PERMISSION_ALLOW,
% } else {
    .permissions.allowReturnToFactory = CCFG_PERMISSION_FORBID,
% }

% if(inst.saciTimeoutOverride){
    .misc.saciTimeoutOverride = 1U,
% } else {
    .misc.saciTimeoutOverride = 0U,
% }
    .misc.saciTimeoutExp = `inst.saciTimeoutExp`,

    .flashProt.writeEraseProt.mainSectors0_31 = 0x`inst.writeEraseProt_mainSectors0_31.toString(16)`,
    .flashProt.writeEraseProt.mainSectors32_255 = 0x`inst.writeEraseProt_mainSectors32_255.toString(16)`,

    .flashProt.writeEraseProt.ccfgSector = `inst.writeEraseProt_ccfgSector ? 0 : 1`,
    .flashProt.writeEraseProt.fcfgSector = `inst.writeEraseProt_fcfgSector ? 0 : 1`,
    .flashProt.writeEraseProt.engrSector = `inst.writeEraseProt_engrSector ? 0 : 1`,

    .flashProt.res = 0xFFFFFFFFU,

    .flashProt.chipEraseRetain.mainSectors0_31 = 0x`inst.chipEraseRetain_mainSectors0_31.toString(16)`,
    /* The four most significant bits of erase and retain main sectors must be set to one.
     * Otherwise, the SACI command to erase and retain main sectors will fail.
     */
    .flashProt.chipEraseRetain.mainSectors32_255 = (0x`inst.chipEraseRetain_mainSectors32_255.toString(16)` | 0xF0000000),

% if(inst.useHwInitCopyList){
    .hwInitCopyList = {`inst.hwInitCopyListMacro`},

% }
    /* Set to 0. This checksum (across hwOpts through hwInitCopyList) must be
     * calculated and updated prior to programming the application to the device
     * (this is normally handled as a post-build step, or by the flashloader).
     */
    .crc32 = 0x00000000,

% if(inst.enableUserRecord){
    .userRecord = {`inst.userRecordMacro`},

% }
% else {
    /* No user record */
%   // Note, we also don't initialize userRecord.crc32.  The user is not
%   // providing a user record, there's no requirement (ROM-wise) for the
%   // .userRecord.crc32 to be initialized.
%}

% if(inst.debugAuthorization == "Require debug authentication"){
    .debugCfg.authorization = CCFG_DBGAUTH_REQPWD,
% }
% else if(inst.debugAuthorization == "Debug not allowed"){
    .debugCfg.authorization = CCFG_DBGAUTH_DBGFORBID,
% }
% else {
    .debugCfg.authorization = CCFG_DBGAUTH_DBGOPEN,
% }
% if(inst.debugAllowBldr){
    .debugCfg.allowBldr = CCFG_DBGBLDR_ALLOW,
% } else {
    .debugCfg.allowBldr = CCFG_DBGBLDR_FORBID,
% }
%%{
var tempArray = Common.hexToBytes(inst.debugPwdId, 8);
var arrStr = "";
var byteStr;
for(i=0; i<tempArray.length; i++){
    byteStr = "0x" + tempArray[i].toString(16).padStart(2,'0');
    if(i!=tempArray.length-1){
        arrStr += byteStr + ", ";
    } else {
        arrStr += byteStr;
    }
}
%%}
    .debugCfg.pwdId = {`arrStr`},
%%{
tempArray = Common.hexToBytes(inst.debugPwdHash, 32);
arrStr = "";
for(i=0; i<tempArray.length; i++){
    byteStr = "0x" + tempArray[i].toString(16).padStart(2,'0');
    if((i+1)%8 || i==0){
        arrStr += byteStr + ", ";
    } else if(i!=tempArray.length-1){
        arrStr += byteStr + ",\n                         ";
    } else {
        arrStr += byteStr;
    }
}
%%}
    .debugCfg.pwdHash = {`arrStr`},

    /* Set to 0. This checksum must be calculated and updated prior to
     * programming the application to the device (this is normally handled as a
     * post-build step, or by the flashloader).
     */
    .debugCfg.crc32 = 0x00000000,
};
