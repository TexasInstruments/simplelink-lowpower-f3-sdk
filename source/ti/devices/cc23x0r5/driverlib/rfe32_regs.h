// ===========================================================================
// This file is autogenerated, please DO NOT modify!
//
// Generated on  2023-04-18 13:27:19
// by user:      developer
// on machine:   swtools
// CWD:          /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/inc
// Commandline:  /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tools/topsm/topsmregs.pl -target c -base 0x40083400 -dat_sz 32 -i /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/doc/RFE32regs.txt
// C&P friendly: /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tools/topsm/topsmregs.pl -target c -base 0x40083400 -dat_sz 32 -i /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/doc/RFE32regs.txt
//
// Relevant file version(s):
//
// /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tools/topsm/topsmregs.pl
//   rcs-info: (file not managed or unknown revision control system)
//   git-hash: 0d11a0ea4ba55ba3ef648be18aeec231d5314753
//
// /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/doc/RFE32regs.txt
//   rcs-info: (file not managed or unknown revision control system)
//   git-hash: 24dd411f29b784498e635808d5234dd38d31281f
//
// ===========================================================================


#ifndef __RFE32_REGS_H
#define __RFE32_REGS_H

#ifndef __HW_TYPES_H__ 
  #ifndef HWREG
    #define HWREG(x) (*((volatile unsigned long *)(x)))
  #endif
#endif
#define RFE32_BASE 0x40083400UL
#define RF24_RFE32_BASE 0x40083400UL
// --------------------------------------------------------------
// FWSRC_ENABLE
// 
#define RFE32_FWSRC_ENABLE_ADR (RFE32_BASE + 0x0000UL)
static volatile unsigned long* const SP_RFE32_FWSRC_ENABLE = (unsigned long*) RFE32_FWSRC_ENABLE_ADR;
#define S_RFE32_FWSRC_ENABLE (*SP_RFE32_FWSRC_ENABLE)
#define RF24_RFE32_O_FWSRC_ENABLE                  0
// bitfield: FWSRC_ENABLE_DATARAM
#define RFE32_FWSRC_ENABLE_DATARAM                     18UL
#define RF24_RFE32_FWSRC_ENABLE_DATARAM_S        18UL
#define RFE32_FWSRC_ENABLE_DATARAM_BM                  0x00040000UL
#define RF24_RFE32_FWSRC_ENABLE_DATARAM_M        0x00040000UL
// enums for bitfield FWSRC_ENABLE_DATARAM (width: 1)UL
#define RFE32_FWSRC_ENABLE_DATARAM_RFERAM              0x0UL
#define RFE32_FWSRC_ENABLE_DATARAM_S2RRAM              0x1UL
// bitfield: FWSRC_ENABLE_FWRAM
#define RFE32_FWSRC_ENABLE_FWRAM                       17UL
#define RF24_RFE32_FWSRC_ENABLE_FWRAM_S          17UL
#define RFE32_FWSRC_ENABLE_FWRAM_BM                    0x00020000UL
#define RF24_RFE32_FWSRC_ENABLE_FWRAM_M          0x00020000UL
// enums for bitfield FWSRC_ENABLE_FWRAM (width: 1)UL
#define RFE32_FWSRC_ENABLE_FWRAM_RFERAM                0x0UL
#define RFE32_FWSRC_ENABLE_FWRAM_S2RRAM                0x1UL
// bitfield: FWSRC_ENABLE_BANK
#define RFE32_FWSRC_ENABLE_BANK                        16UL
#define RF24_RFE32_FWSRC_ENABLE_BANK_S           16UL
#define RFE32_FWSRC_ENABLE_BANK_BM                     0x00010000UL
#define RF24_RFE32_FWSRC_ENABLE_BANK_M           0x00010000UL
// enums for bitfield FWSRC_ENABLE_BANK (width: 1)UL
#define RFE32_FWSRC_ENABLE_BANK_ZERO                   0x0UL
#define RFE32_FWSRC_ENABLE_BANK_ONE                    0x1UL
// bitfield: FWSRC_ENABLE_ACC1
#define RFE32_FWSRC_ENABLE_ACC1                        3UL
#define RF24_RFE32_FWSRC_ENABLE_ACC1_S           3UL
#define RFE32_FWSRC_ENABLE_ACC1_BM                     0x00000008UL
#define RF24_RFE32_FWSRC_ENABLE_ACC1_M           0x00000008UL
// enums for bitfield FWSRC_ENABLE_ACC1 (width: 1)UL
#define RFE32_FWSRC_ENABLE_ACC1_DIS                    0x0UL
#define RFE32_FWSRC_ENABLE_ACC1_EN                     0x1UL
// bitfield: FWSRC_ENABLE_ACC0
#define RFE32_FWSRC_ENABLE_ACC0                        2UL
#define RF24_RFE32_FWSRC_ENABLE_ACC0_S           2UL
#define RFE32_FWSRC_ENABLE_ACC0_BM                     0x00000004UL
#define RF24_RFE32_FWSRC_ENABLE_ACC0_M           0x00000004UL
// enums for bitfield FWSRC_ENABLE_ACC0 (width: 1)UL
#define RFE32_FWSRC_ENABLE_ACC0_DIS                    0x0UL
#define RFE32_FWSRC_ENABLE_ACC0_EN                     0x1UL
// bitfield: FWSRC_ENABLE_LOCTIM
#define RFE32_FWSRC_ENABLE_LOCTIM                      1UL
#define RF24_RFE32_FWSRC_ENABLE_LOCTIM_S         1UL
#define RFE32_FWSRC_ENABLE_LOCTIM_BM                   0x00000002UL
#define RF24_RFE32_FWSRC_ENABLE_LOCTIM_M         0x00000002UL
// enums for bitfield FWSRC_ENABLE_LOCTIM (width: 1)UL
#define RFE32_FWSRC_ENABLE_LOCTIM_DIS                  0x0UL
#define RFE32_FWSRC_ENABLE_LOCTIM_EN                   0x1UL
// bitfield: FWSRC_ENABLE_TOPSM
#define RFE32_FWSRC_ENABLE_TOPSM                       0UL
#define RF24_RFE32_FWSRC_ENABLE_TOPSM_S          0UL
#define RFE32_FWSRC_ENABLE_TOPSM_BM                    0x00000001UL
#define RF24_RFE32_FWSRC_ENABLE_TOPSM_M          0x00000001UL
// enums for bitfield FWSRC_ENABLE_TOPSM (width: 1)UL
#define RFE32_FWSRC_ENABLE_TOPSM_DIS                   0x0UL
#define RFE32_FWSRC_ENABLE_TOPSM_EN                    0x1UL
// --------------------------------------------------------------
// PDREQ_INIT
// 
#define RFE32_PDREQ_INIT_ADR (RFE32_BASE + 0x0004UL)
static volatile unsigned long* const SP_RFE32_PDREQ_INIT = (unsigned long*) RFE32_PDREQ_INIT_ADR;
#define S_RFE32_PDREQ_INIT (*SP_RFE32_PDREQ_INIT)
#define RF24_RFE32_O_PDREQ_INIT                    4
// bitfield: PDREQ_INIT_TOPSMPDREQ
#define RFE32_PDREQ_INIT_TOPSMPDREQ                    16UL
#define RF24_RFE32_PDREQ_INIT_TOPSMPDREQ_S       16UL
#define RFE32_PDREQ_INIT_TOPSMPDREQ_BM                 0x00010000UL
#define RF24_RFE32_PDREQ_INIT_TOPSMPDREQ_M       0x00010000UL
// enums for bitfield PDREQ_INIT_TOPSMPDREQ (width: 1)UL
#define RFE32_PDREQ_INIT_TOPSMPDREQ_ZERO               0x0UL
#define RFE32_PDREQ_INIT_TOPSMPDREQ_ONE                0x1UL
// bitfield: PDREQ_INIT_ACC1
#define RFE32_PDREQ_INIT_ACC1                          3UL
#define RF24_RFE32_PDREQ_INIT_ACC1_S             3UL
#define RFE32_PDREQ_INIT_ACC1_BM                       0x00000008UL
#define RF24_RFE32_PDREQ_INIT_ACC1_M             0x00000008UL
// enums for bitfield PDREQ_INIT_ACC1 (width: 1)UL
#define RFE32_PDREQ_INIT_ACC1_NO_EFFECT                0x0UL
#define RFE32_PDREQ_INIT_ACC1_RESET                    0x1UL
// bitfield: PDREQ_INIT_ACC0
#define RFE32_PDREQ_INIT_ACC0                          2UL
#define RF24_RFE32_PDREQ_INIT_ACC0_S             2UL
#define RFE32_PDREQ_INIT_ACC0_BM                       0x00000004UL
#define RF24_RFE32_PDREQ_INIT_ACC0_M             0x00000004UL
// enums for bitfield PDREQ_INIT_ACC0 (width: 1)UL
#define RFE32_PDREQ_INIT_ACC0_NO_EFFECT                0x0UL
#define RFE32_PDREQ_INIT_ACC0_RESET                    0x1UL
// bitfield: PDREQ_INIT_LOCTIM
#define RFE32_PDREQ_INIT_LOCTIM                        1UL
#define RF24_RFE32_PDREQ_INIT_LOCTIM_S           1UL
#define RFE32_PDREQ_INIT_LOCTIM_BM                     0x00000002UL
#define RF24_RFE32_PDREQ_INIT_LOCTIM_M           0x00000002UL
// enums for bitfield PDREQ_INIT_LOCTIM (width: 1)UL
#define RFE32_PDREQ_INIT_LOCTIM_NO_EFFECT              0x0UL
#define RFE32_PDREQ_INIT_LOCTIM_RESET                  0x1UL
// bitfield: PDREQ_INIT_TOPSM
#define RFE32_PDREQ_INIT_TOPSM                         0UL
#define RF24_RFE32_PDREQ_INIT_TOPSM_S            0UL
#define RFE32_PDREQ_INIT_TOPSM_BM                      0x00000001UL
#define RF24_RFE32_PDREQ_INIT_TOPSM_M            0x00000001UL
// enums for bitfield PDREQ_INIT_TOPSM (width: 1)UL
#define RFE32_PDREQ_INIT_TOPSM_NO_EFFECT               0x0UL
#define RFE32_PDREQ_INIT_TOPSM_RESET                   0x1UL
// --------------------------------------------------------------
// EVT1_EVT0
// 
#define RFE32_EVT1_EVT0_ADR (RFE32_BASE + 0x0008UL)
static volatile unsigned long* const SP_RFE32_EVT1_EVT0 = (unsigned long*) RFE32_EVT1_EVT0_ADR;
#define S_RFE32_EVT1_EVT0 (*SP_RFE32_EVT1_EVT0)
#define RF24_RFE32_O_EVT1_EVT0                     8
// bitfield: EVT1_EVT0_PREREFCLK
#define RFE32_EVT1_EVT0_PREREFCLK                      29UL
#define RF24_RFE32_EVT1_EVT0_PREREFCLK_S         29UL
#define RFE32_EVT1_EVT0_PREREFCLK_BM                   0x20000000UL
#define RF24_RFE32_EVT1_EVT0_PREREFCLK_M         0x20000000UL
// enums for bitfield EVT1_EVT0_PREREFCLK (width: 1)UL
#define RFE32_EVT1_EVT0_PREREFCLK_ZERO                 0x0UL
#define RFE32_EVT1_EVT0_PREREFCLK_ONE                  0x1UL
// bitfield: EVT1_EVT0_REFCLK
#define RFE32_EVT1_EVT0_REFCLK                         28UL
#define RF24_RFE32_EVT1_EVT0_REFCLK_S            28UL
#define RFE32_EVT1_EVT0_REFCLK_BM                      0x10000000UL
#define RF24_RFE32_EVT1_EVT0_REFCLK_M            0x10000000UL
// enums for bitfield EVT1_EVT0_REFCLK (width: 1)UL
#define RFE32_EVT1_EVT0_REFCLK_ZERO                    0x0UL
#define RFE32_EVT1_EVT0_REFCLK_ONE                     0x1UL
// bitfield: EVT1_EVT0_FBLWTHR
#define RFE32_EVT1_EVT0_FBLWTHR                        27UL
#define RF24_RFE32_EVT1_EVT0_FBLWTHR_S           27UL
#define RFE32_EVT1_EVT0_FBLWTHR_BM                     0x08000000UL
#define RF24_RFE32_EVT1_EVT0_FBLWTHR_M           0x08000000UL
// enums for bitfield EVT1_EVT0_FBLWTHR (width: 1)UL
#define RFE32_EVT1_EVT0_FBLWTHR_ZERO                   0x0UL
#define RFE32_EVT1_EVT0_FBLWTHR_ONE                    0x1UL
// bitfield: EVT1_EVT0_FABVTHR
#define RFE32_EVT1_EVT0_FABVTHR                        26UL
#define RF24_RFE32_EVT1_EVT0_FABVTHR_S           26UL
#define RFE32_EVT1_EVT0_FABVTHR_BM                     0x04000000UL
#define RF24_RFE32_EVT1_EVT0_FABVTHR_M           0x04000000UL
// enums for bitfield EVT1_EVT0_FABVTHR (width: 1)UL
#define RFE32_EVT1_EVT0_FABVTHR_ZERO                   0x0UL
#define RFE32_EVT1_EVT0_FABVTHR_ONE                    0x1UL
// bitfield: EVT1_EVT0_LOCK
#define RFE32_EVT1_EVT0_LOCK                           25UL
#define RF24_RFE32_EVT1_EVT0_LOCK_S              25UL
#define RFE32_EVT1_EVT0_LOCK_BM                        0x02000000UL
#define RF24_RFE32_EVT1_EVT0_LOCK_M              0x02000000UL
// enums for bitfield EVT1_EVT0_LOCK (width: 1)UL
#define RFE32_EVT1_EVT0_LOCK_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_LOCK_ONE                       0x1UL
// bitfield: EVT1_EVT0_LOL
#define RFE32_EVT1_EVT0_LOL                            24UL
#define RF24_RFE32_EVT1_EVT0_LOL_S               24UL
#define RFE32_EVT1_EVT0_LOL_BM                         0x01000000UL
#define RF24_RFE32_EVT1_EVT0_LOL_M               0x01000000UL
// enums for bitfield EVT1_EVT0_LOL (width: 1)UL
#define RFE32_EVT1_EVT0_LOL_ZERO                       0x0UL
#define RFE32_EVT1_EVT0_LOL_ONE                        0x1UL
// bitfield: EVT1_EVT0_GPI7
#define RFE32_EVT1_EVT0_GPI7                           23UL
#define RF24_RFE32_EVT1_EVT0_GPI7_S              23UL
#define RFE32_EVT1_EVT0_GPI7_BM                        0x00800000UL
#define RF24_RFE32_EVT1_EVT0_GPI7_M              0x00800000UL
// enums for bitfield EVT1_EVT0_GPI7 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI7_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI7_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI6
#define RFE32_EVT1_EVT0_GPI6                           22UL
#define RF24_RFE32_EVT1_EVT0_GPI6_S              22UL
#define RFE32_EVT1_EVT0_GPI6_BM                        0x00400000UL
#define RF24_RFE32_EVT1_EVT0_GPI6_M              0x00400000UL
// enums for bitfield EVT1_EVT0_GPI6 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI6_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI6_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI5
#define RFE32_EVT1_EVT0_GPI5                           21UL
#define RF24_RFE32_EVT1_EVT0_GPI5_S              21UL
#define RFE32_EVT1_EVT0_GPI5_BM                        0x00200000UL
#define RF24_RFE32_EVT1_EVT0_GPI5_M              0x00200000UL
// enums for bitfield EVT1_EVT0_GPI5 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI5_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI5_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI4
#define RFE32_EVT1_EVT0_GPI4                           20UL
#define RF24_RFE32_EVT1_EVT0_GPI4_S              20UL
#define RFE32_EVT1_EVT0_GPI4_BM                        0x00100000UL
#define RF24_RFE32_EVT1_EVT0_GPI4_M              0x00100000UL
// enums for bitfield EVT1_EVT0_GPI4 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI4_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI4_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI3
#define RFE32_EVT1_EVT0_GPI3                           19UL
#define RF24_RFE32_EVT1_EVT0_GPI3_S              19UL
#define RFE32_EVT1_EVT0_GPI3_BM                        0x00080000UL
#define RF24_RFE32_EVT1_EVT0_GPI3_M              0x00080000UL
// enums for bitfield EVT1_EVT0_GPI3 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI3_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI3_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI2
#define RFE32_EVT1_EVT0_GPI2                           18UL
#define RF24_RFE32_EVT1_EVT0_GPI2_S              18UL
#define RFE32_EVT1_EVT0_GPI2_BM                        0x00040000UL
#define RF24_RFE32_EVT1_EVT0_GPI2_M              0x00040000UL
// enums for bitfield EVT1_EVT0_GPI2 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI2_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI2_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI1
#define RFE32_EVT1_EVT0_GPI1                           17UL
#define RF24_RFE32_EVT1_EVT0_GPI1_S              17UL
#define RFE32_EVT1_EVT0_GPI1_BM                        0x00020000UL
#define RF24_RFE32_EVT1_EVT0_GPI1_M              0x00020000UL
// enums for bitfield EVT1_EVT0_GPI1 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI1_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI1_ONE                       0x1UL
// bitfield: EVT1_EVT0_GPI0
#define RFE32_EVT1_EVT0_GPI0                           16UL
#define RF24_RFE32_EVT1_EVT0_GPI0_S              16UL
#define RFE32_EVT1_EVT0_GPI0_BM                        0x00010000UL
#define RF24_RFE32_EVT1_EVT0_GPI0_M              0x00010000UL
// enums for bitfield EVT1_EVT0_GPI0 (width: 1)UL
#define RFE32_EVT1_EVT0_GPI0_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_GPI0_ONE                       0x1UL
// bitfield: EVT1_EVT0_MAGNTHR
#define RFE32_EVT1_EVT0_MAGNTHR                        14UL
#define RF24_RFE32_EVT1_EVT0_MAGNTHR_S           14UL
#define RFE32_EVT1_EVT0_MAGNTHR_BM                     0x00004000UL
#define RF24_RFE32_EVT1_EVT0_MAGNTHR_M           0x00004000UL
// enums for bitfield EVT1_EVT0_MAGNTHR (width: 1)UL
#define RFE32_EVT1_EVT0_MAGNTHR_ZERO                   0x0UL
#define RFE32_EVT1_EVT0_MAGNTHR_ONE                    0x1UL
// bitfield: EVT1_EVT0_S2RSTOP
#define RFE32_EVT1_EVT0_S2RSTOP                        13UL
#define RF24_RFE32_EVT1_EVT0_S2RSTOP_S           13UL
#define RFE32_EVT1_EVT0_S2RSTOP_BM                     0x00002000UL
#define RF24_RFE32_EVT1_EVT0_S2RSTOP_M           0x00002000UL
// enums for bitfield EVT1_EVT0_S2RSTOP (width: 1)UL
#define RFE32_EVT1_EVT0_S2RSTOP_ZERO                   0x0UL
#define RFE32_EVT1_EVT0_S2RSTOP_ONE                    0x1UL
// bitfield: EVT1_EVT0_SYSTCMP2
#define RFE32_EVT1_EVT0_SYSTCMP2                       12UL
#define RF24_RFE32_EVT1_EVT0_SYSTCMP2_S          12UL
#define RFE32_EVT1_EVT0_SYSTCMP2_BM                    0x00001000UL
#define RF24_RFE32_EVT1_EVT0_SYSTCMP2_M          0x00001000UL
// enums for bitfield EVT1_EVT0_SYSTCMP2 (width: 1)UL
#define RFE32_EVT1_EVT0_SYSTCMP2_ZERO                  0x0UL
#define RFE32_EVT1_EVT0_SYSTCMP2_ONE                   0x1UL
// bitfield: EVT1_EVT0_SYSTCMP1
#define RFE32_EVT1_EVT0_SYSTCMP1                       11UL
#define RF24_RFE32_EVT1_EVT0_SYSTCMP1_S          11UL
#define RFE32_EVT1_EVT0_SYSTCMP1_BM                    0x00000800UL
#define RF24_RFE32_EVT1_EVT0_SYSTCMP1_M          0x00000800UL
// enums for bitfield EVT1_EVT0_SYSTCMP1 (width: 1)UL
#define RFE32_EVT1_EVT0_SYSTCMP1_ZERO                  0x0UL
#define RFE32_EVT1_EVT0_SYSTCMP1_ONE                   0x1UL
// bitfield: EVT1_EVT0_SYSTCMP0
#define RFE32_EVT1_EVT0_SYSTCMP0                       10UL
#define RF24_RFE32_EVT1_EVT0_SYSTCMP0_S          10UL
#define RFE32_EVT1_EVT0_SYSTCMP0_BM                    0x00000400UL
#define RF24_RFE32_EVT1_EVT0_SYSTCMP0_M          0x00000400UL
// enums for bitfield EVT1_EVT0_SYSTCMP0 (width: 1)UL
#define RFE32_EVT1_EVT0_SYSTCMP0_ZERO                  0x0UL
#define RFE32_EVT1_EVT0_SYSTCMP0_ONE                   0x1UL
// bitfield: EVT1_EVT0_PBERFEDAT
#define RFE32_EVT1_EVT0_PBERFEDAT                      9UL
#define RF24_RFE32_EVT1_EVT0_PBERFEDAT_S         9UL
#define RFE32_EVT1_EVT0_PBERFEDAT_BM                   0x00000200UL
#define RF24_RFE32_EVT1_EVT0_PBERFEDAT_M         0x00000200UL
// enums for bitfield EVT1_EVT0_PBERFEDAT (width: 1)UL
#define RFE32_EVT1_EVT0_PBERFEDAT_ZERO                 0x0UL
#define RFE32_EVT1_EVT0_PBERFEDAT_ONE                  0x1UL
// bitfield: EVT1_EVT0_MDMRFEDAT
#define RFE32_EVT1_EVT0_MDMRFEDAT                      8UL
#define RF24_RFE32_EVT1_EVT0_MDMRFEDAT_S         8UL
#define RFE32_EVT1_EVT0_MDMRFEDAT_BM                   0x00000100UL
#define RF24_RFE32_EVT1_EVT0_MDMRFEDAT_M         0x00000100UL
// enums for bitfield EVT1_EVT0_MDMRFEDAT (width: 1)UL
#define RFE32_EVT1_EVT0_MDMRFEDAT_ZERO                 0x0UL
#define RFE32_EVT1_EVT0_MDMRFEDAT_ONE                  0x1UL
// bitfield: EVT1_EVT0_DLO
#define RFE32_EVT1_EVT0_DLO                            7UL
#define RF24_RFE32_EVT1_EVT0_DLO_S               7UL
#define RFE32_EVT1_EVT0_DLO_BM                         0x00000080UL
#define RF24_RFE32_EVT1_EVT0_DLO_M               0x00000080UL
// enums for bitfield EVT1_EVT0_DLO (width: 1)UL
#define RFE32_EVT1_EVT0_DLO_ZERO                       0x0UL
#define RFE32_EVT1_EVT0_DLO_ONE                        0x1UL
// bitfield: EVT1_EVT0_PBECMD
#define RFE32_EVT1_EVT0_PBECMD                         6UL
#define RF24_RFE32_EVT1_EVT0_PBECMD_S            6UL
#define RFE32_EVT1_EVT0_PBECMD_BM                      0x00000040UL
#define RF24_RFE32_EVT1_EVT0_PBECMD_M            0x00000040UL
// enums for bitfield EVT1_EVT0_PBECMD (width: 1)UL
#define RFE32_EVT1_EVT0_PBECMD_ZERO                    0x0UL
#define RFE32_EVT1_EVT0_PBECMD_ONE                     0x1UL
// bitfield: EVT1_EVT0_COUNTER
#define RFE32_EVT1_EVT0_COUNTER                        5UL
#define RF24_RFE32_EVT1_EVT0_COUNTER_S           5UL
#define RFE32_EVT1_EVT0_COUNTER_BM                     0x00000020UL
#define RF24_RFE32_EVT1_EVT0_COUNTER_M           0x00000020UL
// enums for bitfield EVT1_EVT0_COUNTER (width: 1)UL
#define RFE32_EVT1_EVT0_COUNTER_ZERO                   0x0UL
#define RFE32_EVT1_EVT0_COUNTER_ONE                    0x1UL
// bitfield: EVT1_EVT0_MDMCMD
#define RFE32_EVT1_EVT0_MDMCMD                         4UL
#define RF24_RFE32_EVT1_EVT0_MDMCMD_S            4UL
#define RFE32_EVT1_EVT0_MDMCMD_BM                      0x00000010UL
#define RF24_RFE32_EVT1_EVT0_MDMCMD_M            0x00000010UL
// enums for bitfield EVT1_EVT0_MDMCMD (width: 1)UL
#define RFE32_EVT1_EVT0_MDMCMD_ZERO                    0x0UL
#define RFE32_EVT1_EVT0_MDMCMD_ONE                     0x1UL
// bitfield: EVT1_EVT0_ACC1
#define RFE32_EVT1_EVT0_ACC1                           3UL
#define RF24_RFE32_EVT1_EVT0_ACC1_S              3UL
#define RFE32_EVT1_EVT0_ACC1_BM                        0x00000008UL
#define RF24_RFE32_EVT1_EVT0_ACC1_M              0x00000008UL
// enums for bitfield EVT1_EVT0_ACC1 (width: 1)UL
#define RFE32_EVT1_EVT0_ACC1_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_ACC1_ONE                       0x1UL
// bitfield: EVT1_EVT0_ACC0
#define RFE32_EVT1_EVT0_ACC0                           2UL
#define RF24_RFE32_EVT1_EVT0_ACC0_S              2UL
#define RFE32_EVT1_EVT0_ACC0_BM                        0x00000004UL
#define RF24_RFE32_EVT1_EVT0_ACC0_M              0x00000004UL
// enums for bitfield EVT1_EVT0_ACC0 (width: 1)UL
#define RFE32_EVT1_EVT0_ACC0_ZERO                      0x0UL
#define RFE32_EVT1_EVT0_ACC0_ONE                       0x1UL
// bitfield: EVT1_EVT0_TIMER
#define RFE32_EVT1_EVT0_TIMER                          1UL
#define RF24_RFE32_EVT1_EVT0_TIMER_S             1UL
#define RFE32_EVT1_EVT0_TIMER_BM                       0x00000002UL
#define RF24_RFE32_EVT1_EVT0_TIMER_M             0x00000002UL
// enums for bitfield EVT1_EVT0_TIMER (width: 1)UL
#define RFE32_EVT1_EVT0_TIMER_ZERO                     0x0UL
#define RFE32_EVT1_EVT0_TIMER_ONE                      0x1UL
// bitfield: EVT1_EVT0_RFEAPI
#define RFE32_EVT1_EVT0_RFEAPI                         0UL
#define RF24_RFE32_EVT1_EVT0_RFEAPI_S            0UL
#define RFE32_EVT1_EVT0_RFEAPI_BM                      0x00000001UL
#define RF24_RFE32_EVT1_EVT0_RFEAPI_M            0x00000001UL
// enums for bitfield EVT1_EVT0_RFEAPI (width: 1)UL
#define RFE32_EVT1_EVT0_RFEAPI_ZERO                    0x0UL
#define RFE32_EVT1_EVT0_RFEAPI_ONE                     0x1UL
// --------------------------------------------------------------
// EVTMSK1_EVTMSK0
// 
#define RFE32_EVTMSK1_EVTMSK0_ADR (RFE32_BASE + 0x000CUL)
static volatile unsigned long* const SP_RFE32_EVTMSK1_EVTMSK0 = (unsigned long*) RFE32_EVTMSK1_EVTMSK0_ADR;
#define S_RFE32_EVTMSK1_EVTMSK0 (*SP_RFE32_EVTMSK1_EVTMSK0)
#define RF24_RFE32_O_EVTMSK1_EVTMSK0               12
// bitfield: EVTMSK1_EVTMSK0_PREREFCLK
#define RFE32_EVTMSK1_EVTMSK0_PREREFCLK                29UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_PREREFCLK_S   29UL
#define RFE32_EVTMSK1_EVTMSK0_PREREFCLK_BM             0x20000000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_PREREFCLK_M   0x20000000UL
// enums for bitfield EVTMSK1_EVTMSK0_PREREFCLK (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_PREREFCLK_DIS            0x0UL
#define RFE32_EVTMSK1_EVTMSK0_PREREFCLK_EN             0x1UL
// bitfield: EVTMSK1_EVTMSK0_REFCLK
#define RFE32_EVTMSK1_EVTMSK0_REFCLK                   28UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_REFCLK_S      28UL
#define RFE32_EVTMSK1_EVTMSK0_REFCLK_BM                0x10000000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_REFCLK_M      0x10000000UL
// enums for bitfield EVTMSK1_EVTMSK0_REFCLK (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_REFCLK_DIS               0x0UL
#define RFE32_EVTMSK1_EVTMSK0_REFCLK_EN                0x1UL
// bitfield: EVTMSK1_EVTMSK0_FBLWTHR
#define RFE32_EVTMSK1_EVTMSK0_FBLWTHR                  27UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_FBLWTHR_S     27UL
#define RFE32_EVTMSK1_EVTMSK0_FBLWTHR_BM               0x08000000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_FBLWTHR_M     0x08000000UL
// enums for bitfield EVTMSK1_EVTMSK0_FBLWTHR (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_FBLWTHR_DIS              0x0UL
#define RFE32_EVTMSK1_EVTMSK0_FBLWTHR_EN               0x1UL
// bitfield: EVTMSK1_EVTMSK0_FABVTHR
#define RFE32_EVTMSK1_EVTMSK0_FABVTHR                  26UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_FABVTHR_S     26UL
#define RFE32_EVTMSK1_EVTMSK0_FABVTHR_BM               0x04000000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_FABVTHR_M     0x04000000UL
// enums for bitfield EVTMSK1_EVTMSK0_FABVTHR (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_FABVTHR_DIS              0x0UL
#define RFE32_EVTMSK1_EVTMSK0_FABVTHR_EN               0x1UL
// bitfield: EVTMSK1_EVTMSK0_LOCK
#define RFE32_EVTMSK1_EVTMSK0_LOCK                     25UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_LOCK_S        25UL
#define RFE32_EVTMSK1_EVTMSK0_LOCK_BM                  0x02000000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_LOCK_M        0x02000000UL
// enums for bitfield EVTMSK1_EVTMSK0_LOCK (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_LOCK_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_LOCK_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_LOL
#define RFE32_EVTMSK1_EVTMSK0_LOL                      24UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_LOL_S         24UL
#define RFE32_EVTMSK1_EVTMSK0_LOL_BM                   0x01000000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_LOL_M         0x01000000UL
// enums for bitfield EVTMSK1_EVTMSK0_LOL (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_LOL_DIS                  0x0UL
#define RFE32_EVTMSK1_EVTMSK0_LOL_EN                   0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI7
#define RFE32_EVTMSK1_EVTMSK0_GPI7                     23UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI7_S        23UL
#define RFE32_EVTMSK1_EVTMSK0_GPI7_BM                  0x00800000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI7_M        0x00800000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI7 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI7_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI7_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI6
#define RFE32_EVTMSK1_EVTMSK0_GPI6                     22UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI6_S        22UL
#define RFE32_EVTMSK1_EVTMSK0_GPI6_BM                  0x00400000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI6_M        0x00400000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI6 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI6_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI6_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI5
#define RFE32_EVTMSK1_EVTMSK0_GPI5                     21UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI5_S        21UL
#define RFE32_EVTMSK1_EVTMSK0_GPI5_BM                  0x00200000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI5_M        0x00200000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI5 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI5_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI5_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI4
#define RFE32_EVTMSK1_EVTMSK0_GPI4                     20UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI4_S        20UL
#define RFE32_EVTMSK1_EVTMSK0_GPI4_BM                  0x00100000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI4_M        0x00100000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI4 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI4_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI4_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI3
#define RFE32_EVTMSK1_EVTMSK0_GPI3                     19UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI3_S        19UL
#define RFE32_EVTMSK1_EVTMSK0_GPI3_BM                  0x00080000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI3_M        0x00080000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI3 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI3_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI3_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI2
#define RFE32_EVTMSK1_EVTMSK0_GPI2                     18UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI2_S        18UL
#define RFE32_EVTMSK1_EVTMSK0_GPI2_BM                  0x00040000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI2_M        0x00040000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI2 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI2_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI2_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI1
#define RFE32_EVTMSK1_EVTMSK0_GPI1                     17UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI1_S        17UL
#define RFE32_EVTMSK1_EVTMSK0_GPI1_BM                  0x00020000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI1_M        0x00020000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI1 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI1_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI1_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_GPI0
#define RFE32_EVTMSK1_EVTMSK0_GPI0                     16UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI0_S        16UL
#define RFE32_EVTMSK1_EVTMSK0_GPI0_BM                  0x00010000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_GPI0_M        0x00010000UL
// enums for bitfield EVTMSK1_EVTMSK0_GPI0 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_GPI0_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_GPI0_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_MAGNTHR
#define RFE32_EVTMSK1_EVTMSK0_MAGNTHR                  14UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_MAGNTHR_S     14UL
#define RFE32_EVTMSK1_EVTMSK0_MAGNTHR_BM               0x00004000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_MAGNTHR_M     0x00004000UL
// enums for bitfield EVTMSK1_EVTMSK0_MAGNTHR (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_MAGNTHR_DIS              0x0UL
#define RFE32_EVTMSK1_EVTMSK0_MAGNTHR_EN               0x1UL
// bitfield: EVTMSK1_EVTMSK0_S2RSTOP
#define RFE32_EVTMSK1_EVTMSK0_S2RSTOP                  13UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_S2RSTOP_S     13UL
#define RFE32_EVTMSK1_EVTMSK0_S2RSTOP_BM               0x00002000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_S2RSTOP_M     0x00002000UL
// enums for bitfield EVTMSK1_EVTMSK0_S2RSTOP (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_S2RSTOP_DIS              0x0UL
#define RFE32_EVTMSK1_EVTMSK0_S2RSTOP_EN               0x1UL
// bitfield: EVTMSK1_EVTMSK0_SYSTCMP2
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP2                 12UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_SYSTCMP2_S    12UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP2_BM              0x00001000UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_SYSTCMP2_M    0x00001000UL
// enums for bitfield EVTMSK1_EVTMSK0_SYSTCMP2 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP2_DIS             0x0UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP2_EN              0x1UL
// bitfield: EVTMSK1_EVTMSK0_SYSTCMP1
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP1                 11UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_SYSTCMP1_S    11UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP1_BM              0x00000800UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_SYSTCMP1_M    0x00000800UL
// enums for bitfield EVTMSK1_EVTMSK0_SYSTCMP1 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP1_DIS             0x0UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP1_EN              0x1UL
// bitfield: EVTMSK1_EVTMSK0_SYSTCMP0
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP0                 10UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_SYSTCMP0_S    10UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP0_BM              0x00000400UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_SYSTCMP0_M    0x00000400UL
// enums for bitfield EVTMSK1_EVTMSK0_SYSTCMP0 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP0_DIS             0x0UL
#define RFE32_EVTMSK1_EVTMSK0_SYSTCMP0_EN              0x1UL
// bitfield: EVTMSK1_EVTMSK0_PBERFEDAT
#define RFE32_EVTMSK1_EVTMSK0_PBERFEDAT                9UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_PBERFEDAT_S   9UL
#define RFE32_EVTMSK1_EVTMSK0_PBERFEDAT_BM             0x00000200UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_PBERFEDAT_M   0x00000200UL
// enums for bitfield EVTMSK1_EVTMSK0_PBERFEDAT (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_PBERFEDAT_DIS            0x0UL
#define RFE32_EVTMSK1_EVTMSK0_PBERFEDAT_EN             0x1UL
// bitfield: EVTMSK1_EVTMSK0_MDMRFEDAT
#define RFE32_EVTMSK1_EVTMSK0_MDMRFEDAT                8UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_S   8UL
#define RFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_BM             0x00000100UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_M   0x00000100UL
// enums for bitfield EVTMSK1_EVTMSK0_MDMRFEDAT (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_DIS            0x0UL
#define RFE32_EVTMSK1_EVTMSK0_MDMRFEDAT_EN             0x1UL
// bitfield: EVTMSK1_EVTMSK0_DLO
#define RFE32_EVTMSK1_EVTMSK0_DLO                      7UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_DLO_S         7UL
#define RFE32_EVTMSK1_EVTMSK0_DLO_BM                   0x00000080UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_DLO_M         0x00000080UL
// enums for bitfield EVTMSK1_EVTMSK0_DLO (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_DLO_DIS                  0x0UL
#define RFE32_EVTMSK1_EVTMSK0_DLO_EN                   0x1UL
// bitfield: EVTMSK1_EVTMSK0_PBECMD
#define RFE32_EVTMSK1_EVTMSK0_PBECMD                   6UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_PBECMD_S      6UL
#define RFE32_EVTMSK1_EVTMSK0_PBECMD_BM                0x00000040UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_PBECMD_M      0x00000040UL
// enums for bitfield EVTMSK1_EVTMSK0_PBECMD (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_PBECMD_DIS               0x0UL
#define RFE32_EVTMSK1_EVTMSK0_PBECMD_EN                0x1UL
// bitfield: EVTMSK1_EVTMSK0_COUNTER
#define RFE32_EVTMSK1_EVTMSK0_COUNTER                  5UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_COUNTER_S     5UL
#define RFE32_EVTMSK1_EVTMSK0_COUNTER_BM               0x00000020UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_COUNTER_M     0x00000020UL
// enums for bitfield EVTMSK1_EVTMSK0_COUNTER (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_COUNTER_DIS              0x0UL
#define RFE32_EVTMSK1_EVTMSK0_COUNTER_EN               0x1UL
// bitfield: EVTMSK1_EVTMSK0_MDMCMD
#define RFE32_EVTMSK1_EVTMSK0_MDMCMD                   4UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_MDMCMD_S      4UL
#define RFE32_EVTMSK1_EVTMSK0_MDMCMD_BM                0x00000010UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_MDMCMD_M      0x00000010UL
// enums for bitfield EVTMSK1_EVTMSK0_MDMCMD (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_MDMCMD_DIS               0x0UL
#define RFE32_EVTMSK1_EVTMSK0_MDMCMD_EN                0x1UL
// bitfield: EVTMSK1_EVTMSK0_ACC1
#define RFE32_EVTMSK1_EVTMSK0_ACC1                     3UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_ACC1_S        3UL
#define RFE32_EVTMSK1_EVTMSK0_ACC1_BM                  0x00000008UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_ACC1_M        0x00000008UL
// enums for bitfield EVTMSK1_EVTMSK0_ACC1 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_ACC1_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_ACC1_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_ACC0
#define RFE32_EVTMSK1_EVTMSK0_ACC0                     2UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_ACC0_S        2UL
#define RFE32_EVTMSK1_EVTMSK0_ACC0_BM                  0x00000004UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_ACC0_M        0x00000004UL
// enums for bitfield EVTMSK1_EVTMSK0_ACC0 (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_ACC0_DIS                 0x0UL
#define RFE32_EVTMSK1_EVTMSK0_ACC0_EN                  0x1UL
// bitfield: EVTMSK1_EVTMSK0_TIMER
#define RFE32_EVTMSK1_EVTMSK0_TIMER                    1UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_TIMER_S       1UL
#define RFE32_EVTMSK1_EVTMSK0_TIMER_BM                 0x00000002UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_TIMER_M       0x00000002UL
// enums for bitfield EVTMSK1_EVTMSK0_TIMER (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_TIMER_DIS                0x0UL
#define RFE32_EVTMSK1_EVTMSK0_TIMER_EN                 0x1UL
// bitfield: EVTMSK1_EVTMSK0_RFEAPI
#define RFE32_EVTMSK1_EVTMSK0_RFEAPI                   0UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_RFEAPI_S      0UL
#define RFE32_EVTMSK1_EVTMSK0_RFEAPI_BM                0x00000001UL
#define RF24_RFE32_EVTMSK1_EVTMSK0_RFEAPI_M      0x00000001UL
// enums for bitfield EVTMSK1_EVTMSK0_RFEAPI (width: 1)UL
#define RFE32_EVTMSK1_EVTMSK0_RFEAPI_DIS               0x0UL
#define RFE32_EVTMSK1_EVTMSK0_RFEAPI_EN                0x1UL
// --------------------------------------------------------------
// EVTCLR1_EVTCLR0
// 
#define RFE32_EVTCLR1_EVTCLR0_ADR (RFE32_BASE + 0x0010UL)
static volatile unsigned long* const SP_RFE32_EVTCLR1_EVTCLR0 = (unsigned long*) RFE32_EVTCLR1_EVTCLR0_ADR;
#define S_RFE32_EVTCLR1_EVTCLR0 (*SP_RFE32_EVTCLR1_EVTCLR0)
#define RF24_RFE32_O_EVTCLR1_EVTCLR0               16
// bitfield: EVTCLR1_EVTCLR0_PREREFCLK
#define RFE32_EVTCLR1_EVTCLR0_PREREFCLK                29UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_PREREFCLK_S   29UL
#define RFE32_EVTCLR1_EVTCLR0_PREREFCLK_BM             0x20000000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_PREREFCLK_M   0x20000000UL
// enums for bitfield EVTCLR1_EVTCLR0_PREREFCLK (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_PREREFCLK_ZERO           0x0UL
#define RFE32_EVTCLR1_EVTCLR0_PREREFCLK_ONE            0x1UL
// bitfield: EVTCLR1_EVTCLR0_REFCLK
#define RFE32_EVTCLR1_EVTCLR0_REFCLK                   28UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_REFCLK_S      28UL
#define RFE32_EVTCLR1_EVTCLR0_REFCLK_BM                0x10000000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_REFCLK_M      0x10000000UL
// enums for bitfield EVTCLR1_EVTCLR0_REFCLK (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_REFCLK_ZERO              0x0UL
#define RFE32_EVTCLR1_EVTCLR0_REFCLK_ONE               0x1UL
// bitfield: EVTCLR1_EVTCLR0_FBLWTHR
#define RFE32_EVTCLR1_EVTCLR0_FBLWTHR                  27UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_FBLWTHR_S     27UL
#define RFE32_EVTCLR1_EVTCLR0_FBLWTHR_BM               0x08000000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_FBLWTHR_M     0x08000000UL
// enums for bitfield EVTCLR1_EVTCLR0_FBLWTHR (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_FBLWTHR_ZERO             0x0UL
#define RFE32_EVTCLR1_EVTCLR0_FBLWTHR_ONE              0x1UL
// bitfield: EVTCLR1_EVTCLR0_FABVTHR
#define RFE32_EVTCLR1_EVTCLR0_FABVTHR                  26UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_FABVTHR_S     26UL
#define RFE32_EVTCLR1_EVTCLR0_FABVTHR_BM               0x04000000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_FABVTHR_M     0x04000000UL
// enums for bitfield EVTCLR1_EVTCLR0_FABVTHR (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_FABVTHR_ZERO             0x0UL
#define RFE32_EVTCLR1_EVTCLR0_FABVTHR_ONE              0x1UL
// bitfield: EVTCLR1_EVTCLR0_LOCK
#define RFE32_EVTCLR1_EVTCLR0_LOCK                     25UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_LOCK_S        25UL
#define RFE32_EVTCLR1_EVTCLR0_LOCK_BM                  0x02000000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_LOCK_M        0x02000000UL
// enums for bitfield EVTCLR1_EVTCLR0_LOCK (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_LOCK_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_LOCK_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_LOL
#define RFE32_EVTCLR1_EVTCLR0_LOL                      24UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_LOL_S         24UL
#define RFE32_EVTCLR1_EVTCLR0_LOL_BM                   0x01000000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_LOL_M         0x01000000UL
// enums for bitfield EVTCLR1_EVTCLR0_LOL (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_LOL_ZERO                 0x0UL
#define RFE32_EVTCLR1_EVTCLR0_LOL_ONE                  0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI7
#define RFE32_EVTCLR1_EVTCLR0_GPI7                     23UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI7_S        23UL
#define RFE32_EVTCLR1_EVTCLR0_GPI7_BM                  0x00800000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI7_M        0x00800000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI7 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI7_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI7_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI6
#define RFE32_EVTCLR1_EVTCLR0_GPI6                     22UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI6_S        22UL
#define RFE32_EVTCLR1_EVTCLR0_GPI6_BM                  0x00400000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI6_M        0x00400000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI6 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI6_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI6_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI5
#define RFE32_EVTCLR1_EVTCLR0_GPI5                     21UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI5_S        21UL
#define RFE32_EVTCLR1_EVTCLR0_GPI5_BM                  0x00200000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI5_M        0x00200000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI5 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI5_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI5_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI4
#define RFE32_EVTCLR1_EVTCLR0_GPI4                     20UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI4_S        20UL
#define RFE32_EVTCLR1_EVTCLR0_GPI4_BM                  0x00100000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI4_M        0x00100000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI4 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI4_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI4_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI3
#define RFE32_EVTCLR1_EVTCLR0_GPI3                     19UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI3_S        19UL
#define RFE32_EVTCLR1_EVTCLR0_GPI3_BM                  0x00080000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI3_M        0x00080000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI3 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI3_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI3_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI2
#define RFE32_EVTCLR1_EVTCLR0_GPI2                     18UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI2_S        18UL
#define RFE32_EVTCLR1_EVTCLR0_GPI2_BM                  0x00040000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI2_M        0x00040000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI2 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI2_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI2_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI1
#define RFE32_EVTCLR1_EVTCLR0_GPI1                     17UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI1_S        17UL
#define RFE32_EVTCLR1_EVTCLR0_GPI1_BM                  0x00020000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI1_M        0x00020000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI1 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI1_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI1_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_GPI0
#define RFE32_EVTCLR1_EVTCLR0_GPI0                     16UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI0_S        16UL
#define RFE32_EVTCLR1_EVTCLR0_GPI0_BM                  0x00010000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_GPI0_M        0x00010000UL
// enums for bitfield EVTCLR1_EVTCLR0_GPI0 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_GPI0_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_GPI0_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_MAGNTHR
#define RFE32_EVTCLR1_EVTCLR0_MAGNTHR                  14UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_MAGNTHR_S     14UL
#define RFE32_EVTCLR1_EVTCLR0_MAGNTHR_BM               0x00004000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_MAGNTHR_M     0x00004000UL
// enums for bitfield EVTCLR1_EVTCLR0_MAGNTHR (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_MAGNTHR_ZERO             0x0UL
#define RFE32_EVTCLR1_EVTCLR0_MAGNTHR_ONE              0x1UL
// bitfield: EVTCLR1_EVTCLR0_S2RSTOP
#define RFE32_EVTCLR1_EVTCLR0_S2RSTOP                  13UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_S2RSTOP_S     13UL
#define RFE32_EVTCLR1_EVTCLR0_S2RSTOP_BM               0x00002000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_S2RSTOP_M     0x00002000UL
// enums for bitfield EVTCLR1_EVTCLR0_S2RSTOP (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_S2RSTOP_ZERO             0x0UL
#define RFE32_EVTCLR1_EVTCLR0_S2RSTOP_ONE              0x1UL
// bitfield: EVTCLR1_EVTCLR0_SYSTCMP2
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP2                 12UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_SYSTCMP2_S    12UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP2_BM              0x00001000UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_SYSTCMP2_M    0x00001000UL
// enums for bitfield EVTCLR1_EVTCLR0_SYSTCMP2 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP2_ZERO            0x0UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP2_ONE             0x1UL
// bitfield: EVTCLR1_EVTCLR0_SYSTCMP1
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP1                 11UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_SYSTCMP1_S    11UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP1_BM              0x00000800UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_SYSTCMP1_M    0x00000800UL
// enums for bitfield EVTCLR1_EVTCLR0_SYSTCMP1 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP1_ZERO            0x0UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP1_ONE             0x1UL
// bitfield: EVTCLR1_EVTCLR0_SYSTCMP0
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP0                 10UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_SYSTCMP0_S    10UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP0_BM              0x00000400UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_SYSTCMP0_M    0x00000400UL
// enums for bitfield EVTCLR1_EVTCLR0_SYSTCMP0 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP0_ZERO            0x0UL
#define RFE32_EVTCLR1_EVTCLR0_SYSTCMP0_ONE             0x1UL
// bitfield: EVTCLR1_EVTCLR0_PBERFEDAT
#define RFE32_EVTCLR1_EVTCLR0_PBERFEDAT                9UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_PBERFEDAT_S   9UL
#define RFE32_EVTCLR1_EVTCLR0_PBERFEDAT_BM             0x00000200UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_PBERFEDAT_M   0x00000200UL
// enums for bitfield EVTCLR1_EVTCLR0_PBERFEDAT (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_PBERFEDAT_ZERO           0x0UL
#define RFE32_EVTCLR1_EVTCLR0_PBERFEDAT_ONE            0x1UL
// bitfield: EVTCLR1_EVTCLR0_MDMRFEDAT
#define RFE32_EVTCLR1_EVTCLR0_MDMRFEDAT                8UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_S   8UL
#define RFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_BM             0x00000100UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_M   0x00000100UL
// enums for bitfield EVTCLR1_EVTCLR0_MDMRFEDAT (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_ZERO           0x0UL
#define RFE32_EVTCLR1_EVTCLR0_MDMRFEDAT_ONE            0x1UL
// bitfield: EVTCLR1_EVTCLR0_DLO
#define RFE32_EVTCLR1_EVTCLR0_DLO                      7UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_DLO_S         7UL
#define RFE32_EVTCLR1_EVTCLR0_DLO_BM                   0x00000080UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_DLO_M         0x00000080UL
// enums for bitfield EVTCLR1_EVTCLR0_DLO (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_DLO_ZERO                 0x0UL
#define RFE32_EVTCLR1_EVTCLR0_DLO_ONE                  0x1UL
// bitfield: EVTCLR1_EVTCLR0_PBECMD
#define RFE32_EVTCLR1_EVTCLR0_PBECMD                   6UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_PBECMD_S      6UL
#define RFE32_EVTCLR1_EVTCLR0_PBECMD_BM                0x00000040UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_PBECMD_M      0x00000040UL
// enums for bitfield EVTCLR1_EVTCLR0_PBECMD (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_PBECMD_ZERO              0x0UL
#define RFE32_EVTCLR1_EVTCLR0_PBECMD_ONE               0x1UL
// bitfield: EVTCLR1_EVTCLR0_COUNTER
#define RFE32_EVTCLR1_EVTCLR0_COUNTER                  5UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_COUNTER_S     5UL
#define RFE32_EVTCLR1_EVTCLR0_COUNTER_BM               0x00000020UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_COUNTER_M     0x00000020UL
// enums for bitfield EVTCLR1_EVTCLR0_COUNTER (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_COUNTER_ZERO             0x0UL
#define RFE32_EVTCLR1_EVTCLR0_COUNTER_ONE              0x1UL
// bitfield: EVTCLR1_EVTCLR0_MDMCMD
#define RFE32_EVTCLR1_EVTCLR0_MDMCMD                   4UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_MDMCMD_S      4UL
#define RFE32_EVTCLR1_EVTCLR0_MDMCMD_BM                0x00000010UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_MDMCMD_M      0x00000010UL
// enums for bitfield EVTCLR1_EVTCLR0_MDMCMD (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_MDMCMD_ZERO              0x0UL
#define RFE32_EVTCLR1_EVTCLR0_MDMCMD_ONE               0x1UL
// bitfield: EVTCLR1_EVTCLR0_ACC1
#define RFE32_EVTCLR1_EVTCLR0_ACC1                     3UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_ACC1_S        3UL
#define RFE32_EVTCLR1_EVTCLR0_ACC1_BM                  0x00000008UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_ACC1_M        0x00000008UL
// enums for bitfield EVTCLR1_EVTCLR0_ACC1 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_ACC1_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_ACC1_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_ACC0
#define RFE32_EVTCLR1_EVTCLR0_ACC0                     2UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_ACC0_S        2UL
#define RFE32_EVTCLR1_EVTCLR0_ACC0_BM                  0x00000004UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_ACC0_M        0x00000004UL
// enums for bitfield EVTCLR1_EVTCLR0_ACC0 (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_ACC0_ZERO                0x0UL
#define RFE32_EVTCLR1_EVTCLR0_ACC0_ONE                 0x1UL
// bitfield: EVTCLR1_EVTCLR0_TIMER
#define RFE32_EVTCLR1_EVTCLR0_TIMER                    1UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_TIMER_S       1UL
#define RFE32_EVTCLR1_EVTCLR0_TIMER_BM                 0x00000002UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_TIMER_M       0x00000002UL
// enums for bitfield EVTCLR1_EVTCLR0_TIMER (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_TIMER_ZERO               0x0UL
#define RFE32_EVTCLR1_EVTCLR0_TIMER_ONE                0x1UL
// bitfield: EVTCLR1_EVTCLR0_RFEAPI
#define RFE32_EVTCLR1_EVTCLR0_RFEAPI                   0UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_RFEAPI_S      0UL
#define RFE32_EVTCLR1_EVTCLR0_RFEAPI_BM                0x00000001UL
#define RF24_RFE32_EVTCLR1_EVTCLR0_RFEAPI_M      0x00000001UL
// enums for bitfield EVTCLR1_EVTCLR0_RFEAPI (width: 1)UL
#define RFE32_EVTCLR1_EVTCLR0_RFEAPI_ZERO              0x0UL
#define RFE32_EVTCLR1_EVTCLR0_RFEAPI_ONE               0x1UL
// --------------------------------------------------------------
// HFXTSTAT
// 
#define RFE32_HFXTSTAT_ADR (RFE32_BASE + 0x0014UL)
static volatile unsigned long* const SP_RFE32_HFXTSTAT = (unsigned long*) RFE32_HFXTSTAT_ADR;
#define S_RFE32_HFXTSTAT (*SP_RFE32_HFXTSTAT)
#define RF24_RFE32_O_HFXTSTAT                      20
// bitfield: HFXTSTAT_STAT
#define RFE32_HFXTSTAT_STAT                            0UL
#define RF24_RFE32_HFXTSTAT_STAT_S               0UL
#define RFE32_HFXTSTAT_STAT_BM                         0x00000001UL
#define RF24_RFE32_HFXTSTAT_STAT_M               0x00000001UL
// enums for bitfield HFXTSTAT_STAT (width: 1)UL
#define RFE32_HFXTSTAT_STAT_NONQUAL                    0x0UL
#define RFE32_HFXTSTAT_STAT_QUAL                       0x1UL
// --------------------------------------------------------------
// RFSTATE
// 
#define RFE32_RFSTATE_ADR (RFE32_BASE + 0x0018UL)
static volatile unsigned long* const SP_RFE32_RFSTATE = (unsigned long*) RFE32_RFSTATE_ADR;
#define S_RFE32_RFSTATE (*SP_RFE32_RFSTATE)
#define RF24_RFE32_O_RFSTATE                       24
// bitfield: RFSTATE_VAL
#define RFE32_RFSTATE_VAL                              0UL
#define RF24_RFE32_RFSTATE_VAL_S                 0UL
#define RFE32_RFSTATE_VAL_BM                           0x0000000FUL
#define RF24_RFE32_RFSTATE_VAL_M                 0x0000000FUL
// enums for bitfield RFSTATE_VAL (width: 4)UL
#define RFE32_RFSTATE_VAL_IDLE                         0x0UL
#define RFE32_RFSTATE_VAL_SYNTH                        0x1UL
#define RFE32_RFSTATE_VAL_TX                           0x2UL
#define RFE32_RFSTATE_VAL_RX                           0x3UL
// --------------------------------------------------------------
// CMDPAR0_API
// 
#define RFE32_CMDPAR0_API_ADR (RFE32_BASE + 0x0024UL)
static volatile unsigned long* const SP_RFE32_CMDPAR0_API = (unsigned long*) RFE32_CMDPAR0_API_ADR;
#define S_RFE32_CMDPAR0_API (*SP_RFE32_CMDPAR0_API)
#define RF24_RFE32_O_CMDPAR0_API                   36
// bitfield: CMDPAR0_API_VAL
#define RFE32_CMDPAR0_API_VAL                          16UL
#define RF24_RFE32_CMDPAR0_API_VAL_S             16UL
#define RFE32_CMDPAR0_API_VAL_BM                       0xFFFF0000UL
#define RF24_RFE32_CMDPAR0_API_VAL_M             0xFFFF0000UL
// enums for bitfield CMDPAR0_API_VAL (width: 16)UL
#define RFE32_CMDPAR0_API_VAL_ALLZEROS                 0x0000UL
#define RFE32_CMDPAR0_API_VAL_ALLONES                  0xFFFFUL
// bitfield: CMDPAR0_API_PROTOCOLID
#define RFE32_CMDPAR0_API_PROTOCOLID                   4UL
#define RF24_RFE32_CMDPAR0_API_PROTOCOLID_S      4UL
#define RFE32_CMDPAR0_API_PROTOCOLID_BM                0x000000F0UL
#define RF24_RFE32_CMDPAR0_API_PROTOCOLID_M      0x000000F0UL
// enums for bitfield CMDPAR0_API_PROTOCOLID (width: 4)UL
#define RFE32_CMDPAR0_API_PROTOCOLID_ALLZEROS          0x0UL
#define RFE32_CMDPAR0_API_PROTOCOLID_ALLONES           0xFUL
// bitfield: CMDPAR0_API_RFECMD
#define RFE32_CMDPAR0_API_RFECMD                       0UL
#define RF24_RFE32_CMDPAR0_API_RFECMD_S          0UL
#define RFE32_CMDPAR0_API_RFECMD_BM                    0x0000000FUL
#define RF24_RFE32_CMDPAR0_API_RFECMD_M          0x0000000FUL
// enums for bitfield CMDPAR0_API_RFECMD (width: 4)UL
#define RFE32_CMDPAR0_API_RFECMD_ALLZEROS              0x0UL
#define RFE32_CMDPAR0_API_RFECMD_ALLONES               0xFUL
// --------------------------------------------------------------
// MSGBOX_CMDPAR1
// 
#define RFE32_MSGBOX_CMDPAR1_ADR (RFE32_BASE + 0x0028UL)
static volatile unsigned long* const SP_RFE32_MSGBOX_CMDPAR1 = (unsigned long*) RFE32_MSGBOX_CMDPAR1_ADR;
#define S_RFE32_MSGBOX_CMDPAR1 (*SP_RFE32_MSGBOX_CMDPAR1)
#define RF24_RFE32_O_MSGBOX_CMDPAR1                40
// bitfield: MSGBOX_CMDPAR1_MSGBOX_VAL
#define RFE32_MSGBOX_CMDPAR1_MSGBOX_VAL                16UL
#define RF24_RFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_S   16UL
#define RFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_BM             0x00FF0000UL
#define RF24_RFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_M   0x00FF0000UL
// enums for bitfield MSGBOX_CMDPAR1_MSGBOX_VAL (width: 8)UL
#define RFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_ALLZEROS       0x00UL
#define RFE32_MSGBOX_CMDPAR1_MSGBOX_VAL_ALLONES        0xFFUL
// bitfield: MSGBOX_CMDPAR1_CMDPAR1_VAL
#define RFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL               0UL
#define RF24_RFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_S  0UL
#define RFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_BM            0x0000FFFFUL
#define RF24_RFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_M  0x0000FFFFUL
// enums for bitfield MSGBOX_CMDPAR1_CMDPAR1_VAL (width: 16)UL
#define RFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_ALLZEROS      0x0000UL
#define RFE32_MSGBOX_CMDPAR1_CMDPAR1_VAL_ALLONES       0xFFFFUL
// --------------------------------------------------------------
// MCEDATIN0_MCEDATOUT0
// 
#define RFE32_MCEDATIN0_MCEDATOUT0_ADR (RFE32_BASE + 0x002CUL)
static volatile unsigned long* const SP_RFE32_MCEDATIN0_MCEDATOUT0 = (unsigned long*) RFE32_MCEDATIN0_MCEDATOUT0_ADR;
#define S_RFE32_MCEDATIN0_MCEDATOUT0 (*SP_RFE32_MCEDATIN0_MCEDATOUT0)
#define RF24_RFE32_O_MCEDATIN0_MCEDATOUT0          44
// bitfield: MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL       16UL
#define RF24_RFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_S 16UL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_BM    0xFFFF0000UL
#define RF24_RFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_M 0xFFFF0000UL
// enums for bitfield MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL (width: 16)UL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_ALLZEROS 0x0000UL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATIN0_VAL_ALLONES 0xFFFFUL
// bitfield: MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL      0UL
#define RF24_RFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_S 0UL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_BM   0x0000FFFFUL
#define RF24_RFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_M 0x0000FFFFUL
// enums for bitfield MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL (width: 16)UL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_ALLZEROS 0x0000UL
#define RFE32_MCEDATIN0_MCEDATOUT0_MCEDATOUT0_VAL_ALLONES 0xFFFFUL
// --------------------------------------------------------------
// MCECMDIN_MCECMDOUT
// 
#define RFE32_MCECMDIN_MCECMDOUT_ADR (RFE32_BASE + 0x0030UL)
static volatile unsigned long* const SP_RFE32_MCECMDIN_MCECMDOUT = (unsigned long*) RFE32_MCECMDIN_MCECMDOUT_ADR;
#define S_RFE32_MCECMDIN_MCECMDOUT (*SP_RFE32_MCECMDIN_MCECMDOUT)
#define RF24_RFE32_O_MCECMDIN_MCECMDOUT            48
// bitfield: MCECMDIN_MCECMDOUT_MCECMDIN_VAL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL          16UL
#define RF24_RFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_S 16UL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_BM       0x000F0000UL
#define RF24_RFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_M 0x000F0000UL
// enums for bitfield MCECMDIN_MCECMDOUT_MCECMDIN_VAL (width: 4)UL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_ALLZEROS 0x0UL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDIN_VAL_ALLONES  0xFUL
// bitfield: MCECMDIN_MCECMDOUT_MCECMDOUT_VAL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL         0UL
#define RF24_RFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_S 0UL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_BM      0x0000000FUL
#define RF24_RFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_M 0x0000000FUL
// enums for bitfield MCECMDIN_MCECMDOUT_MCECMDOUT_VAL (width: 4)UL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_ALLZEROS 0x0UL
#define RFE32_MCECMDIN_MCECMDOUT_MCECMDOUT_VAL_ALLONES 0xFUL
// --------------------------------------------------------------
// PBEDATIN0_PBEDATOUT0
// 
#define RFE32_PBEDATIN0_PBEDATOUT0_ADR (RFE32_BASE + 0x0034UL)
static volatile unsigned long* const SP_RFE32_PBEDATIN0_PBEDATOUT0 = (unsigned long*) RFE32_PBEDATIN0_PBEDATOUT0_ADR;
#define S_RFE32_PBEDATIN0_PBEDATOUT0 (*SP_RFE32_PBEDATIN0_PBEDATOUT0)
#define RF24_RFE32_O_PBEDATIN0_PBEDATOUT0          52
// bitfield: PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL       16UL
#define RF24_RFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_S 16UL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_BM    0xFFFF0000UL
#define RF24_RFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_M 0xFFFF0000UL
// enums for bitfield PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL (width: 16)UL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_ALLZEROS 0x0000UL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATIN0_VAL_ALLONES 0xFFFFUL
// bitfield: PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL      0UL
#define RF24_RFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_S 0UL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_BM   0x0000FFFFUL
#define RF24_RFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_M 0x0000FFFFUL
// enums for bitfield PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL (width: 16)UL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_ALLZEROS 0x0000UL
#define RFE32_PBEDATIN0_PBEDATOUT0_PBEDATOUT0_VAL_ALLONES 0xFFFFUL
// --------------------------------------------------------------
// PBECMDIN_PBECMDOUT
// 
#define RFE32_PBECMDIN_PBECMDOUT_ADR (RFE32_BASE + 0x0038UL)
static volatile unsigned long* const SP_RFE32_PBECMDIN_PBECMDOUT = (unsigned long*) RFE32_PBECMDIN_PBECMDOUT_ADR;
#define S_RFE32_PBECMDIN_PBECMDOUT (*SP_RFE32_PBECMDIN_PBECMDOUT)
#define RF24_RFE32_O_PBECMDIN_PBECMDOUT            56
// bitfield: PBECMDIN_PBECMDOUT_PBECMDIN_VAL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL          16UL
#define RF24_RFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_S 16UL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_BM       0x000F0000UL
#define RF24_RFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_M 0x000F0000UL
// enums for bitfield PBECMDIN_PBECMDOUT_PBECMDIN_VAL (width: 4)UL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_ALLZEROS 0x0UL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDIN_VAL_ALLONES  0xFUL
// bitfield: PBECMDIN_PBECMDOUT_PBECMDOUT_VAL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL         0UL
#define RF24_RFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_S 0UL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_BM      0x0000000FUL
#define RF24_RFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_M 0x0000000FUL
// enums for bitfield PBECMDIN_PBECMDOUT_PBECMDOUT_VAL (width: 4)UL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_ALLZEROS 0x0UL
#define RFE32_PBECMDIN_PBECMDOUT_PBECMDOUT_VAL_ALLONES 0xFUL
// --------------------------------------------------------------
// STRB
// 
#define RFE32_STRB_ADR (RFE32_BASE + 0x003CUL)
static volatile unsigned long* const SP_RFE32_STRB = (unsigned long*) RFE32_STRB_ADR;
#define S_RFE32_STRB (*SP_RFE32_STRB)
#define RF24_RFE32_O_STRB                          60
// bitfield: STRB_S2RTRG
#define RFE32_STRB_S2RTRG                              7UL
#define RF24_RFE32_STRB_S2RTRG_S                 7UL
#define RFE32_STRB_S2RTRG_BM                           0x00000080UL
#define RF24_RFE32_STRB_S2RTRG_M                 0x00000080UL
// enums for bitfield STRB_S2RTRG (width: 1)UL
#define RFE32_STRB_S2RTRG_ZERO                         0x0UL
#define RFE32_STRB_S2RTRG_ONE                          0x1UL
// bitfield: STRB_DMATRG
#define RFE32_STRB_DMATRG                              6UL
#define RF24_RFE32_STRB_DMATRG_S                 6UL
#define RFE32_STRB_DMATRG_BM                           0x00000040UL
#define RF24_RFE32_STRB_DMATRG_M                 0x00000040UL
// enums for bitfield STRB_DMATRG (width: 1)UL
#define RFE32_STRB_DMATRG_ZERO                         0x0UL
#define RFE32_STRB_DMATRG_ONE                          0x1UL
// bitfield: STRB_SYSTCPT2
#define RFE32_STRB_SYSTCPT2                            5UL
#define RF24_RFE32_STRB_SYSTCPT2_S               5UL
#define RFE32_STRB_SYSTCPT2_BM                         0x00000020UL
#define RF24_RFE32_STRB_SYSTCPT2_M               0x00000020UL
// enums for bitfield STRB_SYSTCPT2 (width: 1)UL
#define RFE32_STRB_SYSTCPT2_ZERO                       0x0UL
#define RFE32_STRB_SYSTCPT2_ONE                        0x1UL
// bitfield: STRB_SYSTCPT1
#define RFE32_STRB_SYSTCPT1                            4UL
#define RF24_RFE32_STRB_SYSTCPT1_S               4UL
#define RFE32_STRB_SYSTCPT1_BM                         0x00000010UL
#define RF24_RFE32_STRB_SYSTCPT1_M               0x00000010UL
// enums for bitfield STRB_SYSTCPT1 (width: 1)UL
#define RFE32_STRB_SYSTCPT1_ZERO                       0x0UL
#define RFE32_STRB_SYSTCPT1_ONE                        0x1UL
// bitfield: STRB_SYSTCPT0
#define RFE32_STRB_SYSTCPT0                            3UL
#define RF24_RFE32_STRB_SYSTCPT0_S               3UL
#define RFE32_STRB_SYSTCPT0_BM                         0x00000008UL
#define RF24_RFE32_STRB_SYSTCPT0_M               0x00000008UL
// enums for bitfield STRB_SYSTCPT0 (width: 1)UL
#define RFE32_STRB_SYSTCPT0_ZERO                       0x0UL
#define RFE32_STRB_SYSTCPT0_ONE                        0x1UL
// bitfield: STRB_EVT1
#define RFE32_STRB_EVT1                                2UL
#define RF24_RFE32_STRB_EVT1_S                   2UL
#define RFE32_STRB_EVT1_BM                             0x00000004UL
#define RF24_RFE32_STRB_EVT1_M                   0x00000004UL
// enums for bitfield STRB_EVT1 (width: 1)UL
#define RFE32_STRB_EVT1_ZERO                           0x0UL
#define RFE32_STRB_EVT1_ONE                            0x1UL
// bitfield: STRB_EVT0
#define RFE32_STRB_EVT0                                1UL
#define RF24_RFE32_STRB_EVT0_S                   1UL
#define RFE32_STRB_EVT0_BM                             0x00000002UL
#define RF24_RFE32_STRB_EVT0_M                   0x00000002UL
// enums for bitfield STRB_EVT0 (width: 1)UL
#define RFE32_STRB_EVT0_ZERO                           0x0UL
#define RFE32_STRB_EVT0_ONE                            0x1UL
// bitfield: STRB_CMDDONE
#define RFE32_STRB_CMDDONE                             0UL
#define RF24_RFE32_STRB_CMDDONE_S                0UL
#define RFE32_STRB_CMDDONE_BM                          0x00000001UL
#define RF24_RFE32_STRB_CMDDONE_M                0x00000001UL
// enums for bitfield STRB_CMDDONE (width: 1)UL
#define RFE32_STRB_CMDDONE_NO                          0x0UL
#define RFE32_STRB_CMDDONE_YES                         0x1UL
// --------------------------------------------------------------
// MAGNTHR_MAGNTHRCFG
// 
#define RFE32_MAGNTHR_MAGNTHRCFG_ADR (RFE32_BASE + 0x0040UL)
static volatile unsigned long* const SP_RFE32_MAGNTHR_MAGNTHRCFG = (unsigned long*) RFE32_MAGNTHR_MAGNTHRCFG_ADR;
#define S_RFE32_MAGNTHR_MAGNTHRCFG (*SP_RFE32_MAGNTHR_MAGNTHRCFG)
#define RF24_RFE32_O_MAGNTHR_MAGNTHRCFG            64
// bitfield: MAGNTHR_MAGNTHRCFG_VAL
#define RFE32_MAGNTHR_MAGNTHRCFG_VAL                   16UL
#define RF24_RFE32_MAGNTHR_MAGNTHRCFG_VAL_S      16UL
#define RFE32_MAGNTHR_MAGNTHRCFG_VAL_BM                0x00FF0000UL
#define RF24_RFE32_MAGNTHR_MAGNTHRCFG_VAL_M      0x00FF0000UL
// enums for bitfield MAGNTHR_MAGNTHRCFG_VAL (width: 8)UL
#define RFE32_MAGNTHR_MAGNTHRCFG_VAL_ALLZEROS          0x00UL
#define RFE32_MAGNTHR_MAGNTHRCFG_VAL_ALLONES           0xFFUL
// bitfield: MAGNTHR_MAGNTHRCFG_SEL
#define RFE32_MAGNTHR_MAGNTHRCFG_SEL                   1UL
#define RF24_RFE32_MAGNTHR_MAGNTHRCFG_SEL_S      1UL
#define RFE32_MAGNTHR_MAGNTHRCFG_SEL_BM                0x00000002UL
#define RF24_RFE32_MAGNTHR_MAGNTHRCFG_SEL_M      0x00000002UL
// enums for bitfield MAGNTHR_MAGNTHRCFG_SEL (width: 1)UL
#define RFE32_MAGNTHR_MAGNTHRCFG_SEL_MAGNACC0          0x0UL
#define RFE32_MAGNTHR_MAGNTHRCFG_SEL_MAGNACC1          0x1UL
// bitfield: MAGNTHR_MAGNTHRCFG_CTL
#define RFE32_MAGNTHR_MAGNTHRCFG_CTL                   0UL
#define RF24_RFE32_MAGNTHR_MAGNTHRCFG_CTL_S      0UL
#define RFE32_MAGNTHR_MAGNTHRCFG_CTL_BM                0x00000001UL
#define RF24_RFE32_MAGNTHR_MAGNTHRCFG_CTL_M      0x00000001UL
// enums for bitfield MAGNTHR_MAGNTHRCFG_CTL (width: 1)UL
#define RFE32_MAGNTHR_MAGNTHRCFG_CTL_DIS               0x0UL
#define RFE32_MAGNTHR_MAGNTHRCFG_CTL_EN                0x1UL
// --------------------------------------------------------------
// GAINCTL_RSSIOFFSET
// 
#define RFE32_GAINCTL_RSSIOFFSET_ADR (RFE32_BASE + 0x0044UL)
static volatile unsigned long* const SP_RFE32_GAINCTL_RSSIOFFSET = (unsigned long*) RFE32_GAINCTL_RSSIOFFSET_ADR;
#define S_RFE32_GAINCTL_RSSIOFFSET (*SP_RFE32_GAINCTL_RSSIOFFSET)
#define RF24_RFE32_O_GAINCTL_RSSIOFFSET            68
// bitfield: GAINCTL_RSSIOFFSET_BDE2DVGA
#define RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA              18UL
#define RF24_RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_S 18UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_BM           0x000C0000UL
#define RF24_RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_M 0x000C0000UL
// enums for bitfield GAINCTL_RSSIOFFSET_BDE2DVGA (width: 2)UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN1        0x0UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN2        0x1UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN4        0x2UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE2DVGA_GAIN8        0x3UL
// bitfield: GAINCTL_RSSIOFFSET_BDE1DVGA
#define RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA              16UL
#define RF24_RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_S 16UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_BM           0x00030000UL
#define RF24_RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_M 0x00030000UL
// enums for bitfield GAINCTL_RSSIOFFSET_BDE1DVGA (width: 2)UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN1        0x0UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN2        0x1UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN4        0x2UL
#define RFE32_GAINCTL_RSSIOFFSET_BDE1DVGA_GAIN8        0x3UL
// bitfield: GAINCTL_RSSIOFFSET_VAL
#define RFE32_GAINCTL_RSSIOFFSET_VAL                   0UL
#define RF24_RFE32_GAINCTL_RSSIOFFSET_VAL_S      0UL
#define RFE32_GAINCTL_RSSIOFFSET_VAL_BM                0x000000FFUL
#define RF24_RFE32_GAINCTL_RSSIOFFSET_VAL_M      0x000000FFUL
// enums for bitfield GAINCTL_RSSIOFFSET_VAL (width: 8)UL
#define RFE32_GAINCTL_RSSIOFFSET_VAL_ALLZEROS          0x00UL
#define RFE32_GAINCTL_RSSIOFFSET_VAL_ALLONES           0xFFUL
// --------------------------------------------------------------
// MAGNCTL1_MAGNCTL0
// 
#define RFE32_MAGNCTL1_MAGNCTL0_ADR (RFE32_BASE + 0x0048UL)
static volatile unsigned long* const SP_RFE32_MAGNCTL1_MAGNCTL0 = (unsigned long*) RFE32_MAGNCTL1_MAGNCTL0_ADR;
#define S_RFE32_MAGNCTL1_MAGNCTL0 (*SP_RFE32_MAGNCTL1_MAGNCTL0)
#define RF24_RFE32_O_MAGNCTL1_MAGNCTL0             72
// bitfield: MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE       28UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_S 28UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_BM    0x10000000UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_M 0x10000000UL
// enums for bitfield MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE (width: 1)UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_ONESHOT 0x0UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PERMODE_PERIODIC 0x1UL
// bitfield: MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL           24UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_S 24UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_BM        0x0F000000UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_M 0x0F000000UL
// enums for bitfield MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL (width: 4)UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV1      0x0UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV2      0x1UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV4      0x2UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV8      0x3UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV16     0x4UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV32     0x5UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV64     0x6UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV128    0x7UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_SCL_DIV256    0x8UL
// bitfield: MAGNCTL1_MAGNCTL0_MAGNCTL1_PER
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER           16UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_S 16UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_BM        0x00FF0000UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_M 0x00FF0000UL
// enums for bitfield MAGNCTL1_MAGNCTL0_MAGNCTL1_PER (width: 8)UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_ALLZEROS  0x00UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL1_PER_ALLONES   0xFFUL
// bitfield: MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE       12UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_S 12UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_BM    0x00001000UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_M 0x00001000UL
// enums for bitfield MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE (width: 1)UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_ONESHOT 0x0UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PERMODE_PERIODIC 0x1UL
// bitfield: MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL           8UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_S 8UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_BM        0x00000F00UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_M 0x00000F00UL
// enums for bitfield MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL (width: 4)UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV1      0x0UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV2      0x1UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV4      0x2UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV8      0x3UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV16     0x4UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV32     0x5UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV64     0x6UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV128    0x7UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_SCL_DIV256    0x8UL
// bitfield: MAGNCTL1_MAGNCTL0_MAGNCTL0_PER
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER           0UL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_S 0UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_BM        0x000000FFUL
#define RF24_RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_M 0x000000FFUL
// enums for bitfield MAGNCTL1_MAGNCTL0_MAGNCTL0_PER (width: 8)UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_ALLZEROS  0x00UL
#define RFE32_MAGNCTL1_MAGNCTL0_MAGNCTL0_PER_ALLONES   0xFFUL
// --------------------------------------------------------------
// SPARE1_SPARE0
// 
#define RFE32_SPARE1_SPARE0_ADR (RFE32_BASE + 0x004CUL)
static volatile unsigned long* const SP_RFE32_SPARE1_SPARE0 = (unsigned long*) RFE32_SPARE1_SPARE0_ADR;
#define S_RFE32_SPARE1_SPARE0 (*SP_RFE32_SPARE1_SPARE0)
#define RF24_RFE32_O_SPARE1_SPARE0                 76
// bitfield: SPARE1_SPARE0_SPARE1_VAL
#define RFE32_SPARE1_SPARE0_SPARE1_VAL                 16UL
#define RF24_RFE32_SPARE1_SPARE0_SPARE1_VAL_S    16UL
#define RFE32_SPARE1_SPARE0_SPARE1_VAL_BM              0xFFFF0000UL
#define RF24_RFE32_SPARE1_SPARE0_SPARE1_VAL_M    0xFFFF0000UL
// enums for bitfield SPARE1_SPARE0_SPARE1_VAL (width: 16)UL
#define RFE32_SPARE1_SPARE0_SPARE1_VAL_ALLZEROS        0x0000UL
#define RFE32_SPARE1_SPARE0_SPARE1_VAL_ALLONES         0xFFFFUL
// bitfield: SPARE1_SPARE0_SPARE0_VAL
#define RFE32_SPARE1_SPARE0_SPARE0_VAL                 0UL
#define RF24_RFE32_SPARE1_SPARE0_SPARE0_VAL_S    0UL
#define RFE32_SPARE1_SPARE0_SPARE0_VAL_BM              0x0000FFFFUL
#define RF24_RFE32_SPARE1_SPARE0_SPARE0_VAL_M    0x0000FFFFUL
// enums for bitfield SPARE1_SPARE0_SPARE0_VAL (width: 16)UL
#define RFE32_SPARE1_SPARE0_SPARE0_VAL_ALLZEROS        0x0000UL
#define RFE32_SPARE1_SPARE0_SPARE0_VAL_ALLONES         0xFFFFUL
// --------------------------------------------------------------
// SPARE3_SPARE2
// 
#define RFE32_SPARE3_SPARE2_ADR (RFE32_BASE + 0x0050UL)
static volatile unsigned long* const SP_RFE32_SPARE3_SPARE2 = (unsigned long*) RFE32_SPARE3_SPARE2_ADR;
#define S_RFE32_SPARE3_SPARE2 (*SP_RFE32_SPARE3_SPARE2)
#define RF24_RFE32_O_SPARE3_SPARE2                 80
// bitfield: SPARE3_SPARE2_SPARE3_VAL
#define RFE32_SPARE3_SPARE2_SPARE3_VAL                 16UL
#define RF24_RFE32_SPARE3_SPARE2_SPARE3_VAL_S    16UL
#define RFE32_SPARE3_SPARE2_SPARE3_VAL_BM              0xFFFF0000UL
#define RF24_RFE32_SPARE3_SPARE2_SPARE3_VAL_M    0xFFFF0000UL
// enums for bitfield SPARE3_SPARE2_SPARE3_VAL (width: 16)UL
#define RFE32_SPARE3_SPARE2_SPARE3_VAL_ALLZEROS        0x0000UL
#define RFE32_SPARE3_SPARE2_SPARE3_VAL_ALLONES         0xFFFFUL
// bitfield: SPARE3_SPARE2_SPARE2_VAL
#define RFE32_SPARE3_SPARE2_SPARE2_VAL                 0UL
#define RF24_RFE32_SPARE3_SPARE2_SPARE2_VAL_S    0UL
#define RFE32_SPARE3_SPARE2_SPARE2_VAL_BM              0x0000FFFFUL
#define RF24_RFE32_SPARE3_SPARE2_SPARE2_VAL_M    0x0000FFFFUL
// enums for bitfield SPARE3_SPARE2_SPARE2_VAL (width: 16)UL
#define RFE32_SPARE3_SPARE2_SPARE2_VAL_ALLZEROS        0x0000UL
#define RFE32_SPARE3_SPARE2_SPARE2_VAL_ALLONES         0xFFFFUL
// --------------------------------------------------------------
// SPARE5_SPARE4
// 
#define RFE32_SPARE5_SPARE4_ADR (RFE32_BASE + 0x0054UL)
static volatile unsigned long* const SP_RFE32_SPARE5_SPARE4 = (unsigned long*) RFE32_SPARE5_SPARE4_ADR;
#define S_RFE32_SPARE5_SPARE4 (*SP_RFE32_SPARE5_SPARE4)
#define RF24_RFE32_O_SPARE5_SPARE4                 84
// bitfield: SPARE5_SPARE4_SPARE5_VAL
#define RFE32_SPARE5_SPARE4_SPARE5_VAL                 16UL
#define RF24_RFE32_SPARE5_SPARE4_SPARE5_VAL_S    16UL
#define RFE32_SPARE5_SPARE4_SPARE5_VAL_BM              0xFFFF0000UL
#define RF24_RFE32_SPARE5_SPARE4_SPARE5_VAL_M    0xFFFF0000UL
// enums for bitfield SPARE5_SPARE4_SPARE5_VAL (width: 16)UL
#define RFE32_SPARE5_SPARE4_SPARE5_VAL_ALLZEROS        0x0000UL
#define RFE32_SPARE5_SPARE4_SPARE5_VAL_ALLONES         0xFFFFUL
// bitfield: SPARE5_SPARE4_SPARE4_VAL
#define RFE32_SPARE5_SPARE4_SPARE4_VAL                 0UL
#define RF24_RFE32_SPARE5_SPARE4_SPARE4_VAL_S    0UL
#define RFE32_SPARE5_SPARE4_SPARE4_VAL_BM              0x0000FFFFUL
#define RF24_RFE32_SPARE5_SPARE4_SPARE4_VAL_M    0x0000FFFFUL
// enums for bitfield SPARE5_SPARE4_SPARE4_VAL (width: 16)UL
#define RFE32_SPARE5_SPARE4_SPARE4_VAL_ALLZEROS        0x0000UL
#define RFE32_SPARE5_SPARE4_SPARE4_VAL_ALLONES         0xFFFFUL
// --------------------------------------------------------------
// IFAMPRFLDO_LNA
// 
#define RFE32_IFAMPRFLDO_LNA_ADR (RFE32_BASE + 0x0058UL)
static volatile unsigned long* const SP_RFE32_IFAMPRFLDO_LNA = (unsigned long*) RFE32_IFAMPRFLDO_LNA_ADR;
#define S_RFE32_IFAMPRFLDO_LNA (*SP_RFE32_IFAMPRFLDO_LNA)
#define RF24_RFE32_O_IFAMPRFLDO_LNA                88
// bitfield: IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM           25UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_S 25UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_BM        0xFE000000UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_M 0xFE000000UL
// enums for bitfield IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM (width: 7)UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_MIN       0x00UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_MAX       0x7EUL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_TRIM_BYPASS    0x7FUL
// bitfield: IFAMPRFLDO_LNA_IFAMPRFLDO_EN
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN             24UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_S 24UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_BM          0x01000000UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_M 0x01000000UL
// enums for bitfield IFAMPRFLDO_LNA_IFAMPRFLDO_EN (width: 1)UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_DIS         0x0UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_EN_EN          0x1UL
// bitfield: IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP         20UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_S 20UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_BM      0x00F00000UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_M 0x00F00000UL
// enums for bitfield IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP (width: 4)UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_MIN     0x0UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_AAFCAP_MAX     0xFUL
// bitfield: IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB        17UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_S 17UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_BM     0x000E0000UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_M 0x000E0000UL
// enums for bitfield IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB (width: 3)UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_MIN    0x0UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMPIB_MAX    0x7UL
// bitfield: IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP          16UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_S 16UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_BM       0x00010000UL
#define RF24_RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_M 0x00010000UL
// enums for bitfield IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP (width: 1)UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_DIS      0x0UL
#define RFE32_IFAMPRFLDO_LNA_IFAMPRFLDO_IFAMP_EN       0x1UL
// bitfield: IFAMPRFLDO_LNA_LNA_SPARE
#define RFE32_IFAMPRFLDO_LNA_LNA_SPARE                 8UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_SPARE_S    8UL
#define RFE32_IFAMPRFLDO_LNA_LNA_SPARE_BM              0x0000FF00UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_SPARE_M    0x0000FF00UL
// enums for bitfield IFAMPRFLDO_LNA_LNA_SPARE (width: 8)UL
#define RFE32_IFAMPRFLDO_LNA_LNA_SPARE_DIS             0x00UL
#define RFE32_IFAMPRFLDO_LNA_LNA_SPARE_EN              0x01UL
// bitfield: IFAMPRFLDO_LNA_LNA_TRIM
#define RFE32_IFAMPRFLDO_LNA_LNA_TRIM                  4UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_TRIM_S     4UL
#define RFE32_IFAMPRFLDO_LNA_LNA_TRIM_BM               0x000000F0UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_TRIM_M     0x000000F0UL
// enums for bitfield IFAMPRFLDO_LNA_LNA_TRIM (width: 4)UL
#define RFE32_IFAMPRFLDO_LNA_LNA_TRIM_ZEROS            0x0UL
#define RFE32_IFAMPRFLDO_LNA_LNA_TRIM_ONES             0xFUL
// bitfield: IFAMPRFLDO_LNA_LNA_BIAS
#define RFE32_IFAMPRFLDO_LNA_LNA_BIAS                  3UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_BIAS_S     3UL
#define RFE32_IFAMPRFLDO_LNA_LNA_BIAS_BM               0x00000008UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_BIAS_M     0x00000008UL
// enums for bitfield IFAMPRFLDO_LNA_LNA_BIAS (width: 1)UL
#define RFE32_IFAMPRFLDO_LNA_LNA_BIAS_BGAP             0x0UL
#define RFE32_IFAMPRFLDO_LNA_LNA_BIAS_INT              0x1UL
// bitfield: IFAMPRFLDO_LNA_LNA_IB
#define RFE32_IFAMPRFLDO_LNA_LNA_IB                    1UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_IB_S       1UL
#define RFE32_IFAMPRFLDO_LNA_LNA_IB_BM                 0x00000006UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_IB_M       0x00000006UL
// enums for bitfield IFAMPRFLDO_LNA_LNA_IB (width: 2)UL
#define RFE32_IFAMPRFLDO_LNA_LNA_IB_MIN                0x0UL
#define RFE32_IFAMPRFLDO_LNA_LNA_IB_MAX                0x3UL
// bitfield: IFAMPRFLDO_LNA_LNA_EN
#define RFE32_IFAMPRFLDO_LNA_LNA_EN                    0UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_EN_S       0UL
#define RFE32_IFAMPRFLDO_LNA_LNA_EN_BM                 0x00000001UL
#define RF24_RFE32_IFAMPRFLDO_LNA_LNA_EN_M       0x00000001UL
// enums for bitfield IFAMPRFLDO_LNA_LNA_EN (width: 1)UL
#define RFE32_IFAMPRFLDO_LNA_LNA_EN_OFF                0x0UL
#define RFE32_IFAMPRFLDO_LNA_LNA_EN_ON                 0x1UL
// --------------------------------------------------------------
// PA1_PA0
// 
#define RFE32_PA1_PA0_ADR (RFE32_BASE + 0x005CUL)
static volatile unsigned long* const SP_RFE32_PA1_PA0 = (unsigned long*) RFE32_PA1_PA0_ADR;
#define S_RFE32_PA1_PA0 (*SP_RFE32_PA1_PA0)
#define RF24_RFE32_O_PA1_PA0                       92
// bitfield: PA1_PA0_SPARE
#define RFE32_PA1_PA0_SPARE                            23UL
#define RF24_RFE32_PA1_PA0_SPARE_S               23UL
#define RFE32_PA1_PA0_SPARE_BM                         0xFF800000UL
#define RF24_RFE32_PA1_PA0_SPARE_M               0xFF800000UL
// enums for bitfield PA1_PA0_SPARE (width: 9)UL
#define RFE32_PA1_PA0_SPARE_MIN                        0x000UL
#define RFE32_PA1_PA0_SPARE_MAX                        0x003UL
// bitfield: PA1_PA0_MIXATST
#define RFE32_PA1_PA0_MIXATST                          22UL
#define RF24_RFE32_PA1_PA0_MIXATST_S             22UL
#define RFE32_PA1_PA0_MIXATST_BM                       0x00400000UL
#define RF24_RFE32_PA1_PA0_MIXATST_M             0x00400000UL
// enums for bitfield PA1_PA0_MIXATST (width: 1)UL
#define RFE32_PA1_PA0_MIXATST_DIS                      0x0UL
#define RFE32_PA1_PA0_MIXATST_EN                       0x1UL
// bitfield: PA1_PA0_LDOITST
#define RFE32_PA1_PA0_LDOITST                          21UL
#define RF24_RFE32_PA1_PA0_LDOITST_S             21UL
#define RFE32_PA1_PA0_LDOITST_BM                       0x00200000UL
#define RF24_RFE32_PA1_PA0_LDOITST_M             0x00200000UL
// enums for bitfield PA1_PA0_LDOITST (width: 1)UL
#define RFE32_PA1_PA0_LDOITST_DIS                      0x0UL
#define RFE32_PA1_PA0_LDOITST_EN                       0x1UL
// bitfield: PA1_PA0_LDOATST
#define RFE32_PA1_PA0_LDOATST                          20UL
#define RF24_RFE32_PA1_PA0_LDOATST_S             20UL
#define RFE32_PA1_PA0_LDOATST_BM                       0x00100000UL
#define RF24_RFE32_PA1_PA0_LDOATST_M             0x00100000UL
// enums for bitfield PA1_PA0_LDOATST (width: 1)UL
#define RFE32_PA1_PA0_LDOATST_DIS                      0x0UL
#define RFE32_PA1_PA0_LDOATST_EN                       0x1UL
// bitfield: PA1_PA0_RC
#define RFE32_PA1_PA0_RC                               18UL
#define RF24_RFE32_PA1_PA0_RC_S                  18UL
#define RFE32_PA1_PA0_RC_BM                            0x000C0000UL
#define RF24_RFE32_PA1_PA0_RC_M                  0x000C0000UL
// enums for bitfield PA1_PA0_RC (width: 2)UL
#define RFE32_PA1_PA0_RC_MIN                           0x0UL
#define RFE32_PA1_PA0_RC_MAX                           0x3UL
// bitfield: PA1_PA0_RAMP
#define RFE32_PA1_PA0_RAMP                             17UL
#define RF24_RFE32_PA1_PA0_RAMP_S                17UL
#define RFE32_PA1_PA0_RAMP_BM                          0x00020000UL
#define RF24_RFE32_PA1_PA0_RAMP_M                0x00020000UL
// enums for bitfield PA1_PA0_RAMP (width: 1)UL
#define RFE32_PA1_PA0_RAMP_DOWN                        0x0UL
#define RFE32_PA1_PA0_RAMP_UP                          0x1UL
// bitfield: PA1_PA0_EN
#define RFE32_PA1_PA0_EN                               16UL
#define RF24_RFE32_PA1_PA0_EN_S                  16UL
#define RFE32_PA1_PA0_EN_BM                            0x00010000UL
#define RF24_RFE32_PA1_PA0_EN_M                  0x00010000UL
// enums for bitfield PA1_PA0_EN (width: 1)UL
#define RFE32_PA1_PA0_EN_DIS                           0x0UL
#define RFE32_PA1_PA0_EN_EN                            0x1UL
// bitfield: PA1_PA0_SPARE15
#define RFE32_PA1_PA0_SPARE15                          15UL
#define RF24_RFE32_PA1_PA0_SPARE15_S             15UL
#define RFE32_PA1_PA0_SPARE15_BM                       0x00008000UL
#define RF24_RFE32_PA1_PA0_SPARE15_M             0x00008000UL
// enums for bitfield PA1_PA0_SPARE15 (width: 1)UL
#define RFE32_PA1_PA0_SPARE15_ZERO                     0x0UL
#define RFE32_PA1_PA0_SPARE15_ONE                      0x1UL
// bitfield: PA1_PA0_MODE
#define RFE32_PA1_PA0_MODE                             14UL
#define RF24_RFE32_PA1_PA0_MODE_S                14UL
#define RFE32_PA1_PA0_MODE_BM                          0x00004000UL
#define RF24_RFE32_PA1_PA0_MODE_M                0x00004000UL
// enums for bitfield PA1_PA0_MODE (width: 1)UL
#define RFE32_PA1_PA0_MODE_LOW                         0x0UL
#define RFE32_PA1_PA0_MODE_HIGH                        0x1UL
// bitfield: PA1_PA0_GAIN
#define RFE32_PA1_PA0_GAIN                             11UL
#define RF24_RFE32_PA1_PA0_GAIN_S                11UL
#define RFE32_PA1_PA0_GAIN_BM                          0x00003800UL
#define RF24_RFE32_PA1_PA0_GAIN_M                0x00003800UL
// enums for bitfield PA1_PA0_GAIN (width: 3)UL
#define RFE32_PA1_PA0_GAIN_MIN                         0x0UL
#define RFE32_PA1_PA0_GAIN_MAX                         0x7UL
// bitfield: PA1_PA0_IB
#define RFE32_PA1_PA0_IB                               5UL
#define RF24_RFE32_PA1_PA0_IB_S                  5UL
#define RFE32_PA1_PA0_IB_BM                            0x000007E0UL
#define RF24_RFE32_PA1_PA0_IB_M                  0x000007E0UL
// enums for bitfield PA1_PA0_IB (width: 6)UL
#define RFE32_PA1_PA0_IB_MIN                           0x00UL
#define RFE32_PA1_PA0_IB_MAX                           0x3FUL
// bitfield: PA1_PA0_TRIM
#define RFE32_PA1_PA0_TRIM                             0UL
#define RF24_RFE32_PA1_PA0_TRIM_S                0UL
#define RFE32_PA1_PA0_TRIM_BM                          0x0000001FUL
#define RF24_RFE32_PA1_PA0_TRIM_M                0x0000001FUL
// enums for bitfield PA1_PA0_TRIM (width: 5)UL
#define RFE32_PA1_PA0_TRIM_MIN                         0x00UL
#define RFE32_PA1_PA0_TRIM_MAX                         0x1FUL
// --------------------------------------------------------------
// IFADC0_ULNA
// 
#define RFE32_IFADC0_ULNA_ADR (RFE32_BASE + 0x0060UL)
static volatile unsigned long* const SP_RFE32_IFADC0_ULNA = (unsigned long*) RFE32_IFADC0_ULNA_ADR;
#define S_RFE32_IFADC0_ULNA (*SP_RFE32_IFADC0_ULNA)
#define RF24_RFE32_O_IFADC0_ULNA                   96
// bitfield: IFADC0_ULNA_EXTCLK
#define RFE32_IFADC0_ULNA_EXTCLK                       31UL
#define RF24_RFE32_IFADC0_ULNA_EXTCLK_S          31UL
#define RFE32_IFADC0_ULNA_EXTCLK_BM                    0x80000000UL
#define RF24_RFE32_IFADC0_ULNA_EXTCLK_M          0x80000000UL
// enums for bitfield IFADC0_ULNA_EXTCLK (width: 1)UL
#define RFE32_IFADC0_ULNA_EXTCLK_DIS                   0x0UL
#define RFE32_IFADC0_ULNA_EXTCLK_EN                    0x1UL
// bitfield: IFADC0_ULNA_DITHERTRIM
#define RFE32_IFADC0_ULNA_DITHERTRIM                   28UL
#define RF24_RFE32_IFADC0_ULNA_DITHERTRIM_S      28UL
#define RFE32_IFADC0_ULNA_DITHERTRIM_BM                0x70000000UL
#define RF24_RFE32_IFADC0_ULNA_DITHERTRIM_M      0x70000000UL
// enums for bitfield IFADC0_ULNA_DITHERTRIM (width: 3)UL
#define RFE32_IFADC0_ULNA_DITHERTRIM_ZEROS             0x0UL
#define RFE32_IFADC0_ULNA_DITHERTRIM_ONES              0x7UL
// bitfield: IFADC0_ULNA_DITHEREN
#define RFE32_IFADC0_ULNA_DITHEREN                     26UL
#define RF24_RFE32_IFADC0_ULNA_DITHEREN_S        26UL
#define RFE32_IFADC0_ULNA_DITHEREN_BM                  0x0C000000UL
#define RF24_RFE32_IFADC0_ULNA_DITHEREN_M        0x0C000000UL
// enums for bitfield IFADC0_ULNA_DITHEREN (width: 2)UL
#define RFE32_IFADC0_ULNA_DITHEREN_DIS                 0x0UL
#define RFE32_IFADC0_ULNA_DITHEREN_ENS                 0x1UL
#define RFE32_IFADC0_ULNA_DITHEREN_ENSD                0x2UL
#define RFE32_IFADC0_ULNA_DITHEREN_ENG                 0x3UL
// bitfield: IFADC0_ULNA_ADCIEN
#define RFE32_IFADC0_ULNA_ADCIEN                       25UL
#define RF24_RFE32_IFADC0_ULNA_ADCIEN_S          25UL
#define RFE32_IFADC0_ULNA_ADCIEN_BM                    0x02000000UL
#define RF24_RFE32_IFADC0_ULNA_ADCIEN_M          0x02000000UL
// enums for bitfield IFADC0_ULNA_ADCIEN (width: 1)UL
#define RFE32_IFADC0_ULNA_ADCIEN_DIS                   0x0UL
#define RFE32_IFADC0_ULNA_ADCIEN_EN                    0x1UL
// bitfield: IFADC0_ULNA_ADCQEN
#define RFE32_IFADC0_ULNA_ADCQEN                       24UL
#define RF24_RFE32_IFADC0_ULNA_ADCQEN_S          24UL
#define RFE32_IFADC0_ULNA_ADCQEN_BM                    0x01000000UL
#define RF24_RFE32_IFADC0_ULNA_ADCQEN_M          0x01000000UL
// enums for bitfield IFADC0_ULNA_ADCQEN (width: 1)UL
#define RFE32_IFADC0_ULNA_ADCQEN_DIS                   0x0UL
#define RFE32_IFADC0_ULNA_ADCQEN_EN                    0x1UL
// bitfield: IFADC0_ULNA_INT2ADJ
#define RFE32_IFADC0_ULNA_INT2ADJ                      20UL
#define RF24_RFE32_IFADC0_ULNA_INT2ADJ_S         20UL
#define RFE32_IFADC0_ULNA_INT2ADJ_BM                   0x00F00000UL
#define RF24_RFE32_IFADC0_ULNA_INT2ADJ_M         0x00F00000UL
// enums for bitfield IFADC0_ULNA_INT2ADJ (width: 4)UL
#define RFE32_IFADC0_ULNA_INT2ADJ_ZEROS                0x0UL
#define RFE32_IFADC0_ULNA_INT2ADJ_ONES                 0xFUL
// bitfield: IFADC0_ULNA_AAFCAP
#define RFE32_IFADC0_ULNA_AAFCAP                       18UL
#define RF24_RFE32_IFADC0_ULNA_AAFCAP_S          18UL
#define RFE32_IFADC0_ULNA_AAFCAP_BM                    0x000C0000UL
#define RF24_RFE32_IFADC0_ULNA_AAFCAP_M          0x000C0000UL
// enums for bitfield IFADC0_ULNA_AAFCAP (width: 2)UL
#define RFE32_IFADC0_ULNA_AAFCAP_DIS                   0x0UL
#define RFE32_IFADC0_ULNA_AAFCAP_ENS                   0x1UL
#define RFE32_IFADC0_ULNA_AAFCAP_ENSD                  0x2UL
#define RFE32_IFADC0_ULNA_AAFCAP_ENG                   0x3UL
// bitfield: IFADC0_ULNA_RESERVED
#define RFE32_IFADC0_ULNA_RESERVED                     16UL
#define RF24_RFE32_IFADC0_ULNA_RESERVED_S        16UL
#define RFE32_IFADC0_ULNA_RESERVED_BM                  0x00030000UL
#define RF24_RFE32_IFADC0_ULNA_RESERVED_M        0x00030000UL
// enums for bitfield IFADC0_ULNA_RESERVED (width: 2)UL
#define RFE32_IFADC0_ULNA_RESERVED_ZEROS               0x0UL
#define RFE32_IFADC0_ULNA_RESERVED_ONES                0x3UL
// bitfield: IFADC0_ULNA_SPARE
#define RFE32_IFADC0_ULNA_SPARE                        0UL
#define RF24_RFE32_IFADC0_ULNA_SPARE_S           0UL
#define RFE32_IFADC0_ULNA_SPARE_BM                     0x0000FFFFUL
#define RF24_RFE32_IFADC0_ULNA_SPARE_M           0x0000FFFFUL
// enums for bitfield IFADC0_ULNA_SPARE (width: 16)UL
#define RFE32_IFADC0_ULNA_SPARE_ALLZEROS               0x0000UL
#define RFE32_IFADC0_ULNA_SPARE_ALLONES                0xFFFFUL
// --------------------------------------------------------------
// IFADCLF_IFADC1
// 
#define RFE32_IFADCLF_IFADC1_ADR (RFE32_BASE + 0x0064UL)
static volatile unsigned long* const SP_RFE32_IFADCLF_IFADC1 = (unsigned long*) RFE32_IFADCLF_IFADC1_ADR;
#define S_RFE32_IFADCLF_IFADC1 (*SP_RFE32_IFADCLF_IFADC1)
#define RF24_RFE32_O_IFADCLF_IFADC1                100
// bitfield: IFADCLF_IFADC1_FF3
#define RFE32_IFADCLF_IFADC1_FF3                       28UL
#define RF24_RFE32_IFADCLF_IFADC1_FF3_S          28UL
#define RFE32_IFADCLF_IFADC1_FF3_BM                    0xF0000000UL
#define RF24_RFE32_IFADCLF_IFADC1_FF3_M          0xF0000000UL
// enums for bitfield IFADCLF_IFADC1_FF3 (width: 4)UL
#define RFE32_IFADCLF_IFADC1_FF3_ZEROS                 0x0UL
#define RFE32_IFADCLF_IFADC1_FF3_ONES                  0xFUL
// bitfield: IFADCLF_IFADC1_FF2
#define RFE32_IFADCLF_IFADC1_FF2                       24UL
#define RF24_RFE32_IFADCLF_IFADC1_FF2_S          24UL
#define RFE32_IFADCLF_IFADC1_FF2_BM                    0x0F000000UL
#define RF24_RFE32_IFADCLF_IFADC1_FF2_M          0x0F000000UL
// enums for bitfield IFADCLF_IFADC1_FF2 (width: 4)UL
#define RFE32_IFADCLF_IFADC1_FF2_ZEROS                 0x0UL
#define RFE32_IFADCLF_IFADC1_FF2_ONES                  0xFUL
// bitfield: IFADCLF_IFADC1_FF1
#define RFE32_IFADCLF_IFADC1_FF1                       20UL
#define RF24_RFE32_IFADCLF_IFADC1_FF1_S          20UL
#define RFE32_IFADCLF_IFADC1_FF1_BM                    0x00F00000UL
#define RF24_RFE32_IFADCLF_IFADC1_FF1_M          0x00F00000UL
// enums for bitfield IFADCLF_IFADC1_FF1 (width: 4)UL
#define RFE32_IFADCLF_IFADC1_FF1_ZEROS                 0x0UL
#define RFE32_IFADCLF_IFADC1_FF1_ONES                  0xFUL
// bitfield: IFADCLF_IFADC1_INT3
#define RFE32_IFADCLF_IFADC1_INT3                      16UL
#define RF24_RFE32_IFADCLF_IFADC1_INT3_S         16UL
#define RFE32_IFADCLF_IFADC1_INT3_BM                   0x000F0000UL
#define RF24_RFE32_IFADCLF_IFADC1_INT3_M         0x000F0000UL
// enums for bitfield IFADCLF_IFADC1_INT3 (width: 4)UL
#define RFE32_IFADCLF_IFADC1_INT3_ZEROS                0x0UL
#define RFE32_IFADCLF_IFADC1_INT3_ONES                 0xFUL
// bitfield: IFADCLF_IFADC1_NRZ
#define RFE32_IFADCLF_IFADC1_NRZ                       15UL
#define RF24_RFE32_IFADCLF_IFADC1_NRZ_S          15UL
#define RFE32_IFADCLF_IFADC1_NRZ_BM                    0x00008000UL
#define RF24_RFE32_IFADCLF_IFADC1_NRZ_M          0x00008000UL
// enums for bitfield IFADCLF_IFADC1_NRZ (width: 1)UL
#define RFE32_IFADCLF_IFADC1_NRZ_DIS                   0x0UL
#define RFE32_IFADCLF_IFADC1_NRZ_EN                    0x1UL
// bitfield: IFADCLF_IFADC1_TRIM
#define RFE32_IFADCLF_IFADC1_TRIM                      9UL
#define RF24_RFE32_IFADCLF_IFADC1_TRIM_S         9UL
#define RFE32_IFADCLF_IFADC1_TRIM_BM                   0x00007E00UL
#define RF24_RFE32_IFADCLF_IFADC1_TRIM_M         0x00007E00UL
// enums for bitfield IFADCLF_IFADC1_TRIM (width: 6)UL
#define RFE32_IFADCLF_IFADC1_TRIM_ZEROS                0x00UL
#define RFE32_IFADCLF_IFADC1_TRIM_ONES                 0x3FUL
// bitfield: IFADCLF_IFADC1_RESERVED8
#define RFE32_IFADCLF_IFADC1_RESERVED8                 8UL
#define RF24_RFE32_IFADCLF_IFADC1_RESERVED8_S    8UL
#define RFE32_IFADCLF_IFADC1_RESERVED8_BM              0x00000100UL
#define RF24_RFE32_IFADCLF_IFADC1_RESERVED8_M    0x00000100UL
// enums for bitfield IFADCLF_IFADC1_RESERVED8 (width: 1)UL
#define RFE32_IFADCLF_IFADC1_RESERVED8_DIS             0x0UL
#define RFE32_IFADCLF_IFADC1_RESERVED8_EN              0x1UL
// bitfield: IFADCLF_IFADC1_RSTN
#define RFE32_IFADCLF_IFADC1_RSTN                      7UL
#define RF24_RFE32_IFADCLF_IFADC1_RSTN_S         7UL
#define RFE32_IFADCLF_IFADC1_RSTN_BM                   0x00000080UL
#define RF24_RFE32_IFADCLF_IFADC1_RSTN_M         0x00000080UL
// enums for bitfield IFADCLF_IFADC1_RSTN (width: 1)UL
#define RFE32_IFADCLF_IFADC1_RSTN_EN                   0x0UL
#define RFE32_IFADCLF_IFADC1_RSTN_DIS                  0x1UL
// bitfield: IFADCLF_IFADC1_CLKGEN
#define RFE32_IFADCLF_IFADC1_CLKGEN                    6UL
#define RF24_RFE32_IFADCLF_IFADC1_CLKGEN_S       6UL
#define RFE32_IFADCLF_IFADC1_CLKGEN_BM                 0x00000040UL
#define RF24_RFE32_IFADCLF_IFADC1_CLKGEN_M       0x00000040UL
// enums for bitfield IFADCLF_IFADC1_CLKGEN (width: 1)UL
#define RFE32_IFADCLF_IFADC1_CLKGEN_DIS                0x0UL
#define RFE32_IFADCLF_IFADC1_CLKGEN_EN                 0x1UL
// bitfield: IFADCLF_IFADC1_ADCDIGCLK
#define RFE32_IFADCLF_IFADC1_ADCDIGCLK                 5UL
#define RF24_RFE32_IFADCLF_IFADC1_ADCDIGCLK_S    5UL
#define RFE32_IFADCLF_IFADC1_ADCDIGCLK_BM              0x00000020UL
#define RF24_RFE32_IFADCLF_IFADC1_ADCDIGCLK_M    0x00000020UL
// enums for bitfield IFADCLF_IFADC1_ADCDIGCLK (width: 1)UL
#define RFE32_IFADCLF_IFADC1_ADCDIGCLK_DIS             0x0UL
#define RFE32_IFADCLF_IFADC1_ADCDIGCLK_EN              0x1UL
// bitfield: IFADCLF_IFADC1_ADCLFSROUT
#define RFE32_IFADCLF_IFADC1_ADCLFSROUT                4UL
#define RF24_RFE32_IFADCLF_IFADC1_ADCLFSROUT_S   4UL
#define RFE32_IFADCLF_IFADC1_ADCLFSROUT_BM             0x00000010UL
#define RF24_RFE32_IFADCLF_IFADC1_ADCLFSROUT_M   0x00000010UL
// enums for bitfield IFADCLF_IFADC1_ADCLFSROUT (width: 1)UL
#define RFE32_IFADCLF_IFADC1_ADCLFSROUT_DIS            0x0UL
#define RFE32_IFADCLF_IFADC1_ADCLFSROUT_EN             0x1UL
// bitfield: IFADCLF_IFADC1_LPFTSTMODE
#define RFE32_IFADCLF_IFADC1_LPFTSTMODE                1UL
#define RF24_RFE32_IFADCLF_IFADC1_LPFTSTMODE_S   1UL
#define RFE32_IFADCLF_IFADC1_LPFTSTMODE_BM             0x0000000EUL
#define RF24_RFE32_IFADCLF_IFADC1_LPFTSTMODE_M   0x0000000EUL
// enums for bitfield IFADCLF_IFADC1_LPFTSTMODE (width: 3)UL
#define RFE32_IFADCLF_IFADC1_LPFTSTMODE_DIS            0x0UL
#define RFE32_IFADCLF_IFADC1_LPFTSTMODE_EN             0x1UL
// bitfield: IFADCLF_IFADC1_INVCLKOUT
#define RFE32_IFADCLF_IFADC1_INVCLKOUT                 0UL
#define RF24_RFE32_IFADCLF_IFADC1_INVCLKOUT_S    0UL
#define RFE32_IFADCLF_IFADC1_INVCLKOUT_BM              0x00000001UL
#define RF24_RFE32_IFADCLF_IFADC1_INVCLKOUT_M    0x00000001UL
// enums for bitfield IFADCLF_IFADC1_INVCLKOUT (width: 1)UL
#define RFE32_IFADCLF_IFADC1_INVCLKOUT_DIS             0x0UL
#define RFE32_IFADCLF_IFADC1_INVCLKOUT_EN              0x1UL
// --------------------------------------------------------------
// IFADCALDO_IFADCQUANT
// 
#define RFE32_IFADCALDO_IFADCQUANT_ADR (RFE32_BASE + 0x0068UL)
static volatile unsigned long* const SP_RFE32_IFADCALDO_IFADCQUANT = (unsigned long*) RFE32_IFADCALDO_IFADCQUANT_ADR;
#define S_RFE32_IFADCALDO_IFADCQUANT (*SP_RFE32_IFADCALDO_IFADCQUANT)
#define RF24_RFE32_O_IFADCALDO_IFADCQUANT          104
// bitfield: IFADCALDO_IFADCQUANT_ATESTVSSANA
#define RFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA         31UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_S 31UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_BM      0x80000000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_M 0x80000000UL
// enums for bitfield IFADCALDO_IFADCQUANT_ATESTVSSANA (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_DIS     0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTVSSANA_EN      0x1UL
// bitfield: IFADCALDO_IFADCQUANT_RESERVED
#define RFE32_IFADCALDO_IFADCQUANT_RESERVED            30UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_RESERVED_S 30UL
#define RFE32_IFADCALDO_IFADCQUANT_RESERVED_BM         0x40000000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_RESERVED_M 0x40000000UL
// enums for bitfield IFADCALDO_IFADCQUANT_RESERVED (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_RESERVED_ZEROS      0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_RESERVED_ONES       0x1UL
// bitfield: IFADCALDO_IFADCQUANT_TRIMOUT
#define RFE32_IFADCALDO_IFADCQUANT_TRIMOUT             24UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_TRIMOUT_S 24UL
#define RFE32_IFADCALDO_IFADCQUANT_TRIMOUT_BM          0x3F000000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_TRIMOUT_M 0x3F000000UL
// enums for bitfield IFADCALDO_IFADCQUANT_TRIMOUT (width: 6)UL
#define RFE32_IFADCALDO_IFADCQUANT_TRIMOUT_ZEROS       0x00UL
#define RFE32_IFADCALDO_IFADCQUANT_TRIMOUT_ONES        0x3FUL
// bitfield: IFADCALDO_IFADCQUANT_DUMMY
#define RFE32_IFADCALDO_IFADCQUANT_DUMMY               23UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DUMMY_S  23UL
#define RFE32_IFADCALDO_IFADCQUANT_DUMMY_BM            0x00800000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DUMMY_M  0x00800000UL
// enums for bitfield IFADCALDO_IFADCQUANT_DUMMY (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_DUMMY_DIS           0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_DUMMY_EN            0x1UL
// bitfield: IFADCALDO_IFADCQUANT_ATESTOUT
#define RFE32_IFADCALDO_IFADCQUANT_ATESTOUT            22UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATESTOUT_S 22UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTOUT_BM         0x00400000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATESTOUT_M 0x00400000UL
// enums for bitfield IFADCALDO_IFADCQUANT_ATESTOUT (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTOUT_DIS        0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTOUT_EN         0x1UL
// bitfield: IFADCALDO_IFADCQUANT_ATSTLDOFB
#define RFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB           21UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_S 21UL
#define RFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_BM        0x00200000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_M 0x00200000UL
// enums for bitfield IFADCALDO_IFADCQUANT_ATSTLDOFB (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_DIS       0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_ATSTLDOFB_EN        0x1UL
// bitfield: IFADCALDO_IFADCQUANT_ATESTERRAMP
#define RFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP         20UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_S 20UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_BM      0x00100000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_M 0x00100000UL
// enums for bitfield IFADCALDO_IFADCQUANT_ATESTERRAMP (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_DIS     0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_ATESTERRAMP_EN      0x1UL
// bitfield: IFADCALDO_IFADCQUANT_ITEST
#define RFE32_IFADCALDO_IFADCQUANT_ITEST               19UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ITEST_S  19UL
#define RFE32_IFADCALDO_IFADCQUANT_ITEST_BM            0x00080000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_ITEST_M  0x00080000UL
// enums for bitfield IFADCALDO_IFADCQUANT_ITEST (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_ITEST_DIS           0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_ITEST_EN            0x1UL
// bitfield: IFADCALDO_IFADCQUANT_BYPASS
#define RFE32_IFADCALDO_IFADCQUANT_BYPASS              18UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_BYPASS_S 18UL
#define RFE32_IFADCALDO_IFADCQUANT_BYPASS_BM           0x00040000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_BYPASS_M 0x00040000UL
// enums for bitfield IFADCALDO_IFADCQUANT_BYPASS (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_BYPASS_DIS          0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_BYPASS_EN           0x1UL
// bitfield: IFADCALDO_IFADCQUANT_CLAMP
#define RFE32_IFADCALDO_IFADCQUANT_CLAMP               17UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_CLAMP_S  17UL
#define RFE32_IFADCALDO_IFADCQUANT_CLAMP_BM            0x00020000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_CLAMP_M  0x00020000UL
// enums for bitfield IFADCALDO_IFADCQUANT_CLAMP (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_CLAMP_DIS           0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_CLAMP_EN            0x1UL
// bitfield: IFADCALDO_IFADCQUANT_CTL
#define RFE32_IFADCALDO_IFADCQUANT_CTL                 16UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_CTL_S    16UL
#define RFE32_IFADCALDO_IFADCQUANT_CTL_BM              0x00010000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_CTL_M    0x00010000UL
// enums for bitfield IFADCALDO_IFADCQUANT_CTL (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_CTL_DIS             0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_CTL_EN              0x1UL
// bitfield: IFADCALDO_IFADCQUANT_CLKDLYTRIM
#define RFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM          14UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_S 14UL
#define RFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_BM       0x0000C000UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_M 0x0000C000UL
// enums for bitfield IFADCALDO_IFADCQUANT_CLKDLYTRIM (width: 2)UL
#define RFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_ZEROS    0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_CLKDLYTRIM_ONES     0x3UL
// bitfield: IFADCALDO_IFADCQUANT_DBGCALVALIN
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN         9UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_S 9UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_BM      0x00003E00UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_M 0x00003E00UL
// enums for bitfield IFADCALDO_IFADCQUANT_DBGCALVALIN (width: 5)UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_ZEROS   0x00UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALVALIN_ONES    0x1FUL
// bitfield: IFADCALDO_IFADCQUANT_DBGCALLEG
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALLEG           8UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_S 8UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_BM        0x00000100UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_M 0x00000100UL
// enums for bitfield IFADCALDO_IFADCQUANT_DBGCALLEG (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_POS       0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALLEG_NEG       0x1UL
// bitfield: IFADCALDO_IFADCQUANT_DBGCALMQ
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ            6UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_S 6UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_BM         0x000000C0UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_M 0x000000C0UL
// enums for bitfield IFADCALDO_IFADCQUANT_DBGCALMQ (width: 2)UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODZ 0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODN 0x1UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODP 0x2UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMQ_DBGCAL_QMODB 0x3UL
// bitfield: IFADCALDO_IFADCQUANT_DBGCALMI
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMI            4UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_S 4UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_BM         0x00000030UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_M 0x00000030UL
// enums for bitfield IFADCALDO_IFADCQUANT_DBGCALMI (width: 2)UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODZ 0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODN 0x1UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODP 0x2UL
#define RFE32_IFADCALDO_IFADCQUANT_DBGCALMI_DBGCAL_IMODB 0x3UL
// bitfield: IFADCALDO_IFADCQUANT_AUTOCAL
#define RFE32_IFADCALDO_IFADCQUANT_AUTOCAL             3UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_AUTOCAL_S 3UL
#define RFE32_IFADCALDO_IFADCQUANT_AUTOCAL_BM          0x00000008UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_AUTOCAL_M 0x00000008UL
// enums for bitfield IFADCALDO_IFADCQUANT_AUTOCAL (width: 1)UL
#define RFE32_IFADCALDO_IFADCQUANT_AUTOCAL_DIS         0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_AUTOCAL_EN          0x1UL
// bitfield: IFADCALDO_IFADCQUANT_QUANTTHR
#define RFE32_IFADCALDO_IFADCQUANT_QUANTTHR            0UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_QUANTTHR_S 0UL
#define RFE32_IFADCALDO_IFADCQUANT_QUANTTHR_BM         0x00000007UL
#define RF24_RFE32_IFADCALDO_IFADCQUANT_QUANTTHR_M 0x00000007UL
// enums for bitfield IFADCALDO_IFADCQUANT_QUANTTHR (width: 3)UL
#define RFE32_IFADCALDO_IFADCQUANT_QUANTTHR_ZEROS      0x0UL
#define RFE32_IFADCALDO_IFADCQUANT_QUANTTHR_ONES       0x7UL
// --------------------------------------------------------------
// IFADCTST_IFADCDLDO
// 
#define RFE32_IFADCTST_IFADCDLDO_ADR (RFE32_BASE + 0x006CUL)
static volatile unsigned long* const SP_RFE32_IFADCTST_IFADCDLDO = (unsigned long*) RFE32_IFADCTST_IFADCDLDO_ADR;
#define S_RFE32_IFADCTST_IFADCDLDO (*SP_RFE32_IFADCTST_IFADCDLDO)
#define RF24_RFE32_O_IFADCTST_IFADCDLDO            108
// bitfield: IFADCTST_IFADCDLDO_EXTCURR
#define RFE32_IFADCTST_IFADCDLDO_EXTCURR               23UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_EXTCURR_S  23UL
#define RFE32_IFADCTST_IFADCDLDO_EXTCURR_BM            0x00800000UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_EXTCURR_M  0x00800000UL
// enums for bitfield IFADCTST_IFADCDLDO_EXTCURR (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_EXTCURR_DIS           0x0UL
#define RFE32_IFADCTST_IFADCDLDO_EXTCURR_EN            0x1UL
// bitfield: IFADCTST_IFADCDLDO_QCALDBIQ
#define RFE32_IFADCTST_IFADCDLDO_QCALDBIQ              22UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_QCALDBIQ_S 22UL
#define RFE32_IFADCTST_IFADCDLDO_QCALDBIQ_BM           0x00400000UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_QCALDBIQ_M 0x00400000UL
// enums for bitfield IFADCTST_IFADCDLDO_QCALDBIQ (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_QCALDBIQ_COMP0        0x0UL
#define RFE32_IFADCTST_IFADCDLDO_QCALDBIQ_COMP1        0x1UL
// bitfield: IFADCTST_IFADCDLDO_QCALDBC
#define RFE32_IFADCTST_IFADCDLDO_QCALDBC               21UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_QCALDBC_S  21UL
#define RFE32_IFADCTST_IFADCDLDO_QCALDBC_BM            0x00200000UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_QCALDBC_M  0x00200000UL
// enums for bitfield IFADCTST_IFADCDLDO_QCALDBC (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_QCALDBC_COMP0         0x0UL
#define RFE32_IFADCTST_IFADCDLDO_QCALDBC_COMP1         0x1UL
// bitfield: IFADCTST_IFADCDLDO_SEL
#define RFE32_IFADCTST_IFADCDLDO_SEL                   16UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_SEL_S      16UL
#define RFE32_IFADCTST_IFADCDLDO_SEL_BM                0x001F0000UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_SEL_M      0x001F0000UL
// enums for bitfield IFADCTST_IFADCDLDO_SEL (width: 5)UL
#define RFE32_IFADCTST_IFADCDLDO_SEL_NONE              0x00UL
#define RFE32_IFADCTST_IFADCDLDO_SEL_EXTCLKN1          0x1FUL
// bitfield: IFADCTST_IFADCDLDO_RESERVED
#define RFE32_IFADCTST_IFADCDLDO_RESERVED              14UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_RESERVED_S 14UL
#define RFE32_IFADCTST_IFADCDLDO_RESERVED_BM           0x0000C000UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_RESERVED_M 0x0000C000UL
// enums for bitfield IFADCTST_IFADCDLDO_RESERVED (width: 2)UL
#define RFE32_IFADCTST_IFADCDLDO_RESERVED_ZEROS        0x0UL
#define RFE32_IFADCTST_IFADCDLDO_RESERVED_ONES         0x3UL
// bitfield: IFADCTST_IFADCDLDO_TRIMOUT
#define RFE32_IFADCTST_IFADCDLDO_TRIMOUT               8UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_TRIMOUT_S  8UL
#define RFE32_IFADCTST_IFADCDLDO_TRIMOUT_BM            0x00003F00UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_TRIMOUT_M  0x00003F00UL
// enums for bitfield IFADCTST_IFADCDLDO_TRIMOUT (width: 6)UL
#define RFE32_IFADCTST_IFADCDLDO_TRIMOUT_ZEROS         0x00UL
#define RFE32_IFADCTST_IFADCDLDO_TRIMOUT_ONES          0x3FUL
// bitfield: IFADCTST_IFADCDLDO_DUMMY
#define RFE32_IFADCTST_IFADCDLDO_DUMMY                 7UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_DUMMY_S    7UL
#define RFE32_IFADCTST_IFADCDLDO_DUMMY_BM              0x00000080UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_DUMMY_M    0x00000080UL
// enums for bitfield IFADCTST_IFADCDLDO_DUMMY (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_DUMMY_DIS             0x0UL
#define RFE32_IFADCTST_IFADCDLDO_DUMMY_EN              0x1UL
// bitfield: IFADCTST_IFADCDLDO_ATESTOUT
#define RFE32_IFADCTST_IFADCDLDO_ATESTOUT              6UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ATESTOUT_S 6UL
#define RFE32_IFADCTST_IFADCDLDO_ATESTOUT_BM           0x00000040UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ATESTOUT_M 0x00000040UL
// enums for bitfield IFADCTST_IFADCDLDO_ATESTOUT (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_ATESTOUT_DIS          0x0UL
#define RFE32_IFADCTST_IFADCDLDO_ATESTOUT_EN           0x1UL
// bitfield: IFADCTST_IFADCDLDO_ATSTBGP
#define RFE32_IFADCTST_IFADCDLDO_ATSTBGP               5UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ATSTBGP_S  5UL
#define RFE32_IFADCTST_IFADCDLDO_ATSTBGP_BM            0x00000020UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ATSTBGP_M  0x00000020UL
// enums for bitfield IFADCTST_IFADCDLDO_ATSTBGP (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_ATSTBGP_DIS           0x0UL
#define RFE32_IFADCTST_IFADCDLDO_ATSTBGP_EN            0x1UL
// bitfield: IFADCTST_IFADCDLDO_ATESTERRAMP
#define RFE32_IFADCTST_IFADCDLDO_ATESTERRAMP           4UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_S 4UL
#define RFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_BM        0x00000010UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_M 0x00000010UL
// enums for bitfield IFADCTST_IFADCDLDO_ATESTERRAMP (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_DIS       0x0UL
#define RFE32_IFADCTST_IFADCDLDO_ATESTERRAMP_EN        0x1UL
// bitfield: IFADCTST_IFADCDLDO_ITEST
#define RFE32_IFADCTST_IFADCDLDO_ITEST                 3UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ITEST_S    3UL
#define RFE32_IFADCTST_IFADCDLDO_ITEST_BM              0x00000008UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_ITEST_M    0x00000008UL
// enums for bitfield IFADCTST_IFADCDLDO_ITEST (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_ITEST_DIS             0x0UL
#define RFE32_IFADCTST_IFADCDLDO_ITEST_EN              0x1UL
// bitfield: IFADCTST_IFADCDLDO_BYPASS
#define RFE32_IFADCTST_IFADCDLDO_BYPASS                2UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_BYPASS_S   2UL
#define RFE32_IFADCTST_IFADCDLDO_BYPASS_BM             0x00000004UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_BYPASS_M   0x00000004UL
// enums for bitfield IFADCTST_IFADCDLDO_BYPASS (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_BYPASS_DIS            0x0UL
#define RFE32_IFADCTST_IFADCDLDO_BYPASS_EN             0x1UL
// bitfield: IFADCTST_IFADCDLDO_CLAMP
#define RFE32_IFADCTST_IFADCDLDO_CLAMP                 1UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_CLAMP_S    1UL
#define RFE32_IFADCTST_IFADCDLDO_CLAMP_BM              0x00000002UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_CLAMP_M    0x00000002UL
// enums for bitfield IFADCTST_IFADCDLDO_CLAMP (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_CLAMP_DIS             0x0UL
#define RFE32_IFADCTST_IFADCDLDO_CLAMP_EN              0x1UL
// bitfield: IFADCTST_IFADCDLDO_CTL
#define RFE32_IFADCTST_IFADCDLDO_CTL                   0UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_CTL_S      0UL
#define RFE32_IFADCTST_IFADCDLDO_CTL_BM                0x00000001UL
#define RF24_RFE32_IFADCTST_IFADCDLDO_CTL_M      0x00000001UL
// enums for bitfield IFADCTST_IFADCDLDO_CTL (width: 1)UL
#define RFE32_IFADCTST_IFADCDLDO_CTL_DIS               0x0UL
#define RFE32_IFADCTST_IFADCDLDO_CTL_EN                0x1UL
// --------------------------------------------------------------
// ATSTREF
// 
#define RFE32_ATSTREF_ADR (RFE32_BASE + 0x0070UL)
static volatile unsigned long* const SP_RFE32_ATSTREF = (unsigned long*) RFE32_ATSTREF_ADR;
#define S_RFE32_ATSTREF (*SP_RFE32_ATSTREF)
#define RF24_RFE32_O_ATSTREF                       112
// bitfield: ATSTREF_VREFBPDIS
#define RFE32_ATSTREF_VREFBPDIS                        31UL
#define RF24_RFE32_ATSTREF_VREFBPDIS_S           31UL
#define RFE32_ATSTREF_VREFBPDIS_BM                     0x80000000UL
#define RF24_RFE32_ATSTREF_VREFBPDIS_M           0x80000000UL
// enums for bitfield ATSTREF_VREFBPDIS (width: 1)UL
#define RFE32_ATSTREF_VREFBPDIS_BPEN                   0x0UL
#define RFE32_ATSTREF_VREFBPDIS_BPDIS                  0x1UL
// bitfield: ATSTREF_IREFTRIM
#define RFE32_ATSTREF_IREFTRIM                         26UL
#define RF24_RFE32_ATSTREF_IREFTRIM_S            26UL
#define RFE32_ATSTREF_IREFTRIM_BM                      0x7C000000UL
#define RF24_RFE32_ATSTREF_IREFTRIM_M            0x7C000000UL
// enums for bitfield ATSTREF_IREFTRIM (width: 5)UL
#define RFE32_ATSTREF_IREFTRIM_ZEROS                   0x00UL
#define RFE32_ATSTREF_IREFTRIM_ONES                    0x1FUL
// bitfield: ATSTREF_BIAS
#define RFE32_ATSTREF_BIAS                             25UL
#define RF24_RFE32_ATSTREF_BIAS_S                25UL
#define RFE32_ATSTREF_BIAS_BM                          0x02000000UL
#define RF24_RFE32_ATSTREF_BIAS_M                0x02000000UL
// enums for bitfield ATSTREF_BIAS (width: 1)UL
#define RFE32_ATSTREF_BIAS_DIS                         0x0UL
#define RFE32_ATSTREF_BIAS_EN                          0x1UL
// bitfield: ATSTREF_OUTPUT2
#define RFE32_ATSTREF_OUTPUT2                          24UL
#define RF24_RFE32_ATSTREF_OUTPUT2_S             24UL
#define RFE32_ATSTREF_OUTPUT2_BM                       0x01000000UL
#define RF24_RFE32_ATSTREF_OUTPUT2_M             0x01000000UL
// enums for bitfield ATSTREF_OUTPUT2 (width: 1)UL
#define RFE32_ATSTREF_OUTPUT2_DIS                      0x0UL
#define RFE32_ATSTREF_OUTPUT2_EN                       0x1UL
// bitfield: ATSTREF_OUTPUT1
#define RFE32_ATSTREF_OUTPUT1                          23UL
#define RF24_RFE32_ATSTREF_OUTPUT1_S             23UL
#define RFE32_ATSTREF_OUTPUT1_BM                       0x00800000UL
#define RF24_RFE32_ATSTREF_OUTPUT1_M             0x00800000UL
// enums for bitfield ATSTREF_OUTPUT1 (width: 1)UL
#define RFE32_ATSTREF_OUTPUT1_DIS                      0x0UL
#define RFE32_ATSTREF_OUTPUT1_EN                       0x1UL
// bitfield: ATSTREF_MUX
#define RFE32_ATSTREF_MUX                              0UL
#define RF24_RFE32_ATSTREF_MUX_S                 0UL
#define RFE32_ATSTREF_MUX_BM                           0x007FFFFFUL
#define RF24_RFE32_ATSTREF_MUX_M                 0x007FFFFFUL
// enums for bitfield ATSTREF_MUX (width: 23)UL
#define RFE32_ATSTREF_MUX_DIS                          0x000000UL
#define RFE32_ATSTREF_MUX_FE_OUTIP                     0x000001UL
#define RFE32_ATSTREF_MUX_FE_OUTIN                     0x000002UL
#define RFE32_ATSTREF_MUX_FE_OUTQP                     0x000004UL
#define RFE32_ATSTREF_MUX_FE_OUTQN                     0x000008UL
#define RFE32_ATSTREF_MUX_FE_OUTIN_2                   0x000020UL
#define RFE32_ATSTREF_MUX_FE_OUTIP_2                   0x000010UL
#define RFE32_ATSTREF_MUX_MIX_OUTIP                    0x000040UL
#define RFE32_ATSTREF_MUX_MIX_OUTIN                    0x000080UL
#define RFE32_ATSTREF_MUX_MIX_OUTQP                    0x000100UL
#define RFE32_ATSTREF_MUX_MIX_OUTQN                    0x000200UL
#define RFE32_ATSTREF_MUX_PA_PEAK_OUTP                 0x000400UL
#define RFE32_ATSTREF_MUX_PA_PEAK_OUTN                 0x000800UL
#define RFE32_ATSTREF_MUX_LDO_ITEST                    0x002000UL
#define RFE32_ATSTREF_MUX_LDO_VTEST                    0x004000UL
#define RFE32_ATSTREF_MUX_IFADC_ATB                    0x008000UL
// --------------------------------------------------------------
// DIV_DCO
// 
#define RFE32_DIV_DCO_ADR (RFE32_BASE + 0x0074UL)
static volatile unsigned long* const SP_RFE32_DIV_DCO = (unsigned long*) RFE32_DIV_DCO_ADR;
#define S_RFE32_DIV_DCO (*SP_RFE32_DIV_DCO)
#define RF24_RFE32_O_DIV_DCO                       116
// bitfield: DIV_DCO_PDET
#define RFE32_DIV_DCO_PDET                             31UL
#define RF24_RFE32_DIV_DCO_PDET_S                31UL
#define RFE32_DIV_DCO_PDET_BM                          0x80000000UL
#define RF24_RFE32_DIV_DCO_PDET_M                0x80000000UL
// enums for bitfield DIV_DCO_PDET (width: 1)UL
#define RFE32_DIV_DCO_PDET_DIS                         0x0UL
#define RFE32_DIV_DCO_PDET_EN                          0x1UL
// bitfield: DIV_DCO_NMIREFTRIM
#define RFE32_DIV_DCO_NMIREFTRIM                       28UL
#define RF24_RFE32_DIV_DCO_NMIREFTRIM_S          28UL
#define RFE32_DIV_DCO_NMIREFTRIM_BM                    0x70000000UL
#define RF24_RFE32_DIV_DCO_NMIREFTRIM_M          0x70000000UL
// enums for bitfield DIV_DCO_NMIREFTRIM (width: 3)UL
#define RFE32_DIV_DCO_NMIREFTRIM_ALLZEROS              0x0UL
#define RFE32_DIV_DCO_NMIREFTRIM_ALLONES               0x7UL
// bitfield: DIV_DCO_PMIREFTRIM
#define RFE32_DIV_DCO_PMIREFTRIM                       25UL
#define RF24_RFE32_DIV_DCO_PMIREFTRIM_S          25UL
#define RFE32_DIV_DCO_PMIREFTRIM_BM                    0x0E000000UL
#define RF24_RFE32_DIV_DCO_PMIREFTRIM_M          0x0E000000UL
// enums for bitfield DIV_DCO_PMIREFTRIM (width: 3)UL
#define RFE32_DIV_DCO_PMIREFTRIM_ALLZEROS              0x0UL
#define RFE32_DIV_DCO_PMIREFTRIM_ALLONES               0x7UL
// bitfield: DIV_DCO_TXBBOOST
#define RFE32_DIV_DCO_TXBBOOST                         24UL
#define RF24_RFE32_DIV_DCO_TXBBOOST_S            24UL
#define RFE32_DIV_DCO_TXBBOOST_BM                      0x01000000UL
#define RF24_RFE32_DIV_DCO_TXBBOOST_M            0x01000000UL
// enums for bitfield DIV_DCO_TXBBOOST (width: 1)UL
#define RFE32_DIV_DCO_TXBBOOST_DEFAULT                 0x0UL
#define RFE32_DIV_DCO_TXBBOOST_INCREASED               0x1UL
// bitfield: DIV_DCO_S1GFRC
#define RFE32_DIV_DCO_S1GFRC                           23UL
#define RF24_RFE32_DIV_DCO_S1GFRC_S              23UL
#define RFE32_DIV_DCO_S1GFRC_BM                        0x00800000UL
#define RF24_RFE32_DIV_DCO_S1GFRC_M              0x00800000UL
// enums for bitfield DIV_DCO_S1GFRC (width: 1)UL
#define RFE32_DIV_DCO_S1GFRC_DIS                       0x0UL
#define RFE32_DIV_DCO_S1GFRC_EN                        0x1UL
// bitfield: DIV_DCO_BUFGAIN
#define RFE32_DIV_DCO_BUFGAIN                          21UL
#define RF24_RFE32_DIV_DCO_BUFGAIN_S             21UL
#define RFE32_DIV_DCO_BUFGAIN_BM                       0x00600000UL
#define RF24_RFE32_DIV_DCO_BUFGAIN_M             0x00600000UL
// enums for bitfield DIV_DCO_BUFGAIN (width: 2)UL
#define RFE32_DIV_DCO_BUFGAIN_MAX                      0x0UL
#define RFE32_DIV_DCO_BUFGAIN__80_PST                  0x1UL
#define RFE32_DIV_DCO_BUFGAIN_DONT_USE                 0x2UL
#define RFE32_DIV_DCO_BUFGAIN__60_PST                  0x3UL
// bitfield: DIV_DCO_BIAS
#define RFE32_DIV_DCO_BIAS                             20UL
#define RF24_RFE32_DIV_DCO_BIAS_S                20UL
#define RFE32_DIV_DCO_BIAS_BM                          0x00100000UL
#define RF24_RFE32_DIV_DCO_BIAS_M                0x00100000UL
// enums for bitfield DIV_DCO_BIAS (width: 1)UL
#define RFE32_DIV_DCO_BIAS_ALTERNATIVE                 0x0UL
#define RFE32_DIV_DCO_BIAS_DEFAULT                     0x1UL
// bitfield: DIV_DCO_OUT
#define RFE32_DIV_DCO_OUT                              19UL
#define RF24_RFE32_DIV_DCO_OUT_S                 19UL
#define RFE32_DIV_DCO_OUT_BM                           0x00080000UL
#define RF24_RFE32_DIV_DCO_OUT_M                 0x00080000UL
// enums for bitfield DIV_DCO_OUT (width: 1)UL
#define RFE32_DIV_DCO_OUT_FE_S1G                       0x0UL
#define RFE32_DIV_DCO_OUT_FE_2G4                       0x1UL
// bitfield: DIV_DCO_RATIO
#define RFE32_DIV_DCO_RATIO                            16UL
#define RF24_RFE32_DIV_DCO_RATIO_S               16UL
#define RFE32_DIV_DCO_RATIO_BM                         0x00070000UL
#define RF24_RFE32_DIV_DCO_RATIO_M               0x00070000UL
// enums for bitfield DIV_DCO_RATIO (width: 3)UL
#define RFE32_DIV_DCO_RATIO_DIV2                       0x0UL
#define RFE32_DIV_DCO_RATIO_DIV4                       0x1UL
#define RFE32_DIV_DCO_RATIO_DIV5                       0x4UL
#define RFE32_DIV_DCO_RATIO_DIV6                       0x2UL
#define RFE32_DIV_DCO_RATIO_DIV10                      0x5UL
#define RFE32_DIV_DCO_RATIO_DIV12                      0x3UL
#define RFE32_DIV_DCO_RATIO_DIV15                      0x6UL
#define RFE32_DIV_DCO_RATIO_DIV30                      0x7UL
// bitfield: DIV_DCO_MTDCSPARE
#define RFE32_DIV_DCO_MTDCSPARE                        9UL
#define RF24_RFE32_DIV_DCO_MTDCSPARE_S           9UL
#define RFE32_DIV_DCO_MTDCSPARE_BM                     0x00000600UL
#define RF24_RFE32_DIV_DCO_MTDCSPARE_M           0x00000600UL
// enums for bitfield DIV_DCO_MTDCSPARE (width: 2)UL
#define RFE32_DIV_DCO_MTDCSPARE_EN                     0x0UL
#define RFE32_DIV_DCO_MTDCSPARE_DIS                    0x1UL
// bitfield: DIV_DCO_SPARE7
#define RFE32_DIV_DCO_SPARE7                           7UL
#define RF24_RFE32_DIV_DCO_SPARE7_S              7UL
#define RFE32_DIV_DCO_SPARE7_BM                        0x00000180UL
#define RF24_RFE32_DIV_DCO_SPARE7_M              0x00000180UL
// enums for bitfield DIV_DCO_SPARE7 (width: 2)UL
#define RFE32_DIV_DCO_SPARE7_ZERO                      0x0UL
#define RFE32_DIV_DCO_SPARE7_ONE                       0x1UL
// bitfield: DIV_DCO_TAILRESTRIM
#define RFE32_DIV_DCO_TAILRESTRIM                      3UL
#define RF24_RFE32_DIV_DCO_TAILRESTRIM_S         3UL
#define RFE32_DIV_DCO_TAILRESTRIM_BM                   0x00000078UL
#define RF24_RFE32_DIV_DCO_TAILRESTRIM_M         0x00000078UL
// enums for bitfield DIV_DCO_TAILRESTRIM (width: 4)UL
#define RFE32_DIV_DCO_TAILRESTRIM_ALLZEROS             0x0UL
#define RFE32_DIV_DCO_TAILRESTRIM_ALLONES              0xFUL
// bitfield: DIV_DCO_RTRIMCAP
#define RFE32_DIV_DCO_RTRIMCAP                         2UL
#define RF24_RFE32_DIV_DCO_RTRIMCAP_S            2UL
#define RFE32_DIV_DCO_RTRIMCAP_BM                      0x00000004UL
#define RF24_RFE32_DIV_DCO_RTRIMCAP_M            0x00000004UL
// enums for bitfield DIV_DCO_RTRIMCAP (width: 1)UL
#define RFE32_DIV_DCO_RTRIMCAP_DIS                     0x0UL
#define RFE32_DIV_DCO_RTRIMCAP_EN                      0x1UL
// bitfield: DIV_DCO_CNRCAP
#define RFE32_DIV_DCO_CNRCAP                           1UL
#define RF24_RFE32_DIV_DCO_CNRCAP_S              1UL
#define RFE32_DIV_DCO_CNRCAP_BM                        0x00000002UL
#define RF24_RFE32_DIV_DCO_CNRCAP_M              0x00000002UL
// enums for bitfield DIV_DCO_CNRCAP (width: 1)UL
#define RFE32_DIV_DCO_CNRCAP_DEFAULT                   0x0UL
#define RFE32_DIV_DCO_CNRCAP__50MHZ                    0x1UL
// bitfield: DIV_DCO_CRSCAPCM
#define RFE32_DIV_DCO_CRSCAPCM                         0UL
#define RF24_RFE32_DIV_DCO_CRSCAPCM_S            0UL
#define RFE32_DIV_DCO_CRSCAPCM_BM                      0x00000001UL
#define RF24_RFE32_DIV_DCO_CRSCAPCM_M            0x00000001UL
// enums for bitfield DIV_DCO_CRSCAPCM (width: 1)UL
#define RFE32_DIV_DCO_CRSCAPCM_DEFAULT                 0x0UL
#define RFE32_DIV_DCO_CRSCAPCM_REDUCED                 0x1UL
// --------------------------------------------------------------
// TDCLDO_DIVLDO
// 
#define RFE32_TDCLDO_DIVLDO_ADR (RFE32_BASE + 0x0078UL)
static volatile unsigned long* const SP_RFE32_TDCLDO_DIVLDO = (unsigned long*) RFE32_TDCLDO_DIVLDO_ADR;
#define S_RFE32_TDCLDO_DIVLDO (*SP_RFE32_TDCLDO_DIVLDO)
#define RF24_RFE32_O_TDCLDO_DIVLDO                 120
// bitfield: TDCLDO_DIVLDO_TDCLDO_ITESTCTL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL            31UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_S 31UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_BM         0x80000000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_M 0x80000000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_ITESTCTL (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_DIS        0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTCTL_EN         0x1UL
// bitfield: TDCLDO_DIVLDO_TDCLDO_VOUTTRIM
#define RFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM            24UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_S 24UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_BM         0x7F000000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_M 0x7F000000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_VOUTTRIM (width: 7)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_ZEROS      0x00UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_VOUTTRIM_ONES       0x7FUL
// bitfield: TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL         23UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_S 23UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_BM      0x00800000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_M 0x00800000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_DIS     0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_ITESTBUFCTL_EN      0x1UL
// bitfield: TDCLDO_DIVLDO_TDCLDO_TMUX
#define RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX                20UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_S   20UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_BM             0x00700000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_M   0x00700000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_TMUX (width: 3)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_OFF            0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_VDDA           0x1UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_LDO_OUT        0x2UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_TMUX_VSSA           0x4UL
// bitfield: TDCLDO_DIVLDO_TDCLDO_PDSEL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL               19UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_S  19UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_BM            0x00080000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_M  0x00080000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_PDSEL (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_R             0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_PDSEL_DIODE         0x1UL
// bitfield: TDCLDO_DIVLDO_TDCLDO_MODE
#define RFE32_TDCLDO_DIVLDO_TDCLDO_MODE                18UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_MODE_S   18UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_MODE_BM             0x00040000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_MODE_M   0x00040000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_MODE (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_MODE_NORM           0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_MODE_FAST           0x1UL
// bitfield: TDCLDO_DIVLDO_TDCLDO_BYPASS
#define RFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS              17UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_S 17UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_BM           0x00020000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_M 0x00020000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_BYPASS (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_DIS          0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_BYPASS_EN           0x1UL
// bitfield: TDCLDO_DIVLDO_TDCLDO_CTL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_CTL                 16UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_CTL_S    16UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_CTL_BM              0x00010000UL
#define RF24_RFE32_TDCLDO_DIVLDO_TDCLDO_CTL_M    0x00010000UL
// enums for bitfield TDCLDO_DIVLDO_TDCLDO_CTL (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_CTL_DIS             0x0UL
#define RFE32_TDCLDO_DIVLDO_TDCLDO_CTL_EN              0x1UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_SPARE15
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15             15UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_S 15UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_BM          0x00008000UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_M 0x00008000UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_SPARE15 (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_ZEROS       0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE15_ONES        0x1UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_VOUTTRIM
#define RFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM            8UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_S 8UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_BM         0x00007F00UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_M 0x00007F00UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_VOUTTRIM (width: 7)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_ZEROS      0x00UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_VOUTTRIM_ONES       0x7FUL
// bitfield: TDCLDO_DIVLDO_DIVLDO_ITST
#define RFE32_TDCLDO_DIVLDO_DIVLDO_ITST                7UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_ITST_S   7UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_ITST_BM             0x00000080UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_ITST_M   0x00000080UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_ITST (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_ITST_DIS            0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_ITST_EN             0x1UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_TMUX
#define RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX                4UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_S   4UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_BM             0x00000070UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_M   0x00000070UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_TMUX (width: 3)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_OFF            0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_GND            0x1UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_LDO_OUT        0x2UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_TMUX_VDDR           0x4UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_SPARE3
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3              3UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_S 3UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_BM           0x00000008UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_M 0x00000008UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_SPARE3 (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_ZERO         0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_SPARE3_ONE          0x1UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_MODE
#define RFE32_TDCLDO_DIVLDO_DIVLDO_MODE                2UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_MODE_S   2UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_MODE_BM             0x00000004UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_MODE_M   0x00000004UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_MODE (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_MODE_NORM           0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_MODE_FAST           0x1UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_BYPASS
#define RFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS              1UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_S 1UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_BM           0x00000002UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_M 0x00000002UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_BYPASS (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_DIS          0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_BYPASS_EN           0x1UL
// bitfield: TDCLDO_DIVLDO_DIVLDO_CTL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_CTL                 0UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_CTL_S    0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_CTL_BM              0x00000001UL
#define RF24_RFE32_TDCLDO_DIVLDO_DIVLDO_CTL_M    0x00000001UL
// enums for bitfield TDCLDO_DIVLDO_DIVLDO_CTL (width: 1)UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_CTL_DIS             0x0UL
#define RFE32_TDCLDO_DIVLDO_DIVLDO_CTL_EN              0x1UL
// --------------------------------------------------------------
// DCOLDO1_DCOLDO0
// 
#define RFE32_DCOLDO1_DCOLDO0_ADR (RFE32_BASE + 0x007CUL)
static volatile unsigned long* const SP_RFE32_DCOLDO1_DCOLDO0 = (unsigned long*) RFE32_DCOLDO1_DCOLDO0_ADR;
#define S_RFE32_DCOLDO1_DCOLDO0 (*SP_RFE32_DCOLDO1_DCOLDO0)
#define RF24_RFE32_O_DCOLDO1_DCOLDO0               124
// bitfield: DCOLDO1_DCOLDO0_REFSRC
#define RFE32_DCOLDO1_DCOLDO0_REFSRC                   26UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_REFSRC_S      26UL
#define RFE32_DCOLDO1_DCOLDO0_REFSRC_BM                0x04000000UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_REFSRC_M      0x04000000UL
// enums for bitfield DCOLDO1_DCOLDO0_REFSRC (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_REFSRC_XTAL              0x0UL
#define RFE32_DCOLDO1_DCOLDO0_REFSRC_BAW               0x1UL
// bitfield: DCOLDO1_DCOLDO0_DIVATST
#define RFE32_DCOLDO1_DCOLDO0_DIVATST                  24UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_DIVATST_S     24UL
#define RFE32_DCOLDO1_DCOLDO0_DIVATST_BM               0x03000000UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_DIVATST_M     0x03000000UL
// enums for bitfield DCOLDO1_DCOLDO0_DIVATST (width: 2)UL
#define RFE32_DCOLDO1_DCOLDO0_DIVATST_ZEROS            0x0UL
#define RFE32_DCOLDO1_DCOLDO0_DIVATST_ONES             0x3UL
// bitfield: DCOLDO1_DCOLDO0_PERFM
#define RFE32_DCOLDO1_DCOLDO0_PERFM                    23UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_PERFM_S       23UL
#define RFE32_DCOLDO1_DCOLDO0_PERFM_BM                 0x00800000UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_PERFM_M       0x00800000UL
// enums for bitfield DCOLDO1_DCOLDO0_PERFM (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_PERFM_DIS                0x0UL
#define RFE32_DCOLDO1_DCOLDO0_PERFM_EN                 0x1UL
// bitfield: DCOLDO1_DCOLDO0_CHRGFILT
#define RFE32_DCOLDO1_DCOLDO0_CHRGFILT                 22UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_CHRGFILT_S    22UL
#define RFE32_DCOLDO1_DCOLDO0_CHRGFILT_BM              0x00400000UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_CHRGFILT_M    0x00400000UL
// enums for bitfield DCOLDO1_DCOLDO0_CHRGFILT (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_CHRGFILT_DIS             0x0UL
#define RFE32_DCOLDO1_DCOLDO0_CHRGFILT_EN              0x1UL
// bitfield: DCOLDO1_DCOLDO0_ATST
#define RFE32_DCOLDO1_DCOLDO0_ATST                     16UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_ATST_S        16UL
#define RFE32_DCOLDO1_DCOLDO0_ATST_BM                  0x003F0000UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_ATST_M        0x003F0000UL
// enums for bitfield DCOLDO1_DCOLDO0_ATST (width: 6)UL
#define RFE32_DCOLDO1_DCOLDO0_ATST_LDO_OUT             0x00UL
#define RFE32_DCOLDO1_DCOLDO0_ATST_FIRST_OUT           0x01UL
#define RFE32_DCOLDO1_DCOLDO0_ATST_VSSANA              0x20UL
// bitfield: DCOLDO1_DCOLDO0_ITST
#define RFE32_DCOLDO1_DCOLDO0_ITST                     14UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_ITST_S        14UL
#define RFE32_DCOLDO1_DCOLDO0_ITST_BM                  0x0000C000UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_ITST_M        0x0000C000UL
// enums for bitfield DCOLDO1_DCOLDO0_ITST (width: 2)UL
#define RFE32_DCOLDO1_DCOLDO0_ITST_DIS                 0x0UL
#define RFE32_DCOLDO1_DCOLDO0_ITST_FIRST               0x1UL
#define RFE32_DCOLDO1_DCOLDO0_ITST_BOTH                0x3UL
#define RFE32_DCOLDO1_DCOLDO0_ITST_SECOND              0x2UL
// bitfield: DCOLDO1_DCOLDO0_SECONDTRIM
#define RFE32_DCOLDO1_DCOLDO0_SECONDTRIM               8UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_SECONDTRIM_S  8UL
#define RFE32_DCOLDO1_DCOLDO0_SECONDTRIM_BM            0x00003F00UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_SECONDTRIM_M  0x00003F00UL
// enums for bitfield DCOLDO1_DCOLDO0_SECONDTRIM (width: 6)UL
#define RFE32_DCOLDO1_DCOLDO0_SECONDTRIM_ZEROS         0x00UL
#define RFE32_DCOLDO1_DCOLDO0_SECONDTRIM_ONES          0x3FUL
// bitfield: DCOLDO1_DCOLDO0_FIRSTTRIM
#define RFE32_DCOLDO1_DCOLDO0_FIRSTTRIM                4UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_S   4UL
#define RFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_BM             0x000000F0UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_M   0x000000F0UL
// enums for bitfield DCOLDO1_DCOLDO0_FIRSTTRIM (width: 4)UL
#define RFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_ZEROS          0x0UL
#define RFE32_DCOLDO1_DCOLDO0_FIRSTTRIM_ONES           0xFUL
// bitfield: DCOLDO1_DCOLDO0_PDN
#define RFE32_DCOLDO1_DCOLDO0_PDN                      3UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_PDN_S         3UL
#define RFE32_DCOLDO1_DCOLDO0_PDN_BM                   0x00000008UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_PDN_M         0x00000008UL
// enums for bitfield DCOLDO1_DCOLDO0_PDN (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_PDN_DIS                  0x0UL
#define RFE32_DCOLDO1_DCOLDO0_PDN_EN                   0x1UL
// bitfield: DCOLDO1_DCOLDO0_BYPFIRST
#define RFE32_DCOLDO1_DCOLDO0_BYPFIRST                 2UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_BYPFIRST_S    2UL
#define RFE32_DCOLDO1_DCOLDO0_BYPFIRST_BM              0x00000004UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_BYPFIRST_M    0x00000004UL
// enums for bitfield DCOLDO1_DCOLDO0_BYPFIRST (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_BYPFIRST_DIS             0x0UL
#define RFE32_DCOLDO1_DCOLDO0_BYPFIRST_EN              0x1UL
// bitfield: DCOLDO1_DCOLDO0_BYPBOTH
#define RFE32_DCOLDO1_DCOLDO0_BYPBOTH                  1UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_BYPBOTH_S     1UL
#define RFE32_DCOLDO1_DCOLDO0_BYPBOTH_BM               0x00000002UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_BYPBOTH_M     0x00000002UL
// enums for bitfield DCOLDO1_DCOLDO0_BYPBOTH (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_BYPBOTH_DIS              0x0UL
#define RFE32_DCOLDO1_DCOLDO0_BYPBOTH_EN               0x1UL
// bitfield: DCOLDO1_DCOLDO0_CTL
#define RFE32_DCOLDO1_DCOLDO0_CTL                      0UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_CTL_S         0UL
#define RFE32_DCOLDO1_DCOLDO0_CTL_BM                   0x00000001UL
#define RF24_RFE32_DCOLDO1_DCOLDO0_CTL_M         0x00000001UL
// enums for bitfield DCOLDO1_DCOLDO0_CTL (width: 1)UL
#define RFE32_DCOLDO1_DCOLDO0_CTL_DIS                  0x0UL
#define RFE32_DCOLDO1_DCOLDO0_CTL_EN                   0x1UL
// --------------------------------------------------------------
// PRE1_PRE0
// 
#define RFE32_PRE1_PRE0_ADR (RFE32_BASE + 0x0080UL)
static volatile unsigned long* const SP_RFE32_PRE1_PRE0 = (unsigned long*) RFE32_PRE1_PRE0_ADR;
#define S_RFE32_PRE1_PRE0 (*SP_RFE32_PRE1_PRE0)
#define RF24_RFE32_O_PRE1_PRE0                     128
// bitfield: PRE1_PRE0_IIRBW
#define RFE32_PRE1_PRE0_IIRBW                          30UL
#define RF24_RFE32_PRE1_PRE0_IIRBW_S             30UL
#define RFE32_PRE1_PRE0_IIRBW_BM                       0xC0000000UL
#define RF24_RFE32_PRE1_PRE0_IIRBW_M             0xC0000000UL
// enums for bitfield PRE1_PRE0_IIRBW (width: 2)UL
#define RFE32_PRE1_PRE0_IIRBW_K2                       0x0UL
#define RFE32_PRE1_PRE0_IIRBW_K4                       0x1UL
#define RFE32_PRE1_PRE0_IIRBW_K8                       0x2UL
#define RFE32_PRE1_PRE0_IIRBW_K16                      0x3UL
// bitfield: PRE1_PRE0_IIRORD
#define RFE32_PRE1_PRE0_IIRORD                         29UL
#define RF24_RFE32_PRE1_PRE0_IIRORD_S            29UL
#define RFE32_PRE1_PRE0_IIRORD_BM                      0x20000000UL
#define RF24_RFE32_PRE1_PRE0_IIRORD_M            0x20000000UL
// enums for bitfield PRE1_PRE0_IIRORD (width: 1)UL
#define RFE32_PRE1_PRE0_IIRORD_FIRST                   0x0UL
#define RFE32_PRE1_PRE0_IIRORD_SECOND                  0x1UL
// bitfield: PRE1_PRE0_IIRDIV
#define RFE32_PRE1_PRE0_IIRDIV                         24UL
#define RF24_RFE32_PRE1_PRE0_IIRDIV_S            24UL
#define RFE32_PRE1_PRE0_IIRDIV_BM                      0x1F000000UL
#define RF24_RFE32_PRE1_PRE0_IIRDIV_M            0x1F000000UL
// enums for bitfield PRE1_PRE0_IIRDIV (width: 5)UL
#define RFE32_PRE1_PRE0_IIRDIV_ALLZEROS                0x00UL
#define RFE32_PRE1_PRE0_IIRDIV_ALLONES                 0x1FUL
// bitfield: PRE1_PRE0_CALHSDDC
#define RFE32_PRE1_PRE0_CALHSDDC                       22UL
#define RF24_RFE32_PRE1_PRE0_CALHSDDC_S          22UL
#define RFE32_PRE1_PRE0_CALHSDDC_BM                    0x00400000UL
#define RF24_RFE32_PRE1_PRE0_CALHSDDC_M          0x00400000UL
// enums for bitfield PRE1_PRE0_CALHSDDC (width: 1)UL
#define RFE32_PRE1_PRE0_CALHSDDC_NOGATE                0x0UL
#define RFE32_PRE1_PRE0_CALHSDDC_GATE                  0x1UL
// bitfield: PRE1_PRE0_HSDDC
#define RFE32_PRE1_PRE0_HSDDC                          16UL
#define RF24_RFE32_PRE1_PRE0_HSDDC_S             16UL
#define RFE32_PRE1_PRE0_HSDDC_BM                       0x003F0000UL
#define RF24_RFE32_PRE1_PRE0_HSDDC_M             0x003F0000UL
// enums for bitfield PRE1_PRE0_HSDDC (width: 6)UL
#define RFE32_PRE1_PRE0_HSDDC_ALLZEROS                 0x00UL
#define RFE32_PRE1_PRE0_HSDDC_ALLONES                  0x3FUL
// bitfield: PRE1_PRE0_SPARE14
#define RFE32_PRE1_PRE0_SPARE14                        14UL
#define RF24_RFE32_PRE1_PRE0_SPARE14_S           14UL
#define RFE32_PRE1_PRE0_SPARE14_BM                     0x0000C000UL
#define RF24_RFE32_PRE1_PRE0_SPARE14_M           0x0000C000UL
// enums for bitfield PRE1_PRE0_SPARE14 (width: 2)UL
#define RFE32_PRE1_PRE0_SPARE14_ALLZEROS               0x0UL
#define RFE32_PRE1_PRE0_SPARE14_ALLONES                0x3UL
// bitfield: PRE1_PRE0_PLLDIV1
#define RFE32_PRE1_PRE0_PLLDIV1                        8UL
#define RF24_RFE32_PRE1_PRE0_PLLDIV1_S           8UL
#define RFE32_PRE1_PRE0_PLLDIV1_BM                     0x00003F00UL
#define RF24_RFE32_PRE1_PRE0_PLLDIV1_M           0x00003F00UL
// enums for bitfield PRE1_PRE0_PLLDIV1 (width: 6)UL
#define RFE32_PRE1_PRE0_PLLDIV1_ALLZEROS               0x00UL
#define RFE32_PRE1_PRE0_PLLDIV1_ALLONES                0x3FUL
// bitfield: PRE1_PRE0_SPARE6
#define RFE32_PRE1_PRE0_SPARE6                         6UL
#define RF24_RFE32_PRE1_PRE0_SPARE6_S            6UL
#define RFE32_PRE1_PRE0_SPARE6_BM                      0x000000C0UL
#define RF24_RFE32_PRE1_PRE0_SPARE6_M            0x000000C0UL
// enums for bitfield PRE1_PRE0_SPARE6 (width: 2)UL
#define RFE32_PRE1_PRE0_SPARE6_ALLZEROS                0x0UL
#define RFE32_PRE1_PRE0_SPARE6_ALLONES                 0x3UL
// bitfield: PRE1_PRE0_PLLDIV0
#define RFE32_PRE1_PRE0_PLLDIV0                        0UL
#define RF24_RFE32_PRE1_PRE0_PLLDIV0_S           0UL
#define RFE32_PRE1_PRE0_PLLDIV0_BM                     0x0000003FUL
#define RF24_RFE32_PRE1_PRE0_PLLDIV0_M           0x0000003FUL
// enums for bitfield PRE1_PRE0_PLLDIV0 (width: 6)UL
#define RFE32_PRE1_PRE0_PLLDIV0_ALLZEROS               0x00UL
#define RFE32_PRE1_PRE0_PLLDIV0_ALLONES                0x3FUL
// --------------------------------------------------------------
// PRE3_PRE2
// 
#define RFE32_PRE3_PRE2_ADR (RFE32_BASE + 0x0084UL)
static volatile unsigned long* const SP_RFE32_PRE3_PRE2 = (unsigned long*) RFE32_PRE3_PRE2_ADR;
#define S_RFE32_PRE3_PRE2 (*SP_RFE32_PRE3_PRE2)
#define RF24_RFE32_O_PRE3_PRE2                     132
// bitfield: PRE3_PRE2_FINECALDIV
#define RFE32_PRE3_PRE2_FINECALDIV                     21UL
#define RF24_RFE32_PRE3_PRE2_FINECALDIV_S        21UL
#define RFE32_PRE3_PRE2_FINECALDIV_BM                  0xFFE00000UL
#define RF24_RFE32_PRE3_PRE2_FINECALDIV_M        0xFFE00000UL
// enums for bitfield PRE3_PRE2_FINECALDIV (width: 11)UL
#define RFE32_PRE3_PRE2_FINECALDIV_ALLZEROS            0x000UL
#define RFE32_PRE3_PRE2_FINECALDIV_ALLONES             0x7FFUL
// bitfield: PRE3_PRE2_MIDCALDIVMSB
#define RFE32_PRE3_PRE2_MIDCALDIVMSB                   16UL
#define RF24_RFE32_PRE3_PRE2_MIDCALDIVMSB_S      16UL
#define RFE32_PRE3_PRE2_MIDCALDIVMSB_BM                0x001F0000UL
#define RF24_RFE32_PRE3_PRE2_MIDCALDIVMSB_M      0x001F0000UL
// enums for bitfield PRE3_PRE2_MIDCALDIVMSB (width: 5)UL
#define RFE32_PRE3_PRE2_MIDCALDIVMSB_ALLZEROS          0x00UL
#define RFE32_PRE3_PRE2_MIDCALDIVMSB_ALLONES           0x1FUL
// bitfield: PRE3_PRE2_MIDCALDIVLSB
#define RFE32_PRE3_PRE2_MIDCALDIVLSB                   12UL
#define RF24_RFE32_PRE3_PRE2_MIDCALDIVLSB_S      12UL
#define RFE32_PRE3_PRE2_MIDCALDIVLSB_BM                0x0000F000UL
#define RF24_RFE32_PRE3_PRE2_MIDCALDIVLSB_M      0x0000F000UL
// enums for bitfield PRE3_PRE2_MIDCALDIVLSB (width: 4)UL
#define RFE32_PRE3_PRE2_MIDCALDIVLSB_ALLZEROS          0x0UL
#define RFE32_PRE3_PRE2_MIDCALDIVLSB_ALLONES           0xFUL
// bitfield: PRE3_PRE2_CRSCALDIV
#define RFE32_PRE3_PRE2_CRSCALDIV                      6UL
#define RF24_RFE32_PRE3_PRE2_CRSCALDIV_S         6UL
#define RFE32_PRE3_PRE2_CRSCALDIV_BM                   0x00000FC0UL
#define RF24_RFE32_PRE3_PRE2_CRSCALDIV_M         0x00000FC0UL
// enums for bitfield PRE3_PRE2_CRSCALDIV (width: 6)UL
#define RFE32_PRE3_PRE2_CRSCALDIV_ALLZEROS             0x00UL
#define RFE32_PRE3_PRE2_CRSCALDIV_ALLONES              0x3FUL
// bitfield: PRE3_PRE2_FSMDIV
#define RFE32_PRE3_PRE2_FSMDIV                         0UL
#define RF24_RFE32_PRE3_PRE2_FSMDIV_S            0UL
#define RFE32_PRE3_PRE2_FSMDIV_BM                      0x0000003FUL
#define RF24_RFE32_PRE3_PRE2_FSMDIV_M            0x0000003FUL
// enums for bitfield PRE3_PRE2_FSMDIV (width: 6)UL
#define RFE32_PRE3_PRE2_FSMDIV_ALLZEROS                0x00UL
#define RFE32_PRE3_PRE2_FSMDIV_ALLONES                 0x3FUL
// --------------------------------------------------------------
// CAL1_CAL0
// 
#define RFE32_CAL1_CAL0_ADR (RFE32_BASE + 0x0088UL)
static volatile unsigned long* const SP_RFE32_CAL1_CAL0 = (unsigned long*) RFE32_CAL1_CAL0_ADR;
#define S_RFE32_CAL1_CAL0 (*SP_RFE32_CAL1_CAL0)
#define RF24_RFE32_O_CAL1_CAL0                     136
// bitfield: CAL1_CAL0_CAL1_SPARE15
#define RFE32_CAL1_CAL0_CAL1_SPARE15                   31UL
#define RF24_RFE32_CAL1_CAL0_CAL1_SPARE15_S      31UL
#define RFE32_CAL1_CAL0_CAL1_SPARE15_BM                0x80000000UL
#define RF24_RFE32_CAL1_CAL0_CAL1_SPARE15_M      0x80000000UL
// enums for bitfield CAL1_CAL0_CAL1_SPARE15 (width: 1)UL
#define RFE32_CAL1_CAL0_CAL1_SPARE15_ZERO              0x0UL
#define RFE32_CAL1_CAL0_CAL1_SPARE15_ONE               0x1UL
// bitfield: CAL1_CAL0_CAL1_FCTOP
#define RFE32_CAL1_CAL0_CAL1_FCTOP                     24UL
#define RF24_RFE32_CAL1_CAL0_CAL1_FCTOP_S        24UL
#define RFE32_CAL1_CAL0_CAL1_FCTOP_BM                  0x7F000000UL
#define RF24_RFE32_CAL1_CAL0_CAL1_FCTOP_M        0x7F000000UL
// enums for bitfield CAL1_CAL0_CAL1_FCTOP (width: 7)UL
#define RFE32_CAL1_CAL0_CAL1_FCTOP_ALLZEROS            0x00UL
#define RFE32_CAL1_CAL0_CAL1_FCTOP_ALLONES             0x7FUL
// bitfield: CAL1_CAL0_CAL1_SPARE7
#define RFE32_CAL1_CAL0_CAL1_SPARE7                    23UL
#define RF24_RFE32_CAL1_CAL0_CAL1_SPARE7_S       23UL
#define RFE32_CAL1_CAL0_CAL1_SPARE7_BM                 0x00800000UL
#define RF24_RFE32_CAL1_CAL0_CAL1_SPARE7_M       0x00800000UL
// enums for bitfield CAL1_CAL0_CAL1_SPARE7 (width: 1)UL
#define RFE32_CAL1_CAL0_CAL1_SPARE7_ZERO               0x0UL
#define RFE32_CAL1_CAL0_CAL1_SPARE7_ONE                0x1UL
// bitfield: CAL1_CAL0_CAL1_FCBOT
#define RFE32_CAL1_CAL0_CAL1_FCBOT                     16UL
#define RF24_RFE32_CAL1_CAL0_CAL1_FCBOT_S        16UL
#define RFE32_CAL1_CAL0_CAL1_FCBOT_BM                  0x007F0000UL
#define RF24_RFE32_CAL1_CAL0_CAL1_FCBOT_M        0x007F0000UL
// enums for bitfield CAL1_CAL0_CAL1_FCBOT (width: 7)UL
#define RFE32_CAL1_CAL0_CAL1_FCBOT_ALLZEROS            0x00UL
#define RFE32_CAL1_CAL0_CAL1_FCBOT_ALLONES             0x7FUL
// bitfield: CAL1_CAL0_CAL0_SPARE15
#define RFE32_CAL1_CAL0_CAL0_SPARE15                   15UL
#define RF24_RFE32_CAL1_CAL0_CAL0_SPARE15_S      15UL
#define RFE32_CAL1_CAL0_CAL0_SPARE15_BM                0x00008000UL
#define RF24_RFE32_CAL1_CAL0_CAL0_SPARE15_M      0x00008000UL
// enums for bitfield CAL1_CAL0_CAL0_SPARE15 (width: 1)UL
#define RFE32_CAL1_CAL0_CAL0_SPARE15_ZERO              0x0UL
#define RFE32_CAL1_CAL0_CAL0_SPARE15_ONE               0x1UL
// bitfield: CAL1_CAL0_CAL0_FCSTART
#define RFE32_CAL1_CAL0_CAL0_FCSTART                   8UL
#define RF24_RFE32_CAL1_CAL0_CAL0_FCSTART_S      8UL
#define RFE32_CAL1_CAL0_CAL0_FCSTART_BM                0x00007F00UL
#define RF24_RFE32_CAL1_CAL0_CAL0_FCSTART_M      0x00007F00UL
// enums for bitfield CAL1_CAL0_CAL0_FCSTART (width: 7)UL
#define RFE32_CAL1_CAL0_CAL0_FCSTART_ALLZEROS          0x00UL
#define RFE32_CAL1_CAL0_CAL0_FCSTART_ALLONES           0x7FUL
// bitfield: CAL1_CAL0_CAL0_CRS
#define RFE32_CAL1_CAL0_CAL0_CRS                       7UL
#define RF24_RFE32_CAL1_CAL0_CAL0_CRS_S          7UL
#define RFE32_CAL1_CAL0_CAL0_CRS_BM                    0x00000080UL
#define RF24_RFE32_CAL1_CAL0_CAL0_CRS_M          0x00000080UL
// enums for bitfield CAL1_CAL0_CAL0_CRS (width: 1)UL
#define RFE32_CAL1_CAL0_CAL0_CRS_DIS                   0x0UL
#define RFE32_CAL1_CAL0_CAL0_CRS_EN                    0x1UL
// bitfield: CAL1_CAL0_CAL0_MID
#define RFE32_CAL1_CAL0_CAL0_MID                       6UL
#define RF24_RFE32_CAL1_CAL0_CAL0_MID_S          6UL
#define RFE32_CAL1_CAL0_CAL0_MID_BM                    0x00000040UL
#define RF24_RFE32_CAL1_CAL0_CAL0_MID_M          0x00000040UL
// enums for bitfield CAL1_CAL0_CAL0_MID (width: 1)UL
#define RFE32_CAL1_CAL0_CAL0_MID_DIS                   0x0UL
#define RFE32_CAL1_CAL0_CAL0_MID_EN                    0x1UL
// bitfield: CAL1_CAL0_CAL0_KTDC
#define RFE32_CAL1_CAL0_CAL0_KTDC                      5UL
#define RF24_RFE32_CAL1_CAL0_CAL0_KTDC_S         5UL
#define RFE32_CAL1_CAL0_CAL0_KTDC_BM                   0x00000020UL
#define RF24_RFE32_CAL1_CAL0_CAL0_KTDC_M         0x00000020UL
// enums for bitfield CAL1_CAL0_CAL0_KTDC (width: 1)UL
#define RFE32_CAL1_CAL0_CAL0_KTDC_DIS                  0x0UL
#define RFE32_CAL1_CAL0_CAL0_KTDC_EN                   0x1UL
// bitfield: CAL1_CAL0_CAL0_KDCO
#define RFE32_CAL1_CAL0_CAL0_KDCO                      4UL
#define RF24_RFE32_CAL1_CAL0_CAL0_KDCO_S         4UL
#define RFE32_CAL1_CAL0_CAL0_KDCO_BM                   0x00000010UL
#define RF24_RFE32_CAL1_CAL0_CAL0_KDCO_M         0x00000010UL
// enums for bitfield CAL1_CAL0_CAL0_KDCO (width: 1)UL
#define RFE32_CAL1_CAL0_CAL0_KDCO_DIS                  0x0UL
#define RFE32_CAL1_CAL0_CAL0_KDCO_EN                   0x1UL
// bitfield: CAL1_CAL0_CAL0_TDCAVG
#define RFE32_CAL1_CAL0_CAL0_TDCAVG                    2UL
#define RF24_RFE32_CAL1_CAL0_CAL0_TDCAVG_S       2UL
#define RFE32_CAL1_CAL0_CAL0_TDCAVG_BM                 0x0000000CUL
#define RF24_RFE32_CAL1_CAL0_CAL0_TDCAVG_M       0x0000000CUL
// enums for bitfield CAL1_CAL0_CAL0_TDCAVG (width: 2)UL
#define RFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_1_TIME      0x0UL
#define RFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_2_TIMES     0x1UL
#define RFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_4_TIMES     0x2UL
#define RFE32_CAL1_CAL0_CAL0_TDCAVG_REPEAT_8_TIMES     0x3UL
// bitfield: CAL1_CAL0_CAL0_TDC_SPARE
#define RFE32_CAL1_CAL0_CAL0_TDC_SPARE                 0UL
#define RF24_RFE32_CAL1_CAL0_CAL0_TDC_SPARE_S    0UL
#define RFE32_CAL1_CAL0_CAL0_TDC_SPARE_BM              0x00000003UL
#define RF24_RFE32_CAL1_CAL0_CAL0_TDC_SPARE_M    0x00000003UL
// enums for bitfield CAL1_CAL0_CAL0_TDC_SPARE (width: 2)UL
#define RFE32_CAL1_CAL0_CAL0_TDC_SPARE_ALLZEROS        0x0UL
#define RFE32_CAL1_CAL0_CAL0_TDC_SPARE_ALLONES         0x3UL
// --------------------------------------------------------------
// CAL3_CAL2
// 
#define RFE32_CAL3_CAL2_ADR (RFE32_BASE + 0x008CUL)
static volatile unsigned long* const SP_RFE32_CAL3_CAL2 = (unsigned long*) RFE32_CAL3_CAL2_ADR;
#define S_RFE32_CAL3_CAL2 (*SP_RFE32_CAL3_CAL2)
#define RF24_RFE32_O_CAL3_CAL2                     140
// bitfield: CAL3_CAL2_DTXGAIN
#define RFE32_CAL3_CAL2_DTXGAIN                        16UL
#define RF24_RFE32_CAL3_CAL2_DTXGAIN_S           16UL
#define RFE32_CAL3_CAL2_DTXGAIN_BM                     0xFFFF0000UL
#define RF24_RFE32_CAL3_CAL2_DTXGAIN_M           0xFFFF0000UL
// enums for bitfield CAL3_CAL2_DTXGAIN (width: 16)UL
#define RFE32_CAL3_CAL2_DTXGAIN_ALLZEROS               0x0000UL
#define RFE32_CAL3_CAL2_DTXGAIN_ALLONES                0xFFFFUL
// bitfield: CAL3_CAL2_KTDCINV
#define RFE32_CAL3_CAL2_KTDCINV                        0UL
#define RF24_RFE32_CAL3_CAL2_KTDCINV_S           0UL
#define RFE32_CAL3_CAL2_KTDCINV_BM                     0x0000FFFFUL
#define RF24_RFE32_CAL3_CAL2_KTDCINV_M           0x0000FFFFUL
// enums for bitfield CAL3_CAL2_KTDCINV (width: 16)UL
#define RFE32_CAL3_CAL2_KTDCINV_ALLZEROS               0x0000UL
#define RFE32_CAL3_CAL2_KTDCINV_ALLONES                0xFFFFUL
// --------------------------------------------------------------
// MISC1_MISC0
// 
#define RFE32_MISC1_MISC0_ADR (RFE32_BASE + 0x0090UL)
static volatile unsigned long* const SP_RFE32_MISC1_MISC0 = (unsigned long*) RFE32_MISC1_MISC0_ADR;
#define S_RFE32_MISC1_MISC0 (*SP_RFE32_MISC1_MISC0)
#define RF24_RFE32_O_MISC1_MISC0                   144
// bitfield: MISC1_MISC0_FCDEMCLK
#define RFE32_MISC1_MISC0_FCDEMCLK                     30UL
#define RF24_RFE32_MISC1_MISC0_FCDEMCLK_S        30UL
#define RFE32_MISC1_MISC0_FCDEMCLK_BM                  0x40000000UL
#define RF24_RFE32_MISC1_MISC0_FCDEMCLK_M        0x40000000UL
// enums for bitfield MISC1_MISC0_FCDEMCLK (width: 1)UL
#define RFE32_MISC1_MISC0_FCDEMCLK_CKCD16              0x0UL
#define RFE32_MISC1_MISC0_FCDEMCLK_CKVD64              0x1UL
// bitfield: MISC1_MISC0_FCDEMUPD
#define RFE32_MISC1_MISC0_FCDEMUPD                     28UL
#define RF24_RFE32_MISC1_MISC0_FCDEMUPD_S        28UL
#define RFE32_MISC1_MISC0_FCDEMUPD_BM                  0x30000000UL
#define RF24_RFE32_MISC1_MISC0_FCDEMUPD_M        0x30000000UL
// enums for bitfield MISC1_MISC0_FCDEMUPD (width: 2)UL
#define RFE32_MISC1_MISC0_FCDEMUPD_DEFAULT             0x0UL
#define RFE32_MISC1_MISC0_FCDEMUPD_PH_ERR              0x1UL
#define RFE32_MISC1_MISC0_FCDEMUPD_SDM                 0x2UL
#define RFE32_MISC1_MISC0_FCDEMUPD_SDM_XOR_PH_ERR      0x3UL
// bitfield: MISC1_MISC0_TDCINL
#define RFE32_MISC1_MISC0_TDCINL                       22UL
#define RF24_RFE32_MISC1_MISC0_TDCINL_S          22UL
#define RFE32_MISC1_MISC0_TDCINL_BM                    0x0FC00000UL
#define RF24_RFE32_MISC1_MISC0_TDCINL_M          0x0FC00000UL
// enums for bitfield MISC1_MISC0_TDCINL (width: 6)UL
#define RFE32_MISC1_MISC0_TDCINL_ZEROS                 0x00UL
#define RFE32_MISC1_MISC0_TDCINL_ONES                  0x3FUL
// bitfield: MISC1_MISC0_TDCINLCTL
#define RFE32_MISC1_MISC0_TDCINLCTL                    21UL
#define RF24_RFE32_MISC1_MISC0_TDCINLCTL_S       21UL
#define RFE32_MISC1_MISC0_TDCINLCTL_BM                 0x00200000UL
#define RF24_RFE32_MISC1_MISC0_TDCINLCTL_M       0x00200000UL
// enums for bitfield MISC1_MISC0_TDCINLCTL (width: 1)UL
#define RFE32_MISC1_MISC0_TDCINLCTL_DIS                0x0UL
#define RFE32_MISC1_MISC0_TDCINLCTL_EN                 0x1UL
// bitfield: MISC1_MISC0_PHINIT
#define RFE32_MISC1_MISC0_PHINIT                       20UL
#define RF24_RFE32_MISC1_MISC0_PHINIT_S          20UL
#define RFE32_MISC1_MISC0_PHINIT_BM                    0x00100000UL
#define RF24_RFE32_MISC1_MISC0_PHINIT_M          0x00100000UL
// enums for bitfield MISC1_MISC0_PHINIT (width: 1)UL
#define RFE32_MISC1_MISC0_PHINIT_KNOWN                 0x0UL
#define RFE32_MISC1_MISC0_PHINIT_UNKNOWN               0x1UL
// bitfield: MISC1_MISC0_SDMOOVRCTL
#define RFE32_MISC1_MISC0_SDMOOVRCTL                   19UL
#define RF24_RFE32_MISC1_MISC0_SDMOOVRCTL_S      19UL
#define RFE32_MISC1_MISC0_SDMOOVRCTL_BM                0x00080000UL
#define RF24_RFE32_MISC1_MISC0_SDMOOVRCTL_M      0x00080000UL
// enums for bitfield MISC1_MISC0_SDMOOVRCTL (width: 1)UL
#define RFE32_MISC1_MISC0_SDMOOVRCTL_DIS               0x0UL
#define RFE32_MISC1_MISC0_SDMOOVRCTL_EN                0x1UL
// bitfield: MISC1_MISC0_SDMOOVR
#define RFE32_MISC1_MISC0_SDMOOVR                      16UL
#define RF24_RFE32_MISC1_MISC0_SDMOOVR_S         16UL
#define RFE32_MISC1_MISC0_SDMOOVR_BM                   0x00070000UL
#define RF24_RFE32_MISC1_MISC0_SDMOOVR_M         0x00070000UL
// enums for bitfield MISC1_MISC0_SDMOOVR (width: 3)UL
#define RFE32_MISC1_MISC0_SDMOOVR_ALLZEROS             0x0UL
#define RFE32_MISC1_MISC0_SDMOOVR_ALLONES              0x7UL
// bitfield: MISC1_MISC0_PHCPT
#define RFE32_MISC1_MISC0_PHCPT                        13UL
#define RF24_RFE32_MISC1_MISC0_PHCPT_S           13UL
#define RFE32_MISC1_MISC0_PHCPT_BM                     0x00002000UL
#define RF24_RFE32_MISC1_MISC0_PHCPT_M           0x00002000UL
// enums for bitfield MISC1_MISC0_PHCPT (width: 1)UL
#define RFE32_MISC1_MISC0_PHCPT_SYNC                   0x0UL
#define RFE32_MISC1_MISC0_PHCPT_ASYNC                  0x1UL
// bitfield: MISC1_MISC0_TDCCALCORR
#define RFE32_MISC1_MISC0_TDCCALCORR                   12UL
#define RF24_RFE32_MISC1_MISC0_TDCCALCORR_S      12UL
#define RFE32_MISC1_MISC0_TDCCALCORR_BM                0x00001000UL
#define RF24_RFE32_MISC1_MISC0_TDCCALCORR_M      0x00001000UL
// enums for bitfield MISC1_MISC0_TDCCALCORR (width: 1)UL
#define RFE32_MISC1_MISC0_TDCCALCORR_DIS               0x0UL
#define RFE32_MISC1_MISC0_TDCCALCORR_EN                0x1UL
// bitfield: MISC1_MISC0_TDCMSBCORR
#define RFE32_MISC1_MISC0_TDCMSBCORR                   11UL
#define RF24_RFE32_MISC1_MISC0_TDCMSBCORR_S      11UL
#define RFE32_MISC1_MISC0_TDCMSBCORR_BM                0x00000800UL
#define RF24_RFE32_MISC1_MISC0_TDCMSBCORR_M      0x00000800UL
// enums for bitfield MISC1_MISC0_TDCMSBCORR (width: 1)UL
#define RFE32_MISC1_MISC0_TDCMSBCORR_DIS               0x0UL
#define RFE32_MISC1_MISC0_TDCMSBCORR_EN                0x1UL
// bitfield: MISC1_MISC0_SDMDEM
#define RFE32_MISC1_MISC0_SDMDEM                       10UL
#define RF24_RFE32_MISC1_MISC0_SDMDEM_S          10UL
#define RFE32_MISC1_MISC0_SDMDEM_BM                    0x00000400UL
#define RF24_RFE32_MISC1_MISC0_SDMDEM_M          0x00000400UL
// enums for bitfield MISC1_MISC0_SDMDEM (width: 1)UL
#define RFE32_MISC1_MISC0_SDMDEM_DIS                   0x0UL
#define RFE32_MISC1_MISC0_SDMDEM_EN                    0x1UL
// bitfield: MISC1_MISC0_DLYSDM
#define RFE32_MISC1_MISC0_DLYSDM                       8UL
#define RF24_RFE32_MISC1_MISC0_DLYSDM_S          8UL
#define RFE32_MISC1_MISC0_DLYSDM_BM                    0x00000300UL
#define RF24_RFE32_MISC1_MISC0_DLYSDM_M          0x00000300UL
// enums for bitfield MISC1_MISC0_DLYSDM (width: 2)UL
#define RFE32_MISC1_MISC0_DLYSDM_CKVD16_0_PER          0x0UL
#define RFE32_MISC1_MISC0_DLYSDM_CKVD16_1_PER          0x1UL
#define RFE32_MISC1_MISC0_DLYSDM_CKVD16_2_PER          0x2UL
#define RFE32_MISC1_MISC0_DLYSDM_CKVD16_3_PER          0x3UL
// bitfield: MISC1_MISC0_DLYPHVALID
#define RFE32_MISC1_MISC0_DLYPHVALID                   6UL
#define RF24_RFE32_MISC1_MISC0_DLYPHVALID_S      6UL
#define RFE32_MISC1_MISC0_DLYPHVALID_BM                0x00000040UL
#define RF24_RFE32_MISC1_MISC0_DLYPHVALID_M      0x00000040UL
// enums for bitfield MISC1_MISC0_DLYPHVALID (width: 1)UL
#define RFE32_MISC1_MISC0_DLYPHVALID_CKVD16_0_PER      0x0UL
#define RFE32_MISC1_MISC0_DLYPHVALID_CKVD16_1_PER      0x1UL
// bitfield: MISC1_MISC0_DLYCANCRS
#define RFE32_MISC1_MISC0_DLYCANCRS                    4UL
#define RF24_RFE32_MISC1_MISC0_DLYCANCRS_S       4UL
#define RFE32_MISC1_MISC0_DLYCANCRS_BM                 0x00000030UL
#define RF24_RFE32_MISC1_MISC0_DLYCANCRS_M       0x00000030UL
// enums for bitfield MISC1_MISC0_DLYCANCRS (width: 2)UL
#define RFE32_MISC1_MISC0_DLYCANCRS_CKVD64_0_PER       0x0UL
#define RFE32_MISC1_MISC0_DLYCANCRS_CKVD64_1_PER       0x1UL
#define RFE32_MISC1_MISC0_DLYCANCRS_CKVD64_2_PER       0x2UL
#define RFE32_MISC1_MISC0_DLYCANCRS_CKVD64_3_PER       0x3UL
// bitfield: MISC1_MISC0_DLYCANFINE
#define RFE32_MISC1_MISC0_DLYCANFINE                   2UL
#define RF24_RFE32_MISC1_MISC0_DLYCANFINE_S      2UL
#define RFE32_MISC1_MISC0_DLYCANFINE_BM                0x0000000CUL
#define RF24_RFE32_MISC1_MISC0_DLYCANFINE_M      0x0000000CUL
// enums for bitfield MISC1_MISC0_DLYCANFINE (width: 2)UL
#define RFE32_MISC1_MISC0_DLYCANFINE_CKVD16_1_PER      0x0UL
#define RFE32_MISC1_MISC0_DLYCANFINE_CKVD16_2_PER      0x1UL
#define RFE32_MISC1_MISC0_DLYCANFINE_CKVD16_3_PER      0x2UL
#define RFE32_MISC1_MISC0_DLYCANFINE_CKVD16_4_PER      0x3UL
// bitfield: MISC1_MISC0_DLYADD
#define RFE32_MISC1_MISC0_DLYADD                       0UL
#define RF24_RFE32_MISC1_MISC0_DLYADD_S          0UL
#define RFE32_MISC1_MISC0_DLYADD_BM                    0x00000003UL
#define RF24_RFE32_MISC1_MISC0_DLYADD_M          0x00000003UL
// enums for bitfield MISC1_MISC0_DLYADD (width: 2)UL
#define RFE32_MISC1_MISC0_DLYADD_CKVD64_0_PER          0x0UL
#define RFE32_MISC1_MISC0_DLYADD_CKVD64_1_PER          0x1UL
#define RFE32_MISC1_MISC0_DLYADD_CKVD64_2_PER          0x2UL
#define RFE32_MISC1_MISC0_DLYADD_CKVD64_3_PER          0x3UL
// --------------------------------------------------------------
// LF1_LF0
// 
#define RFE32_LF1_LF0_ADR (RFE32_BASE + 0x0094UL)
static volatile unsigned long* const SP_RFE32_LF1_LF0 = (unsigned long*) RFE32_LF1_LF0_ADR;
#define S_RFE32_LF1_LF0 (*SP_RFE32_LF1_LF0)
#define RF24_RFE32_O_LF1_LF0                       148
// bitfield: LF1_LF0_KP
#define RFE32_LF1_LF0_KP                               16UL
#define RF24_RFE32_LF1_LF0_KP_S                  16UL
#define RFE32_LF1_LF0_KP_BM                            0x3FFF0000UL
#define RF24_RFE32_LF1_LF0_KP_M                  0x3FFF0000UL
// enums for bitfield LF1_LF0_KP (width: 14)UL
#define RFE32_LF1_LF0_KP_ALLZEROS                      0x0000UL
#define RFE32_LF1_LF0_KP_ALLONES                       0x3FFFUL
// bitfield: LF1_LF0_KIPREC
#define RFE32_LF1_LF0_KIPREC                           12UL
#define RF24_RFE32_LF1_LF0_KIPREC_S              12UL
#define RFE32_LF1_LF0_KIPREC_BM                        0x00001000UL
#define RF24_RFE32_LF1_LF0_KIPREC_M              0x00001000UL
// bitfield: LF1_LF0_KI
#define RFE32_LF1_LF0_KI                               0UL
#define RF24_RFE32_LF1_LF0_KI_S                  0UL
#define RFE32_LF1_LF0_KI_BM                            0x00000FFFUL
#define RF24_RFE32_LF1_LF0_KI_M                  0x00000FFFUL
// enums for bitfield LF1_LF0_KI (width: 12)UL
#define RFE32_LF1_LF0_KI_ALLZEROS                      0x000UL
#define RFE32_LF1_LF0_KI_ALLONES                       0xFFFUL
// --------------------------------------------------------------
// PHINIT_PHEDISC
// 
#define RFE32_PHINIT_PHEDISC_ADR (RFE32_BASE + 0x0098UL)
static volatile unsigned long* const SP_RFE32_PHINIT_PHEDISC = (unsigned long*) RFE32_PHINIT_PHEDISC_ADR;
#define S_RFE32_PHINIT_PHEDISC (*SP_RFE32_PHINIT_PHEDISC)
#define RF24_RFE32_O_PHINIT_PHEDISC                152
// bitfield: PHINIT_PHEDISC_OFF
#define RFE32_PHINIT_PHEDISC_OFF                       16UL
#define RF24_RFE32_PHINIT_PHEDISC_OFF_S          16UL
#define RFE32_PHINIT_PHEDISC_OFF_BM                    0x00FF0000UL
#define RF24_RFE32_PHINIT_PHEDISC_OFF_M          0x00FF0000UL
// enums for bitfield PHINIT_PHEDISC_OFF (width: 8)UL
#define RFE32_PHINIT_PHEDISC_OFF_ALLZEROS              0x00UL
#define RFE32_PHINIT_PHEDISC_OFF_ALLONES               0xFFUL
// bitfield: PHINIT_PHEDISC_CNT
#define RFE32_PHINIT_PHEDISC_CNT                       10UL
#define RF24_RFE32_PHINIT_PHEDISC_CNT_S          10UL
#define RFE32_PHINIT_PHEDISC_CNT_BM                    0x00003C00UL
#define RF24_RFE32_PHINIT_PHEDISC_CNT_M          0x00003C00UL
// enums for bitfield PHINIT_PHEDISC_CNT (width: 4)UL
#define RFE32_PHINIT_PHEDISC_CNT_ALLZEROS              0x0UL
#define RFE32_PHINIT_PHEDISC_CNT_ALLONES               0xFUL
// bitfield: PHINIT_PHEDISC_THR
#define RFE32_PHINIT_PHEDISC_THR                       0UL
#define RF24_RFE32_PHINIT_PHEDISC_THR_S          0UL
#define RFE32_PHINIT_PHEDISC_THR_BM                    0x000003FFUL
#define RF24_RFE32_PHINIT_PHEDISC_THR_M          0x000003FFUL
// enums for bitfield PHINIT_PHEDISC_THR (width: 10)UL
#define RFE32_PHINIT_PHEDISC_THR_ALLZEROS              0x000UL
#define RFE32_PHINIT_PHEDISC_THR_ALLONES               0x3FFUL
// --------------------------------------------------------------
// PLLMON1_PLLMON0
// 
#define RFE32_PLLMON1_PLLMON0_ADR (RFE32_BASE + 0x009CUL)
static volatile unsigned long* const SP_RFE32_PLLMON1_PLLMON0 = (unsigned long*) RFE32_PLLMON1_PLLMON0_ADR;
#define S_RFE32_PLLMON1_PLLMON0 (*SP_RFE32_PLLMON1_PLLMON0)
#define RF24_RFE32_O_PLLMON1_PLLMON0               156
// bitfield: PLLMON1_PLLMON0_PHELOCKCNT
#define RFE32_PLLMON1_PLLMON0_PHELOCKCNT               24UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOCKCNT_S  24UL
#define RFE32_PLLMON1_PLLMON0_PHELOCKCNT_BM            0x1F000000UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOCKCNT_M  0x1F000000UL
// enums for bitfield PLLMON1_PLLMON0_PHELOCKCNT (width: 5)UL
#define RFE32_PLLMON1_PLLMON0_PHELOCKCNT_ALLZEROS      0x00UL
#define RFE32_PLLMON1_PLLMON0_PHELOCKCNT_ALLONES       0x1FUL
// bitfield: PLLMON1_PLLMON0_PHELOCKTHR
#define RFE32_PLLMON1_PLLMON0_PHELOCKTHR               16UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOCKTHR_S  16UL
#define RFE32_PLLMON1_PLLMON0_PHELOCKTHR_BM            0x00FF0000UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOCKTHR_M  0x00FF0000UL
// enums for bitfield PLLMON1_PLLMON0_PHELOCKTHR (width: 8)UL
#define RFE32_PLLMON1_PLLMON0_PHELOCKTHR_ALLZEROS      0x00UL
#define RFE32_PLLMON1_PLLMON0_PHELOCKTHR_ALLONES       0xFFUL
// bitfield: PLLMON1_PLLMON0_PHELOLCNT
#define RFE32_PLLMON1_PLLMON0_PHELOLCNT                14UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOLCNT_S   14UL
#define RFE32_PLLMON1_PLLMON0_PHELOLCNT_BM             0x0000C000UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOLCNT_M   0x0000C000UL
// enums for bitfield PLLMON1_PLLMON0_PHELOLCNT (width: 2)UL
#define RFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_16_PER  0x0UL
#define RFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_32_PER  0x1UL
#define RFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_64_PER  0x2UL
#define RFE32_PLLMON1_PLLMON0_PHELOLCNT_REFCLK_128_PER 0x3UL
// bitfield: PLLMON1_PLLMON0_PHELOLTHR
#define RFE32_PLLMON1_PLLMON0_PHELOLTHR                8UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOLTHR_S   8UL
#define RFE32_PLLMON1_PLLMON0_PHELOLTHR_BM             0x00003F00UL
#define RF24_RFE32_PLLMON1_PLLMON0_PHELOLTHR_M   0x00003F00UL
// enums for bitfield PLLMON1_PLLMON0_PHELOLTHR (width: 6)UL
#define RFE32_PLLMON1_PLLMON0_PHELOLTHR_ALLZEROS       0x00UL
#define RFE32_PLLMON1_PLLMON0_PHELOLTHR_ALLONES        0x3FUL
// bitfield: PLLMON1_PLLMON0_FCTHR
#define RFE32_PLLMON1_PLLMON0_FCTHR                    0UL
#define RF24_RFE32_PLLMON1_PLLMON0_FCTHR_S       0UL
#define RFE32_PLLMON1_PLLMON0_FCTHR_BM                 0x0000007FUL
#define RF24_RFE32_PLLMON1_PLLMON0_FCTHR_M       0x0000007FUL
// enums for bitfield PLLMON1_PLLMON0_FCTHR (width: 7)UL
#define RFE32_PLLMON1_PLLMON0_FCTHR_ALLZEROS           0x00UL
#define RFE32_PLLMON1_PLLMON0_FCTHR_ALLONES            0x7FUL
// --------------------------------------------------------------
// MOD1_MOD0
// 
#define RFE32_MOD1_MOD0_ADR (RFE32_BASE + 0x00A0UL)
static volatile unsigned long* const SP_RFE32_MOD1_MOD0 = (unsigned long*) RFE32_MOD1_MOD0_ADR;
#define S_RFE32_MOD1_MOD0 (*SP_RFE32_MOD1_MOD0)
#define RF24_RFE32_O_MOD1_MOD0                     160
// bitfield: MOD1_MOD0_FOFF
#define RFE32_MOD1_MOD0_FOFF                           16UL
#define RF24_RFE32_MOD1_MOD0_FOFF_S              16UL
#define RFE32_MOD1_MOD0_FOFF_BM                        0x0FFF0000UL
#define RF24_RFE32_MOD1_MOD0_FOFF_M              0x0FFF0000UL
// enums for bitfield MOD1_MOD0_FOFF (width: 12)UL
#define RFE32_MOD1_MOD0_FOFF_ALLZEROS                  0x000UL
#define RFE32_MOD1_MOD0_FOFF_ALLONES                   0xFFFUL
// bitfield: MOD1_MOD0_SCHEME
#define RFE32_MOD1_MOD0_SCHEME                         11UL
#define RF24_RFE32_MOD1_MOD0_SCHEME_S            11UL
#define RFE32_MOD1_MOD0_SCHEME_BM                      0x00001800UL
#define RF24_RFE32_MOD1_MOD0_SCHEME_M            0x00001800UL
// enums for bitfield MOD1_MOD0_SCHEME (width: 2)UL
#define RFE32_MOD1_MOD0_SCHEME_NC                      0x0UL
#define RFE32_MOD1_MOD0_SCHEME_INLOOP_MOD_FREF         0x1UL
#define RFE32_MOD1_MOD0_SCHEME_INLOOP_MOD_FRF          0x2UL
#define RFE32_MOD1_MOD0_SCHEME_TWO_POINT_MOD_FRF       0x3UL
// bitfield: MOD1_MOD0_SYMSHP
#define RFE32_MOD1_MOD0_SYMSHP                         8UL
#define RF24_RFE32_MOD1_MOD0_SYMSHP_S            8UL
#define RFE32_MOD1_MOD0_SYMSHP_BM                      0x00000700UL
#define RF24_RFE32_MOD1_MOD0_SYMSHP_M            0x00000700UL
// enums for bitfield MOD1_MOD0_SYMSHP (width: 3)UL
#define RFE32_MOD1_MOD0_SYMSHP_SHAPEDFSK               0x0UL
#define RFE32_MOD1_MOD0_SYMSHP_ZIGBEE                  0x1UL
#define RFE32_MOD1_MOD0_SYMSHP_PCWSPSK                 0x2UL
#define RFE32_MOD1_MOD0_SYMSHP_SHAPEDZIGBEE            0x3UL
#define RFE32_MOD1_MOD0_SYMSHP_CHIRP                   0x4UL
// bitfield: MOD1_MOD0_CANPTHGAIN
#define RFE32_MOD1_MOD0_CANPTHGAIN                     6UL
#define RF24_RFE32_MOD1_MOD0_CANPTHGAIN_S        6UL
#define RFE32_MOD1_MOD0_CANPTHGAIN_BM                  0x000000C0UL
#define RF24_RFE32_MOD1_MOD0_CANPTHGAIN_M        0x000000C0UL
// enums for bitfield MOD1_MOD0_CANPTHGAIN (width: 2)UL
#define RFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_15        0x0UL
#define RFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_16        0x1UL
#define RFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_17        0x2UL
#define RFE32_MOD1_MOD0_CANPTHGAIN_TWO_POW_M_18        0x3UL
// bitfield: MOD1_MOD0_SHPGAIN
#define RFE32_MOD1_MOD0_SHPGAIN                        4UL
#define RF24_RFE32_MOD1_MOD0_SHPGAIN_S           4UL
#define RFE32_MOD1_MOD0_SHPGAIN_BM                     0x00000030UL
#define RF24_RFE32_MOD1_MOD0_SHPGAIN_M           0x00000030UL
// enums for bitfield MOD1_MOD0_SHPGAIN (width: 2)UL
#define RFE32_MOD1_MOD0_SHPGAIN_X1                     0x0UL
#define RFE32_MOD1_MOD0_SHPGAIN_X2                     0x1UL
#define RFE32_MOD1_MOD0_SHPGAIN_X4                     0x2UL
#define RFE32_MOD1_MOD0_SHPGAIN_X8                     0x3UL
// bitfield: MOD1_MOD0_INTPFACT
#define RFE32_MOD1_MOD0_INTPFACT                       2UL
#define RF24_RFE32_MOD1_MOD0_INTPFACT_S          2UL
#define RFE32_MOD1_MOD0_INTPFACT_BM                    0x0000000CUL
#define RF24_RFE32_MOD1_MOD0_INTPFACT_M          0x0000000CUL
// enums for bitfield MOD1_MOD0_INTPFACT (width: 2)UL
#define RFE32_MOD1_MOD0_INTPFACT_ILLEGAL0              0x0UL
#define RFE32_MOD1_MOD0_INTPFACT_INTP_BY_16            0x1UL
#define RFE32_MOD1_MOD0_INTPFACT_INTP_BY_32            0x2UL
#define RFE32_MOD1_MOD0_INTPFACT_ILLEGAL1              0x3UL
// --------------------------------------------------------------
// DTX1_DTX0
// 
#define RFE32_DTX1_DTX0_ADR (RFE32_BASE + 0x00A4UL)
static volatile unsigned long* const SP_RFE32_DTX1_DTX0 = (unsigned long*) RFE32_DTX1_DTX0_ADR;
#define S_RFE32_DTX1_DTX0 (*SP_RFE32_DTX1_DTX0)
#define RF24_RFE32_O_DTX1_DTX0                     164
// bitfield: DTX1_DTX0_SHP3
#define RFE32_DTX1_DTX0_SHP3                           24UL
#define RF24_RFE32_DTX1_DTX0_SHP3_S              24UL
#define RFE32_DTX1_DTX0_SHP3_BM                        0xFF000000UL
#define RF24_RFE32_DTX1_DTX0_SHP3_M              0xFF000000UL
// enums for bitfield DTX1_DTX0_SHP3 (width: 8)UL
#define RFE32_DTX1_DTX0_SHP3_ALLZEROS                  0x00UL
#define RFE32_DTX1_DTX0_SHP3_ALLONES                   0xFFUL
// bitfield: DTX1_DTX0_SHP2
#define RFE32_DTX1_DTX0_SHP2                           16UL
#define RF24_RFE32_DTX1_DTX0_SHP2_S              16UL
#define RFE32_DTX1_DTX0_SHP2_BM                        0x00FF0000UL
#define RF24_RFE32_DTX1_DTX0_SHP2_M              0x00FF0000UL
// enums for bitfield DTX1_DTX0_SHP2 (width: 8)UL
#define RFE32_DTX1_DTX0_SHP2_ALLZEROS                  0x00UL
#define RFE32_DTX1_DTX0_SHP2_ALLONES                   0xFFUL
// bitfield: DTX1_DTX0_SHP1
#define RFE32_DTX1_DTX0_SHP1                           8UL
#define RF24_RFE32_DTX1_DTX0_SHP1_S              8UL
#define RFE32_DTX1_DTX0_SHP1_BM                        0x0000FF00UL
#define RF24_RFE32_DTX1_DTX0_SHP1_M              0x0000FF00UL
// enums for bitfield DTX1_DTX0_SHP1 (width: 8)UL
#define RFE32_DTX1_DTX0_SHP1_ALLZEROS                  0x00UL
#define RFE32_DTX1_DTX0_SHP1_ALLONES                   0xFFUL
// bitfield: DTX1_DTX0_SHP0
#define RFE32_DTX1_DTX0_SHP0                           0UL
#define RF24_RFE32_DTX1_DTX0_SHP0_S              0UL
#define RFE32_DTX1_DTX0_SHP0_BM                        0x000000FFUL
#define RF24_RFE32_DTX1_DTX0_SHP0_M              0x000000FFUL
// enums for bitfield DTX1_DTX0_SHP0 (width: 8)UL
#define RFE32_DTX1_DTX0_SHP0_ALLZEROS                  0x00UL
#define RFE32_DTX1_DTX0_SHP0_ALLONES                   0xFFUL
// --------------------------------------------------------------
// DTX3_DTX2
// 
#define RFE32_DTX3_DTX2_ADR (RFE32_BASE + 0x00A8UL)
static volatile unsigned long* const SP_RFE32_DTX3_DTX2 = (unsigned long*) RFE32_DTX3_DTX2_ADR;
#define S_RFE32_DTX3_DTX2 (*SP_RFE32_DTX3_DTX2)
#define RF24_RFE32_O_DTX3_DTX2                     168
// bitfield: DTX3_DTX2_SHP7
#define RFE32_DTX3_DTX2_SHP7                           24UL
#define RF24_RFE32_DTX3_DTX2_SHP7_S              24UL
#define RFE32_DTX3_DTX2_SHP7_BM                        0xFF000000UL
#define RF24_RFE32_DTX3_DTX2_SHP7_M              0xFF000000UL
// enums for bitfield DTX3_DTX2_SHP7 (width: 8)UL
#define RFE32_DTX3_DTX2_SHP7_ALLZEROS                  0x00UL
#define RFE32_DTX3_DTX2_SHP7_ALLONES                   0xFFUL
// bitfield: DTX3_DTX2_SHP6
#define RFE32_DTX3_DTX2_SHP6                           16UL
#define RF24_RFE32_DTX3_DTX2_SHP6_S              16UL
#define RFE32_DTX3_DTX2_SHP6_BM                        0x00FF0000UL
#define RF24_RFE32_DTX3_DTX2_SHP6_M              0x00FF0000UL
// enums for bitfield DTX3_DTX2_SHP6 (width: 8)UL
#define RFE32_DTX3_DTX2_SHP6_ALLZEROS                  0x00UL
#define RFE32_DTX3_DTX2_SHP6_ALLONES                   0xFFUL
// bitfield: DTX3_DTX2_SHP5
#define RFE32_DTX3_DTX2_SHP5                           8UL
#define RF24_RFE32_DTX3_DTX2_SHP5_S              8UL
#define RFE32_DTX3_DTX2_SHP5_BM                        0x0000FF00UL
#define RF24_RFE32_DTX3_DTX2_SHP5_M              0x0000FF00UL
// enums for bitfield DTX3_DTX2_SHP5 (width: 8)UL
#define RFE32_DTX3_DTX2_SHP5_ALLZEROS                  0x00UL
#define RFE32_DTX3_DTX2_SHP5_ALLONES                   0xFFUL
// bitfield: DTX3_DTX2_SHP4
#define RFE32_DTX3_DTX2_SHP4                           0UL
#define RF24_RFE32_DTX3_DTX2_SHP4_S              0UL
#define RFE32_DTX3_DTX2_SHP4_BM                        0x000000FFUL
#define RF24_RFE32_DTX3_DTX2_SHP4_M              0x000000FFUL
// enums for bitfield DTX3_DTX2_SHP4 (width: 8)UL
#define RFE32_DTX3_DTX2_SHP4_ALLZEROS                  0x00UL
#define RFE32_DTX3_DTX2_SHP4_ALLONES                   0xFFUL
// --------------------------------------------------------------
// DTX5_DTX4
// 
#define RFE32_DTX5_DTX4_ADR (RFE32_BASE + 0x00ACUL)
static volatile unsigned long* const SP_RFE32_DTX5_DTX4 = (unsigned long*) RFE32_DTX5_DTX4_ADR;
#define S_RFE32_DTX5_DTX4 (*SP_RFE32_DTX5_DTX4)
#define RF24_RFE32_O_DTX5_DTX4                     172
// bitfield: DTX5_DTX4_SHP11
#define RFE32_DTX5_DTX4_SHP11                          24UL
#define RF24_RFE32_DTX5_DTX4_SHP11_S             24UL
#define RFE32_DTX5_DTX4_SHP11_BM                       0xFF000000UL
#define RF24_RFE32_DTX5_DTX4_SHP11_M             0xFF000000UL
// enums for bitfield DTX5_DTX4_SHP11 (width: 8)UL
#define RFE32_DTX5_DTX4_SHP11_ALLZEROS                 0x00UL
#define RFE32_DTX5_DTX4_SHP11_ALLONES                  0xFFUL
// bitfield: DTX5_DTX4_SHP10
#define RFE32_DTX5_DTX4_SHP10                          16UL
#define RF24_RFE32_DTX5_DTX4_SHP10_S             16UL
#define RFE32_DTX5_DTX4_SHP10_BM                       0x00FF0000UL
#define RF24_RFE32_DTX5_DTX4_SHP10_M             0x00FF0000UL
// enums for bitfield DTX5_DTX4_SHP10 (width: 8)UL
#define RFE32_DTX5_DTX4_SHP10_ALLZEROS                 0x00UL
#define RFE32_DTX5_DTX4_SHP10_ALLONES                  0xFFUL
// bitfield: DTX5_DTX4_SHP9
#define RFE32_DTX5_DTX4_SHP9                           8UL
#define RF24_RFE32_DTX5_DTX4_SHP9_S              8UL
#define RFE32_DTX5_DTX4_SHP9_BM                        0x0000FF00UL
#define RF24_RFE32_DTX5_DTX4_SHP9_M              0x0000FF00UL
// enums for bitfield DTX5_DTX4_SHP9 (width: 8)UL
#define RFE32_DTX5_DTX4_SHP9_ALLZEROS                  0x00UL
#define RFE32_DTX5_DTX4_SHP9_ALLONES                   0xFFUL
// bitfield: DTX5_DTX4_SHP8
#define RFE32_DTX5_DTX4_SHP8                           0UL
#define RF24_RFE32_DTX5_DTX4_SHP8_S              0UL
#define RFE32_DTX5_DTX4_SHP8_BM                        0x000000FFUL
#define RF24_RFE32_DTX5_DTX4_SHP8_M              0x000000FFUL
// enums for bitfield DTX5_DTX4_SHP8 (width: 8)UL
#define RFE32_DTX5_DTX4_SHP8_ALLZEROS                  0x00UL
#define RFE32_DTX5_DTX4_SHP8_ALLONES                   0xFFUL
// --------------------------------------------------------------
// DTX7_DTX6
// 
#define RFE32_DTX7_DTX6_ADR (RFE32_BASE + 0x00B0UL)
static volatile unsigned long* const SP_RFE32_DTX7_DTX6 = (unsigned long*) RFE32_DTX7_DTX6_ADR;
#define S_RFE32_DTX7_DTX6 (*SP_RFE32_DTX7_DTX6)
#define RF24_RFE32_O_DTX7_DTX6                     176
// bitfield: DTX7_DTX6_SHP15
#define RFE32_DTX7_DTX6_SHP15                          24UL
#define RF24_RFE32_DTX7_DTX6_SHP15_S             24UL
#define RFE32_DTX7_DTX6_SHP15_BM                       0xFF000000UL
#define RF24_RFE32_DTX7_DTX6_SHP15_M             0xFF000000UL
// enums for bitfield DTX7_DTX6_SHP15 (width: 8)UL
#define RFE32_DTX7_DTX6_SHP15_ALLZEROS                 0x00UL
#define RFE32_DTX7_DTX6_SHP15_ALLONES                  0xFFUL
// bitfield: DTX7_DTX6_SHP14
#define RFE32_DTX7_DTX6_SHP14                          16UL
#define RF24_RFE32_DTX7_DTX6_SHP14_S             16UL
#define RFE32_DTX7_DTX6_SHP14_BM                       0x00FF0000UL
#define RF24_RFE32_DTX7_DTX6_SHP14_M             0x00FF0000UL
// enums for bitfield DTX7_DTX6_SHP14 (width: 8)UL
#define RFE32_DTX7_DTX6_SHP14_ALLZEROS                 0x00UL
#define RFE32_DTX7_DTX6_SHP14_ALLONES                  0xFFUL
// bitfield: DTX7_DTX6_SHP13
#define RFE32_DTX7_DTX6_SHP13                          8UL
#define RF24_RFE32_DTX7_DTX6_SHP13_S             8UL
#define RFE32_DTX7_DTX6_SHP13_BM                       0x0000FF00UL
#define RF24_RFE32_DTX7_DTX6_SHP13_M             0x0000FF00UL
// enums for bitfield DTX7_DTX6_SHP13 (width: 8)UL
#define RFE32_DTX7_DTX6_SHP13_ALLZEROS                 0x00UL
#define RFE32_DTX7_DTX6_SHP13_ALLONES                  0xFFUL
// bitfield: DTX7_DTX6_SHP12
#define RFE32_DTX7_DTX6_SHP12                          0UL
#define RF24_RFE32_DTX7_DTX6_SHP12_S             0UL
#define RFE32_DTX7_DTX6_SHP12_BM                       0x000000FFUL
#define RF24_RFE32_DTX7_DTX6_SHP12_M             0x000000FFUL
// enums for bitfield DTX7_DTX6_SHP12 (width: 8)UL
#define RFE32_DTX7_DTX6_SHP12_ALLZEROS                 0x00UL
#define RFE32_DTX7_DTX6_SHP12_ALLONES                  0xFFUL
// --------------------------------------------------------------
// DTX9_DTX8
// 
#define RFE32_DTX9_DTX8_ADR (RFE32_BASE + 0x00B4UL)
static volatile unsigned long* const SP_RFE32_DTX9_DTX8 = (unsigned long*) RFE32_DTX9_DTX8_ADR;
#define S_RFE32_DTX9_DTX8 (*SP_RFE32_DTX9_DTX8)
#define RF24_RFE32_O_DTX9_DTX8                     180
// bitfield: DTX9_DTX8_SHP19
#define RFE32_DTX9_DTX8_SHP19                          24UL
#define RF24_RFE32_DTX9_DTX8_SHP19_S             24UL
#define RFE32_DTX9_DTX8_SHP19_BM                       0xFF000000UL
#define RF24_RFE32_DTX9_DTX8_SHP19_M             0xFF000000UL
// enums for bitfield DTX9_DTX8_SHP19 (width: 8)UL
#define RFE32_DTX9_DTX8_SHP19_ALLZEROS                 0x00UL
#define RFE32_DTX9_DTX8_SHP19_ALLONES                  0xFFUL
// bitfield: DTX9_DTX8_SHP18
#define RFE32_DTX9_DTX8_SHP18                          16UL
#define RF24_RFE32_DTX9_DTX8_SHP18_S             16UL
#define RFE32_DTX9_DTX8_SHP18_BM                       0x00FF0000UL
#define RF24_RFE32_DTX9_DTX8_SHP18_M             0x00FF0000UL
// enums for bitfield DTX9_DTX8_SHP18 (width: 8)UL
#define RFE32_DTX9_DTX8_SHP18_ALLZEROS                 0x00UL
#define RFE32_DTX9_DTX8_SHP18_ALLONES                  0xFFUL
// bitfield: DTX9_DTX8_SHP17
#define RFE32_DTX9_DTX8_SHP17                          8UL
#define RF24_RFE32_DTX9_DTX8_SHP17_S             8UL
#define RFE32_DTX9_DTX8_SHP17_BM                       0x0000FF00UL
#define RF24_RFE32_DTX9_DTX8_SHP17_M             0x0000FF00UL
// enums for bitfield DTX9_DTX8_SHP17 (width: 8)UL
#define RFE32_DTX9_DTX8_SHP17_ALLZEROS                 0x00UL
#define RFE32_DTX9_DTX8_SHP17_ALLONES                  0xFFUL
// bitfield: DTX9_DTX8_SHP16
#define RFE32_DTX9_DTX8_SHP16                          0UL
#define RF24_RFE32_DTX9_DTX8_SHP16_S             0UL
#define RFE32_DTX9_DTX8_SHP16_BM                       0x000000FFUL
#define RF24_RFE32_DTX9_DTX8_SHP16_M             0x000000FFUL
// enums for bitfield DTX9_DTX8_SHP16 (width: 8)UL
#define RFE32_DTX9_DTX8_SHP16_ALLZEROS                 0x00UL
#define RFE32_DTX9_DTX8_SHP16_ALLONES                  0xFFUL
// --------------------------------------------------------------
// DTX11_DTX10
// 
#define RFE32_DTX11_DTX10_ADR (RFE32_BASE + 0x00B8UL)
static volatile unsigned long* const SP_RFE32_DTX11_DTX10 = (unsigned long*) RFE32_DTX11_DTX10_ADR;
#define S_RFE32_DTX11_DTX10 (*SP_RFE32_DTX11_DTX10)
#define RF24_RFE32_O_DTX11_DTX10                   184
// bitfield: DTX11_DTX10_SHP23
#define RFE32_DTX11_DTX10_SHP23                        24UL
#define RF24_RFE32_DTX11_DTX10_SHP23_S           24UL
#define RFE32_DTX11_DTX10_SHP23_BM                     0xFF000000UL
#define RF24_RFE32_DTX11_DTX10_SHP23_M           0xFF000000UL
// enums for bitfield DTX11_DTX10_SHP23 (width: 8)UL
#define RFE32_DTX11_DTX10_SHP23_ALLZEROS               0x00UL
#define RFE32_DTX11_DTX10_SHP23_ALLONES                0xFFUL
// bitfield: DTX11_DTX10_SHP22
#define RFE32_DTX11_DTX10_SHP22                        16UL
#define RF24_RFE32_DTX11_DTX10_SHP22_S           16UL
#define RFE32_DTX11_DTX10_SHP22_BM                     0x00FF0000UL
#define RF24_RFE32_DTX11_DTX10_SHP22_M           0x00FF0000UL
// enums for bitfield DTX11_DTX10_SHP22 (width: 8)UL
#define RFE32_DTX11_DTX10_SHP22_ALLZEROS               0x00UL
#define RFE32_DTX11_DTX10_SHP22_ALLONES                0xFFUL
// bitfield: DTX11_DTX10_SHP21
#define RFE32_DTX11_DTX10_SHP21                        8UL
#define RF24_RFE32_DTX11_DTX10_SHP21_S           8UL
#define RFE32_DTX11_DTX10_SHP21_BM                     0x0000FF00UL
#define RF24_RFE32_DTX11_DTX10_SHP21_M           0x0000FF00UL
// enums for bitfield DTX11_DTX10_SHP21 (width: 8)UL
#define RFE32_DTX11_DTX10_SHP21_ALLZEROS               0x00UL
#define RFE32_DTX11_DTX10_SHP21_ALLONES                0xFFUL
// bitfield: DTX11_DTX10_SHP20
#define RFE32_DTX11_DTX10_SHP20                        0UL
#define RF24_RFE32_DTX11_DTX10_SHP20_S           0UL
#define RFE32_DTX11_DTX10_SHP20_BM                     0x000000FFUL
#define RF24_RFE32_DTX11_DTX10_SHP20_M           0x000000FFUL
// enums for bitfield DTX11_DTX10_SHP20 (width: 8)UL
#define RFE32_DTX11_DTX10_SHP20_ALLZEROS               0x00UL
#define RFE32_DTX11_DTX10_SHP20_ALLONES                0xFFUL
// --------------------------------------------------------------
// PLLM0
// 
#define RFE32_PLLM0_ADR (RFE32_BASE + 0x00BCUL)
static volatile unsigned long* const SP_RFE32_PLLM0 = (unsigned long*) RFE32_PLLM0_ADR;
#define S_RFE32_PLLM0 (*SP_RFE32_PLLM0)
#define RF24_RFE32_O_PLLM0                         188
// bitfield: PLLM0_VAL
#define RFE32_PLLM0_VAL                                2UL
#define RF24_RFE32_PLLM0_VAL_S                   2UL
#define RFE32_PLLM0_VAL_BM                             0xFFFFFFFCUL
#define RF24_RFE32_PLLM0_VAL_M                   0xFFFFFFFCUL
// enums for bitfield PLLM0_VAL (width: 30)UL
#define RFE32_PLLM0_VAL_ALLZEROS                       0x00000000UL
#define RFE32_PLLM0_VAL_ALLONES                        0x00003FFFUL
// bitfield: PLLM0_SPARE0
#define RFE32_PLLM0_SPARE0                             0UL
#define RF24_RFE32_PLLM0_SPARE0_S                0UL
#define RFE32_PLLM0_SPARE0_BM                          0x00000003UL
#define RF24_RFE32_PLLM0_SPARE0_M                0x00000003UL
// enums for bitfield PLLM0_SPARE0 (width: 2)UL
#define RFE32_PLLM0_SPARE0_ALLZEROS                    0x0UL
#define RFE32_PLLM0_SPARE0_ALLONES                     0x3UL
// --------------------------------------------------------------
// PLLM1
// 
#define RFE32_PLLM1_ADR (RFE32_BASE + 0x00C0UL)
static volatile unsigned long* const SP_RFE32_PLLM1 = (unsigned long*) RFE32_PLLM1_ADR;
#define S_RFE32_PLLM1 (*SP_RFE32_PLLM1)
#define RF24_RFE32_O_PLLM1                         192
// bitfield: PLLM1_VAL
#define RFE32_PLLM1_VAL                                2UL
#define RF24_RFE32_PLLM1_VAL_S                   2UL
#define RFE32_PLLM1_VAL_BM                             0xFFFFFFFCUL
#define RF24_RFE32_PLLM1_VAL_M                   0xFFFFFFFCUL
// enums for bitfield PLLM1_VAL (width: 30)UL
#define RFE32_PLLM1_VAL_ALLZEROS                       0x00000000UL
#define RFE32_PLLM1_VAL_ALLONES                        0x00003FFFUL
// bitfield: PLLM1_SPARE0
#define RFE32_PLLM1_SPARE0                             0UL
#define RF24_RFE32_PLLM1_SPARE0_S                0UL
#define RFE32_PLLM1_SPARE0_BM                          0x00000003UL
#define RF24_RFE32_PLLM1_SPARE0_M                0x00000003UL
// enums for bitfield PLLM1_SPARE0 (width: 2)UL
#define RFE32_PLLM1_SPARE0_ALLZEROS                    0x0UL
#define RFE32_PLLM1_SPARE0_ALLONES                     0x3UL
// --------------------------------------------------------------
// CALMMID_CALMCRS
// 
#define RFE32_CALMMID_CALMCRS_ADR (RFE32_BASE + 0x00C4UL)
static volatile unsigned long* const SP_RFE32_CALMMID_CALMCRS = (unsigned long*) RFE32_CALMMID_CALMCRS_ADR;
#define S_RFE32_CALMMID_CALMCRS (*SP_RFE32_CALMMID_CALMCRS)
#define RF24_RFE32_O_CALMMID_CALMCRS               196
// bitfield: CALMMID_CALMCRS_CALMMID_VAL
#define RFE32_CALMMID_CALMCRS_CALMMID_VAL              16UL
#define RF24_RFE32_CALMMID_CALMCRS_CALMMID_VAL_S 16UL
#define RFE32_CALMMID_CALMCRS_CALMMID_VAL_BM           0xFFFF0000UL
#define RF24_RFE32_CALMMID_CALMCRS_CALMMID_VAL_M 0xFFFF0000UL
// enums for bitfield CALMMID_CALMCRS_CALMMID_VAL (width: 16)UL
#define RFE32_CALMMID_CALMCRS_CALMMID_VAL_ALLZEROS     0x0000UL
#define RFE32_CALMMID_CALMCRS_CALMMID_VAL_ALLONES      0xFFFFUL
// bitfield: CALMMID_CALMCRS_CALMCRS_VAL
#define RFE32_CALMMID_CALMCRS_CALMCRS_VAL              0UL
#define RF24_RFE32_CALMMID_CALMCRS_CALMCRS_VAL_S 0UL
#define RFE32_CALMMID_CALMCRS_CALMCRS_VAL_BM           0x0000FFFFUL
#define RF24_RFE32_CALMMID_CALMCRS_CALMCRS_VAL_M 0x0000FFFFUL
// enums for bitfield CALMMID_CALMCRS_CALMCRS_VAL (width: 16)UL
#define RFE32_CALMMID_CALMCRS_CALMCRS_VAL_ALLZEROS     0x0000UL
#define RFE32_CALMMID_CALMCRS_CALMCRS_VAL_ALLONES      0xFFFFUL
// --------------------------------------------------------------
// REFDIV
// 
#define RFE32_REFDIV_ADR (RFE32_BASE + 0x00C8UL)
static volatile unsigned long* const SP_RFE32_REFDIV = (unsigned long*) RFE32_REFDIV_ADR;
#define S_RFE32_REFDIV (*SP_RFE32_REFDIV)
#define RF24_RFE32_O_REFDIV                        200
// bitfield: REFDIV_LOAD
#define RFE32_REFDIV_LOAD                              0UL
#define RF24_RFE32_REFDIV_LOAD_S                 0UL
#define RFE32_REFDIV_LOAD_BM                           0x0000FFFFUL
#define RF24_RFE32_REFDIV_LOAD_M                 0x0000FFFFUL
// enums for bitfield REFDIV_LOAD (width: 16)UL
#define RFE32_REFDIV_LOAD_ALLZEROS                     0x0000UL
#define RFE32_REFDIV_LOAD_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// DLOCTL0
// 
#define RFE32_DLOCTL0_ADR (RFE32_BASE + 0x00CCUL)
static volatile unsigned long* const SP_RFE32_DLOCTL0 = (unsigned long*) RFE32_DLOCTL0_ADR;
#define S_RFE32_DLOCTL0 (*SP_RFE32_DLOCTL0)
#define RF24_RFE32_O_DLOCTL0                       204
// bitfield: DLOCTL0_TDCSTOP
#define RFE32_DLOCTL0_TDCSTOP                          8UL
#define RF24_RFE32_DLOCTL0_TDCSTOP_S             8UL
#define RFE32_DLOCTL0_TDCSTOP_BM                       0x00000700UL
#define RF24_RFE32_DLOCTL0_TDCSTOP_M             0x00000700UL
// enums for bitfield DLOCTL0_TDCSTOP (width: 3)UL
#define RFE32_DLOCTL0_TDCSTOP_CLOSED                   0x0UL
#define RFE32_DLOCTL0_TDCSTOP_OPEN                     0x1UL
// bitfield: DLOCTL0_DTSTXTAL
#define RFE32_DLOCTL0_DTSTXTAL                         7UL
#define RF24_RFE32_DLOCTL0_DTSTXTAL_S            7UL
#define RFE32_DLOCTL0_DTSTXTAL_BM                      0x00000080UL
#define RF24_RFE32_DLOCTL0_DTSTXTAL_M            0x00000080UL
// enums for bitfield DLOCTL0_DTSTXTAL (width: 1)UL
#define RFE32_DLOCTL0_DTSTXTAL_ZERO                    0x0UL
#define RFE32_DLOCTL0_DTSTXTAL_ONE                     0x1UL
// bitfield: DLOCTL0_LOOPUPD
#define RFE32_DLOCTL0_LOOPUPD                          4UL
#define RF24_RFE32_DLOCTL0_LOOPUPD_S             4UL
#define RFE32_DLOCTL0_LOOPUPD_BM                       0x00000070UL
#define RF24_RFE32_DLOCTL0_LOOPUPD_M             0x00000070UL
// enums for bitfield DLOCTL0_LOOPUPD (width: 3)UL
#define RFE32_DLOCTL0_LOOPUPD_DEF                      0x0UL
#define RFE32_DLOCTL0_LOOPUPD_ALT                      0x1UL
// bitfield: DLOCTL0_PH3
#define RFE32_DLOCTL0_PH3                              3UL
#define RF24_RFE32_DLOCTL0_PH3_S                 3UL
#define RFE32_DLOCTL0_PH3_BM                           0x00000008UL
#define RF24_RFE32_DLOCTL0_PH3_M                 0x00000008UL
// enums for bitfield DLOCTL0_PH3 (width: 1)UL
#define RFE32_DLOCTL0_PH3_HALT                         0x0UL
#define RFE32_DLOCTL0_PH3_START                        0x1UL
// bitfield: DLOCTL0_PH2
#define RFE32_DLOCTL0_PH2                              2UL
#define RF24_RFE32_DLOCTL0_PH2_S                 2UL
#define RFE32_DLOCTL0_PH2_BM                           0x00000004UL
#define RF24_RFE32_DLOCTL0_PH2_M                 0x00000004UL
// enums for bitfield DLOCTL0_PH2 (width: 1)UL
#define RFE32_DLOCTL0_PH2_HALT                         0x0UL
#define RFE32_DLOCTL0_PH2_START                        0x1UL
// bitfield: DLOCTL0_LOOPMODE
#define RFE32_DLOCTL0_LOOPMODE                         1UL
#define RF24_RFE32_DLOCTL0_LOOPMODE_S            1UL
#define RFE32_DLOCTL0_LOOPMODE_BM                      0x00000002UL
#define RF24_RFE32_DLOCTL0_LOOPMODE_M            0x00000002UL
// enums for bitfield DLOCTL0_LOOPMODE (width: 1)UL
#define RFE32_DLOCTL0_LOOPMODE_CLOSED                  0x0UL
#define RFE32_DLOCTL0_LOOPMODE_OPEN                    0x1UL
// bitfield: DLOCTL0_RSTN
#define RFE32_DLOCTL0_RSTN                             0UL
#define RF24_RFE32_DLOCTL0_RSTN_S                0UL
#define RFE32_DLOCTL0_RSTN_BM                          0x00000001UL
#define RF24_RFE32_DLOCTL0_RSTN_M                0x00000001UL
// enums for bitfield DLOCTL0_RSTN (width: 1)UL
#define RFE32_DLOCTL0_RSTN_RESET                       0x0UL
#define RFE32_DLOCTL0_RSTN_ACTIVE                      0x1UL
// --------------------------------------------------------------
// DLOCTL1
// 
#define RFE32_DLOCTL1_ADR (RFE32_BASE + 0x00D0UL)
static volatile unsigned long* const SP_RFE32_DLOCTL1 = (unsigned long*) RFE32_DLOCTL1_ADR;
#define S_RFE32_DLOCTL1 (*SP_RFE32_DLOCTL1)
#define RF24_RFE32_O_DLOCTL1                       208
// bitfield: DLOCTL1_DCO
#define RFE32_DLOCTL1_DCO                              15UL
#define RF24_RFE32_DLOCTL1_DCO_S                 15UL
#define RFE32_DLOCTL1_DCO_BM                           0x00008000UL
#define RF24_RFE32_DLOCTL1_DCO_M                 0x00008000UL
// enums for bitfield DLOCTL1_DCO (width: 1)UL
#define RFE32_DLOCTL1_DCO_DIS                          0x0UL
#define RFE32_DLOCTL1_DCO_EN                           0x1UL
// bitfield: DLOCTL1_FCDEM
#define RFE32_DLOCTL1_FCDEM                            7UL
#define RF24_RFE32_DLOCTL1_FCDEM_S               7UL
#define RFE32_DLOCTL1_FCDEM_BM                         0x00000080UL
#define RF24_RFE32_DLOCTL1_FCDEM_M               0x00000080UL
// enums for bitfield DLOCTL1_FCDEM (width: 1)UL
#define RFE32_DLOCTL1_FCDEM_DIS                        0x0UL
#define RFE32_DLOCTL1_FCDEM_EN                         0x1UL
// bitfield: DLOCTL1_DTSTCKVD
#define RFE32_DLOCTL1_DTSTCKVD                         6UL
#define RF24_RFE32_DLOCTL1_DTSTCKVD_S            6UL
#define RFE32_DLOCTL1_DTSTCKVD_BM                      0x00000040UL
#define RF24_RFE32_DLOCTL1_DTSTCKVD_M            0x00000040UL
// enums for bitfield DLOCTL1_DTSTCKVD (width: 1)UL
#define RFE32_DLOCTL1_DTSTCKVD_ZERO                    0x0UL
#define RFE32_DLOCTL1_DTSTCKVD_ONE                     0x1UL
// bitfield: DLOCTL1_PHEDISC
#define RFE32_DLOCTL1_PHEDISC                          5UL
#define RF24_RFE32_DLOCTL1_PHEDISC_S             5UL
#define RFE32_DLOCTL1_PHEDISC_BM                       0x00000020UL
#define RF24_RFE32_DLOCTL1_PHEDISC_M             0x00000020UL
// enums for bitfield DLOCTL1_PHEDISC (width: 1)UL
#define RFE32_DLOCTL1_PHEDISC_DIS                      0x0UL
#define RFE32_DLOCTL1_PHEDISC_EN                       0x1UL
// bitfield: DLOCTL1_PLLMON
#define RFE32_DLOCTL1_PLLMON                           4UL
#define RF24_RFE32_DLOCTL1_PLLMON_S              4UL
#define RFE32_DLOCTL1_PLLMON_BM                        0x00000010UL
#define RF24_RFE32_DLOCTL1_PLLMON_M              0x00000010UL
// enums for bitfield DLOCTL1_PLLMON (width: 1)UL
#define RFE32_DLOCTL1_PLLMON_DIS                       0x0UL
#define RFE32_DLOCTL1_PLLMON_EN                        0x1UL
// bitfield: DLOCTL1_IIR
#define RFE32_DLOCTL1_IIR                              3UL
#define RF24_RFE32_DLOCTL1_IIR_S                 3UL
#define RFE32_DLOCTL1_IIR_BM                           0x00000008UL
#define RF24_RFE32_DLOCTL1_IIR_M                 0x00000008UL
// enums for bitfield DLOCTL1_IIR (width: 1)UL
#define RFE32_DLOCTL1_IIR_DIS                          0x0UL
#define RFE32_DLOCTL1_IIR_EN                           0x1UL
// bitfield: DLOCTL1_MOD
#define RFE32_DLOCTL1_MOD                              2UL
#define RF24_RFE32_DLOCTL1_MOD_S                 2UL
#define RFE32_DLOCTL1_MOD_BM                           0x00000004UL
#define RF24_RFE32_DLOCTL1_MOD_M                 0x00000004UL
// enums for bitfield DLOCTL1_MOD (width: 1)UL
#define RFE32_DLOCTL1_MOD_DIS                          0x0UL
#define RFE32_DLOCTL1_MOD_EN                           0x1UL
// bitfield: DLOCTL1_MODINIT
#define RFE32_DLOCTL1_MODINIT                          1UL
#define RF24_RFE32_DLOCTL1_MODINIT_S             1UL
#define RFE32_DLOCTL1_MODINIT_BM                       0x00000002UL
#define RF24_RFE32_DLOCTL1_MODINIT_M             0x00000002UL
// enums for bitfield DLOCTL1_MODINIT (width: 1)UL
#define RFE32_DLOCTL1_MODINIT_DEACTIVATE               0x0UL
#define RFE32_DLOCTL1_MODINIT_ACTIVATE                 0x1UL
// bitfield: DLOCTL1_MTDCRSTN
#define RFE32_DLOCTL1_MTDCRSTN                         0UL
#define RF24_RFE32_DLOCTL1_MTDCRSTN_S            0UL
#define RFE32_DLOCTL1_MTDCRSTN_BM                      0x00000001UL
#define RF24_RFE32_DLOCTL1_MTDCRSTN_M            0x00000001UL
// enums for bitfield DLOCTL1_MTDCRSTN (width: 1)UL
#define RFE32_DLOCTL1_MTDCRSTN_RESET                   0x0UL
#define RFE32_DLOCTL1_MTDCRSTN_ACTIVE                  0x1UL
// --------------------------------------------------------------
// DCOOVR1_DCOOVR0
// 
#define RFE32_DCOOVR1_DCOOVR0_ADR (RFE32_BASE + 0x00D4UL)
static volatile unsigned long* const SP_RFE32_DCOOVR1_DCOOVR0 = (unsigned long*) RFE32_DCOOVR1_DCOOVR0_ADR;
#define S_RFE32_DCOOVR1_DCOOVR0 (*SP_RFE32_DCOOVR1_DCOOVR0)
#define RF24_RFE32_O_DCOOVR1_DCOOVR0               212
// bitfield: DCOOVR1_DCOOVR0_FINECODE
#define RFE32_DCOOVR1_DCOOVR0_FINECODE                 24UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_FINECODE_S    24UL
#define RFE32_DCOOVR1_DCOOVR0_FINECODE_BM              0x7F000000UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_FINECODE_M    0x7F000000UL
// enums for bitfield DCOOVR1_DCOOVR0_FINECODE (width: 7)UL
#define RFE32_DCOOVR1_DCOOVR0_FINECODE_ALLZEROS        0x00UL
#define RFE32_DCOOVR1_DCOOVR0_FINECODE_ALLONES         0x7FUL
// bitfield: DCOOVR1_DCOOVR0_SDMICODE
#define RFE32_DCOOVR1_DCOOVR0_SDMICODE                 16UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_SDMICODE_S    16UL
#define RFE32_DCOOVR1_DCOOVR0_SDMICODE_BM              0x00FF0000UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_SDMICODE_M    0x00FF0000UL
// enums for bitfield DCOOVR1_DCOOVR0_SDMICODE (width: 8)UL
#define RFE32_DCOOVR1_DCOOVR0_SDMICODE_ALLZEROS        0x00UL
#define RFE32_DCOOVR1_DCOOVR0_SDMICODE_ALLONES         0xFFUL
// bitfield: DCOOVR1_DCOOVR0_MIDCODE
#define RFE32_DCOOVR1_DCOOVR0_MIDCODE                  8UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_MIDCODE_S     8UL
#define RFE32_DCOOVR1_DCOOVR0_MIDCODE_BM               0x00003F00UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_MIDCODE_M     0x00003F00UL
// enums for bitfield DCOOVR1_DCOOVR0_MIDCODE (width: 6)UL
#define RFE32_DCOOVR1_DCOOVR0_MIDCODE_ALLZEROS         0x00UL
#define RFE32_DCOOVR1_DCOOVR0_MIDCODE_ALLONES          0x3FUL
// bitfield: DCOOVR1_DCOOVR0_CRSCODE
#define RFE32_DCOOVR1_DCOOVR0_CRSCODE                  4UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_CRSCODE_S     4UL
#define RFE32_DCOOVR1_DCOOVR0_CRSCODE_BM               0x000000F0UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_CRSCODE_M     0x000000F0UL
// enums for bitfield DCOOVR1_DCOOVR0_CRSCODE (width: 4)UL
#define RFE32_DCOOVR1_DCOOVR0_CRSCODE_ALLZEROS         0x0UL
#define RFE32_DCOOVR1_DCOOVR0_CRSCODE_ALLONES          0xFUL
// bitfield: DCOOVR1_DCOOVR0_FINECTL
#define RFE32_DCOOVR1_DCOOVR0_FINECTL                  3UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_FINECTL_S     3UL
#define RFE32_DCOOVR1_DCOOVR0_FINECTL_BM               0x00000008UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_FINECTL_M     0x00000008UL
// enums for bitfield DCOOVR1_DCOOVR0_FINECTL (width: 1)UL
#define RFE32_DCOOVR1_DCOOVR0_FINECTL_DIS              0x0UL
#define RFE32_DCOOVR1_DCOOVR0_FINECTL_EN               0x1UL
// bitfield: DCOOVR1_DCOOVR0_SDMICTL
#define RFE32_DCOOVR1_DCOOVR0_SDMICTL                  2UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_SDMICTL_S     2UL
#define RFE32_DCOOVR1_DCOOVR0_SDMICTL_BM               0x00000004UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_SDMICTL_M     0x00000004UL
// enums for bitfield DCOOVR1_DCOOVR0_SDMICTL (width: 1)UL
#define RFE32_DCOOVR1_DCOOVR0_SDMICTL_DIS              0x0UL
#define RFE32_DCOOVR1_DCOOVR0_SDMICTL_EN               0x1UL
// bitfield: DCOOVR1_DCOOVR0_MIDCTL
#define RFE32_DCOOVR1_DCOOVR0_MIDCTL                   1UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_MIDCTL_S      1UL
#define RFE32_DCOOVR1_DCOOVR0_MIDCTL_BM                0x00000002UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_MIDCTL_M      0x00000002UL
// enums for bitfield DCOOVR1_DCOOVR0_MIDCTL (width: 1)UL
#define RFE32_DCOOVR1_DCOOVR0_MIDCTL_DIS               0x0UL
#define RFE32_DCOOVR1_DCOOVR0_MIDCTL_EN                0x1UL
// bitfield: DCOOVR1_DCOOVR0_CRSCTL
#define RFE32_DCOOVR1_DCOOVR0_CRSCTL                   0UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_CRSCTL_S      0UL
#define RFE32_DCOOVR1_DCOOVR0_CRSCTL_BM                0x00000001UL
#define RF24_RFE32_DCOOVR1_DCOOVR0_CRSCTL_M      0x00000001UL
// enums for bitfield DCOOVR1_DCOOVR0_CRSCTL (width: 1)UL
#define RFE32_DCOOVR1_DCOOVR0_CRSCTL_DIS               0x0UL
#define RFE32_DCOOVR1_DCOOVR0_CRSCTL_EN                0x1UL
// --------------------------------------------------------------
// DLOEV_DTST
// 
#define RFE32_DLOEV_DTST_ADR (RFE32_BASE + 0x00D8UL)
static volatile unsigned long* const SP_RFE32_DLOEV_DTST = (unsigned long*) RFE32_DLOEV_DTST_ADR;
#define S_RFE32_DLOEV_DTST (*SP_RFE32_DLOEV_DTST)
#define RF24_RFE32_O_DLOEV_DTST                    216
// bitfield: DLOEV_DTST_LOCK
#define RFE32_DLOEV_DTST_LOCK                          23UL
#define RF24_RFE32_DLOEV_DTST_LOCK_S             23UL
#define RFE32_DLOEV_DTST_LOCK_BM                       0x00800000UL
#define RF24_RFE32_DLOEV_DTST_LOCK_M             0x00800000UL
// enums for bitfield DLOEV_DTST_LOCK (width: 1)UL
#define RFE32_DLOEV_DTST_LOCK_ZERO                     0x0UL
#define RFE32_DLOEV_DTST_LOCK_ONE                      0x1UL
// bitfield: DLOEV_DTST_LOL
#define RFE32_DLOEV_DTST_LOL                           22UL
#define RF24_RFE32_DLOEV_DTST_LOL_S              22UL
#define RFE32_DLOEV_DTST_LOL_BM                        0x00400000UL
#define RF24_RFE32_DLOEV_DTST_LOL_M              0x00400000UL
// enums for bitfield DLOEV_DTST_LOL (width: 1)UL
#define RFE32_DLOEV_DTST_LOL_ZERO                      0x0UL
#define RFE32_DLOEV_DTST_LOL_ONE                       0x1UL
// bitfield: DLOEV_DTST_FCABVTHR
#define RFE32_DLOEV_DTST_FCABVTHR                      21UL
#define RF24_RFE32_DLOEV_DTST_FCABVTHR_S         21UL
#define RFE32_DLOEV_DTST_FCABVTHR_BM                   0x00200000UL
#define RF24_RFE32_DLOEV_DTST_FCABVTHR_M         0x00200000UL
// enums for bitfield DLOEV_DTST_FCABVTHR (width: 1)UL
#define RFE32_DLOEV_DTST_FCABVTHR_ZERO                 0x0UL
#define RFE32_DLOEV_DTST_FCABVTHR_ONE                  0x1UL
// bitfield: DLOEV_DTST_FCBLWTHR
#define RFE32_DLOEV_DTST_FCBLWTHR                      20UL
#define RF24_RFE32_DLOEV_DTST_FCBLWTHR_S         20UL
#define RFE32_DLOEV_DTST_FCBLWTHR_BM                   0x00100000UL
#define RF24_RFE32_DLOEV_DTST_FCBLWTHR_M         0x00100000UL
// enums for bitfield DLOEV_DTST_FCBLWTHR (width: 1)UL
#define RFE32_DLOEV_DTST_FCBLWTHR_ZERO                 0x0UL
#define RFE32_DLOEV_DTST_FCBLWTHR_ONE                  0x1UL
// bitfield: DLOEV_DTST_STATE
#define RFE32_DLOEV_DTST_STATE                         16UL
#define RF24_RFE32_DLOEV_DTST_STATE_S            16UL
#define RFE32_DLOEV_DTST_STATE_BM                      0x000F0000UL
#define RF24_RFE32_DLOEV_DTST_STATE_M            0x000F0000UL
// enums for bitfield DLOEV_DTST_STATE (width: 4)UL
#define RFE32_DLOEV_DTST_STATE_ALLZEROS                0x0UL
#define RFE32_DLOEV_DTST_STATE_ALLONES                 0xFUL
// bitfield: DLOEV_DTST_SPARE11
#define RFE32_DLOEV_DTST_SPARE11                       11UL
#define RF24_RFE32_DLOEV_DTST_SPARE11_S          11UL
#define RFE32_DLOEV_DTST_SPARE11_BM                    0x00007800UL
#define RF24_RFE32_DLOEV_DTST_SPARE11_M          0x00007800UL
// enums for bitfield DLOEV_DTST_SPARE11 (width: 4)UL
#define RFE32_DLOEV_DTST_SPARE11_ALLZEROS              0x0UL
#define RFE32_DLOEV_DTST_SPARE11_ALLONES               0xFUL
// bitfield: DLOEV_DTST_VARTGLDLY
#define RFE32_DLOEV_DTST_VARTGLDLY                     8UL
#define RF24_RFE32_DLOEV_DTST_VARTGLDLY_S        8UL
#define RFE32_DLOEV_DTST_VARTGLDLY_BM                  0x00000700UL
#define RF24_RFE32_DLOEV_DTST_VARTGLDLY_M        0x00000700UL
// enums for bitfield DLOEV_DTST_VARTGLDLY (width: 3)UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_0_PER           0x0UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_1_PER           0x1UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_2_PER           0x2UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_3_PER           0x3UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_4_PER           0x4UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_5_PER           0x5UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_6_PER           0x6UL
#define RFE32_DLOEV_DTST_VARTGLDLY_CLK_7_PER           0x7UL
// bitfield: DLOEV_DTST_REFTGLDLY
#define RFE32_DLOEV_DTST_REFTGLDLY                     7UL
#define RF24_RFE32_DLOEV_DTST_REFTGLDLY_S        7UL
#define RFE32_DLOEV_DTST_REFTGLDLY_BM                  0x00000080UL
#define RF24_RFE32_DLOEV_DTST_REFTGLDLY_M        0x00000080UL
// enums for bitfield DLOEV_DTST_REFTGLDLY (width: 1)UL
#define RFE32_DLOEV_DTST_REFTGLDLY_CLK_0_PER           0x0UL
#define RFE32_DLOEV_DTST_REFTGLDLY_CLK_1_PER           0x1UL
// bitfield: DLOEV_DTST_TRNSEQ
#define RFE32_DLOEV_DTST_TRNSEQ                        6UL
#define RF24_RFE32_DLOEV_DTST_TRNSEQ_S           6UL
#define RFE32_DLOEV_DTST_TRNSEQ_BM                     0x00000040UL
#define RF24_RFE32_DLOEV_DTST_TRNSEQ_M           0x00000040UL
// enums for bitfield DLOEV_DTST_TRNSEQ (width: 1)UL
#define RFE32_DLOEV_DTST_TRNSEQ_DIS                    0x0UL
#define RFE32_DLOEV_DTST_TRNSEQ_EN                     0x1UL
// bitfield: DLOEV_DTST_SPARE5
#define RFE32_DLOEV_DTST_SPARE5                        5UL
#define RF24_RFE32_DLOEV_DTST_SPARE5_S           5UL
#define RFE32_DLOEV_DTST_SPARE5_BM                     0x00000020UL
#define RF24_RFE32_DLOEV_DTST_SPARE5_M           0x00000020UL
// enums for bitfield DLOEV_DTST_SPARE5 (width: 1)UL
#define RFE32_DLOEV_DTST_SPARE5_ZERO                   0x0UL
#define RFE32_DLOEV_DTST_SPARE5_ONE                    0x1UL
// bitfield: DLOEV_DTST_SIG
#define RFE32_DLOEV_DTST_SIG                           0UL
#define RF24_RFE32_DLOEV_DTST_SIG_S              0UL
#define RFE32_DLOEV_DTST_SIG_BM                        0x0000001FUL
#define RF24_RFE32_DLOEV_DTST_SIG_M              0x0000001FUL
// enums for bitfield DLOEV_DTST_SIG (width: 5)UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_0                  0x00UL
#define RFE32_DLOEV_DTST_SIG_REF_FSMCAL                0x01UL
#define RFE32_DLOEV_DTST_SIG_REF_FERR_MAG              0x02UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_3                  0x03UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_4                  0x04UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_5                  0x05UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_6                  0x06UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_7                  0x07UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_8                  0x08UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_9                  0x09UL
#define RFE32_DLOEV_DTST_SIG_REF_NC_10                 0x0AUL
#define RFE32_DLOEV_DTST_SIG_REF_NC_11                 0x0BUL
#define RFE32_DLOEV_DTST_SIG_REF_NC_12                 0x0CUL
#define RFE32_DLOEV_DTST_SIG_REF_NC_13                 0x0DUL
#define RFE32_DLOEV_DTST_SIG_REF_NC_14                 0x0EUL
#define RFE32_DLOEV_DTST_SIG_REF_NC_15                 0x0FUL
#define RFE32_DLOEV_DTST_SIG_VAR_NC_0                  0x10UL
#define RFE32_DLOEV_DTST_SIG_VAR_PHERR_UPPER           0x11UL
#define RFE32_DLOEV_DTST_SIG_VAR_PHERR_LOWER           0x12UL
#define RFE32_DLOEV_DTST_SIG_VAR_PH_RAW                0x13UL
#define RFE32_DLOEV_DTST_SIG_VAR_PH_TDCCORR            0x14UL
#define RFE32_DLOEV_DTST_SIG_VAR_PH_COMP_PHERR_TDCSTOP 0x15UL
#define RFE32_DLOEV_DTST_SIG_VAR_TDCSTOP_PHERR         0x16UL
#define RFE32_DLOEV_DTST_SIG_VAR_TDCSTOP_STATUS_TDC    0x17UL
#define RFE32_DLOEV_DTST_SIG_VAR_MPX_CAN               0x18UL
#define RFE32_DLOEV_DTST_SIG_VAR_LOCK_FINECODE         0x19UL
#define RFE32_DLOEV_DTST_SIG_VAR_LOOP_UPD_FINECODE     0x1AUL
#define RFE32_DLOEV_DTST_SIG_VAR_NC_11                 0x1BUL
#define RFE32_DLOEV_DTST_SIG_VAR_NC_12                 0x1CUL
#define RFE32_DLOEV_DTST_SIG_VAR_NC_13                 0x1DUL
#define RFE32_DLOEV_DTST_SIG_VAR_NC_14                 0x1EUL
#define RFE32_DLOEV_DTST_SIG_VAR_NC_15                 0x1FUL
// --------------------------------------------------------------
// FDCOSPANLSB_DTSTRD
// 
#define RFE32_FDCOSPANLSB_DTSTRD_ADR (RFE32_BASE + 0x00DCUL)
static volatile unsigned long* const SP_RFE32_FDCOSPANLSB_DTSTRD = (unsigned long*) RFE32_FDCOSPANLSB_DTSTRD_ADR;
#define S_RFE32_FDCOSPANLSB_DTSTRD (*SP_RFE32_FDCOSPANLSB_DTSTRD)
#define RF24_RFE32_O_FDCOSPANLSB_DTSTRD            220
// bitfield: FDCOSPANLSB_DTSTRD_VAL
#define RFE32_FDCOSPANLSB_DTSTRD_VAL                   16UL
#define RF24_RFE32_FDCOSPANLSB_DTSTRD_VAL_S      16UL
#define RFE32_FDCOSPANLSB_DTSTRD_VAL_BM                0xFFFF0000UL
#define RF24_RFE32_FDCOSPANLSB_DTSTRD_VAL_M      0xFFFF0000UL
// enums for bitfield FDCOSPANLSB_DTSTRD_VAL (width: 16)UL
#define RFE32_FDCOSPANLSB_DTSTRD_VAL_ALLZEROS          0x0000UL
#define RFE32_FDCOSPANLSB_DTSTRD_VAL_ALLONES           0xFFFFUL
// bitfield: FDCOSPANLSB_DTSTRD_DATA
#define RFE32_FDCOSPANLSB_DTSTRD_DATA                  0UL
#define RF24_RFE32_FDCOSPANLSB_DTSTRD_DATA_S     0UL
#define RFE32_FDCOSPANLSB_DTSTRD_DATA_BM               0x0000FFFFUL
#define RF24_RFE32_FDCOSPANLSB_DTSTRD_DATA_M     0x0000FFFFUL
// enums for bitfield FDCOSPANLSB_DTSTRD_DATA (width: 16)UL
#define RFE32_FDCOSPANLSB_DTSTRD_DATA_ALLZEROS         0x0000UL
#define RFE32_FDCOSPANLSB_DTSTRD_DATA_ALLONES          0xFFFFUL
// --------------------------------------------------------------
// TDCCAL_FDCOSPANMSB
// 
#define RFE32_TDCCAL_FDCOSPANMSB_ADR (RFE32_BASE + 0x00E0UL)
static volatile unsigned long* const SP_RFE32_TDCCAL_FDCOSPANMSB = (unsigned long*) RFE32_TDCCAL_FDCOSPANMSB_ADR;
#define S_RFE32_TDCCAL_FDCOSPANMSB (*SP_RFE32_TDCCAL_FDCOSPANMSB)
#define RF24_RFE32_O_TDCCAL_FDCOSPANMSB            224
// bitfield: TDCCAL_FDCOSPANMSB_TDCCAL_VAL
#define RFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL            16UL
#define RF24_RFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_S 16UL
#define RFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_BM         0xFFFF0000UL
#define RF24_RFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_M 0xFFFF0000UL
// enums for bitfield TDCCAL_FDCOSPANMSB_TDCCAL_VAL (width: 16)UL
#define RFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_ALLZEROS   0x0000UL
#define RFE32_TDCCAL_FDCOSPANMSB_TDCCAL_VAL_ALLONES    0xFFFFUL
// bitfield: TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL
#define RFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL       0UL
#define RF24_RFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_S 0UL
#define RFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_BM    0x00000007UL
#define RF24_RFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_M 0x00000007UL
// enums for bitfield TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL (width: 3)UL
#define RFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_ALLZEROS 0x0UL
#define RFE32_TDCCAL_FDCOSPANMSB_FDCOSPANMSB_VAL_ALLONES 0x7UL
// --------------------------------------------------------------
// GPI_CALRES
// 
#define RFE32_GPI_CALRES_ADR (RFE32_BASE + 0x00E4UL)
static volatile unsigned long* const SP_RFE32_GPI_CALRES = (unsigned long*) RFE32_GPI_CALRES_ADR;
#define S_RFE32_GPI_CALRES (*SP_RFE32_GPI_CALRES)
#define RF24_RFE32_O_GPI_CALRES                    228
// bitfield: GPI_CALRES_GPI7
#define RFE32_GPI_CALRES_GPI7                          23UL
#define RF24_RFE32_GPI_CALRES_GPI7_S             23UL
#define RFE32_GPI_CALRES_GPI7_BM                       0x00800000UL
#define RF24_RFE32_GPI_CALRES_GPI7_M             0x00800000UL
// enums for bitfield GPI_CALRES_GPI7 (width: 1)UL
#define RFE32_GPI_CALRES_GPI7_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI7_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI6
#define RFE32_GPI_CALRES_GPI6                          22UL
#define RF24_RFE32_GPI_CALRES_GPI6_S             22UL
#define RFE32_GPI_CALRES_GPI6_BM                       0x00400000UL
#define RF24_RFE32_GPI_CALRES_GPI6_M             0x00400000UL
// enums for bitfield GPI_CALRES_GPI6 (width: 1)UL
#define RFE32_GPI_CALRES_GPI6_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI6_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI5
#define RFE32_GPI_CALRES_GPI5                          21UL
#define RF24_RFE32_GPI_CALRES_GPI5_S             21UL
#define RFE32_GPI_CALRES_GPI5_BM                       0x00200000UL
#define RF24_RFE32_GPI_CALRES_GPI5_M             0x00200000UL
// enums for bitfield GPI_CALRES_GPI5 (width: 1)UL
#define RFE32_GPI_CALRES_GPI5_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI5_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI4
#define RFE32_GPI_CALRES_GPI4                          20UL
#define RF24_RFE32_GPI_CALRES_GPI4_S             20UL
#define RFE32_GPI_CALRES_GPI4_BM                       0x00100000UL
#define RF24_RFE32_GPI_CALRES_GPI4_M             0x00100000UL
// enums for bitfield GPI_CALRES_GPI4 (width: 1)UL
#define RFE32_GPI_CALRES_GPI4_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI4_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI3
#define RFE32_GPI_CALRES_GPI3                          19UL
#define RF24_RFE32_GPI_CALRES_GPI3_S             19UL
#define RFE32_GPI_CALRES_GPI3_BM                       0x00080000UL
#define RF24_RFE32_GPI_CALRES_GPI3_M             0x00080000UL
// enums for bitfield GPI_CALRES_GPI3 (width: 1)UL
#define RFE32_GPI_CALRES_GPI3_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI3_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI2
#define RFE32_GPI_CALRES_GPI2                          18UL
#define RF24_RFE32_GPI_CALRES_GPI2_S             18UL
#define RFE32_GPI_CALRES_GPI2_BM                       0x00040000UL
#define RF24_RFE32_GPI_CALRES_GPI2_M             0x00040000UL
// enums for bitfield GPI_CALRES_GPI2 (width: 1)UL
#define RFE32_GPI_CALRES_GPI2_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI2_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI1
#define RFE32_GPI_CALRES_GPI1                          17UL
#define RF24_RFE32_GPI_CALRES_GPI1_S             17UL
#define RFE32_GPI_CALRES_GPI1_BM                       0x00020000UL
#define RF24_RFE32_GPI_CALRES_GPI1_M             0x00020000UL
// enums for bitfield GPI_CALRES_GPI1 (width: 1)UL
#define RFE32_GPI_CALRES_GPI1_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI1_ONE                      0x1UL
// bitfield: GPI_CALRES_GPI0
#define RFE32_GPI_CALRES_GPI0                          16UL
#define RF24_RFE32_GPI_CALRES_GPI0_S             16UL
#define RFE32_GPI_CALRES_GPI0_BM                       0x00010000UL
#define RF24_RFE32_GPI_CALRES_GPI0_M             0x00010000UL
// enums for bitfield GPI_CALRES_GPI0 (width: 1)UL
#define RFE32_GPI_CALRES_GPI0_ZERO                     0x0UL
#define RFE32_GPI_CALRES_GPI0_ONE                      0x1UL
// bitfield: GPI_CALRES_MIDCODE
#define RFE32_GPI_CALRES_MIDCODE                       4UL
#define RF24_RFE32_GPI_CALRES_MIDCODE_S          4UL
#define RFE32_GPI_CALRES_MIDCODE_BM                    0x000003F0UL
#define RF24_RFE32_GPI_CALRES_MIDCODE_M          0x000003F0UL
// enums for bitfield GPI_CALRES_MIDCODE (width: 6)UL
#define RFE32_GPI_CALRES_MIDCODE_ALLZEROS              0x00UL
#define RFE32_GPI_CALRES_MIDCODE_ALLONES               0x3FUL
// bitfield: GPI_CALRES_CRSCODE
#define RFE32_GPI_CALRES_CRSCODE                       0UL
#define RF24_RFE32_GPI_CALRES_CRSCODE_S          0UL
#define RFE32_GPI_CALRES_CRSCODE_BM                    0x0000000FUL
#define RF24_RFE32_GPI_CALRES_CRSCODE_M          0x0000000FUL
// enums for bitfield GPI_CALRES_CRSCODE (width: 4)UL
#define RFE32_GPI_CALRES_CRSCODE_ALLZEROS              0x0UL
#define RFE32_GPI_CALRES_CRSCODE_ALLONES               0xFUL
// --------------------------------------------------------------
// LIN2LOGOUT_MATHACCELIN
// 
#define RFE32_LIN2LOGOUT_MATHACCELIN_ADR (RFE32_BASE + 0x00E8UL)
static volatile unsigned long* const SP_RFE32_LIN2LOGOUT_MATHACCELIN = (unsigned long*) RFE32_LIN2LOGOUT_MATHACCELIN_ADR;
#define S_RFE32_LIN2LOGOUT_MATHACCELIN (*SP_RFE32_LIN2LOGOUT_MATHACCELIN)
#define RF24_RFE32_O_LIN2LOGOUT_MATHACCELIN        232
// bitfield: LIN2LOGOUT_MATHACCELIN_LOGVAL
#define RFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL            16UL
#define RF24_RFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_S 16UL
#define RFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_BM         0x007F0000UL
#define RF24_RFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_M 0x007F0000UL
// enums for bitfield LIN2LOGOUT_MATHACCELIN_LOGVAL (width: 7)UL
#define RFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_ALLZEROS   0x00UL
#define RFE32_LIN2LOGOUT_MATHACCELIN_LOGVAL_ALLONES    0x7FUL
// bitfield: LIN2LOGOUT_MATHACCELIN_VAL
#define RFE32_LIN2LOGOUT_MATHACCELIN_VAL               0UL
#define RF24_RFE32_LIN2LOGOUT_MATHACCELIN_VAL_S  0UL
#define RFE32_LIN2LOGOUT_MATHACCELIN_VAL_BM            0x0000FFFFUL
#define RF24_RFE32_LIN2LOGOUT_MATHACCELIN_VAL_M  0x0000FFFFUL
// enums for bitfield LIN2LOGOUT_MATHACCELIN_VAL (width: 16)UL
#define RFE32_LIN2LOGOUT_MATHACCELIN_VAL_ALLZEROS      0x0000UL
#define RFE32_LIN2LOGOUT_MATHACCELIN_VAL_ALLONES       0xFFFFUL
// --------------------------------------------------------------
// TIMCTL_DIVBY3OUT
// 
#define RFE32_TIMCTL_DIVBY3OUT_ADR (RFE32_BASE + 0x00ECUL)
static volatile unsigned long* const SP_RFE32_TIMCTL_DIVBY3OUT = (unsigned long*) RFE32_TIMCTL_DIVBY3OUT_ADR;
#define S_RFE32_TIMCTL_DIVBY3OUT (*SP_RFE32_TIMCTL_DIVBY3OUT)
#define RF24_RFE32_O_TIMCTL_DIVBY3OUT              236
// bitfield: TIMCTL_DIVBY3OUT_CPTSRC
#define RFE32_TIMCTL_DIVBY3OUT_CPTSRC                  24UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CPTSRC_S     24UL
#define RFE32_TIMCTL_DIVBY3OUT_CPTSRC_BM               0x3F000000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CPTSRC_M     0x3F000000UL
// enums for bitfield TIMCTL_DIVBY3OUT_CPTSRC (width: 6)UL
#define RFE32_TIMCTL_DIVBY3OUT_CPTSRC_ALLZEROS         0x00UL
#define RFE32_TIMCTL_DIVBY3OUT_CPTSRC_ALLONES          0x3FUL
// bitfield: TIMCTL_DIVBY3OUT_CPTCTL
#define RFE32_TIMCTL_DIVBY3OUT_CPTCTL                  23UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CPTCTL_S     23UL
#define RFE32_TIMCTL_DIVBY3OUT_CPTCTL_BM               0x00800000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CPTCTL_M     0x00800000UL
// enums for bitfield TIMCTL_DIVBY3OUT_CPTCTL (width: 1)UL
#define RFE32_TIMCTL_DIVBY3OUT_CPTCTL_DIS              0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_CPTCTL_EN               0x1UL
// bitfield: TIMCTL_DIVBY3OUT_CNTRSRC
#define RFE32_TIMCTL_DIVBY3OUT_CNTRSRC                 21UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_S    21UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_BM              0x00600000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_M    0x00600000UL
// enums for bitfield TIMCTL_DIVBY3OUT_CNTRSRC (width: 2)UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_CLK             0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_MAGN0           0x1UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_MAGN1           0x2UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRSRC_FREF            0x3UL
// bitfield: TIMCTL_DIVBY3OUT_CNTRCLR
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCLR                 20UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CNTRCLR_S    20UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCLR_BM              0x00100000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CNTRCLR_M    0x00100000UL
// enums for bitfield TIMCTL_DIVBY3OUT_CNTRCLR (width: 1)UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCLR_ZERO            0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCLR_ONE             0x1UL
// bitfield: TIMCTL_DIVBY3OUT_CNTRCTL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCTL                 19UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CNTRCTL_S    19UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCTL_BM              0x00080000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_CNTRCTL_M    0x00080000UL
// enums for bitfield TIMCTL_DIVBY3OUT_CNTRCTL (width: 1)UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCTL_DIS             0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_CNTRCTL_EN              0x1UL
// bitfield: TIMCTL_DIVBY3OUT_TIMSRC
#define RFE32_TIMCTL_DIVBY3OUT_TIMSRC                  17UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_TIMSRC_S     17UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMSRC_BM               0x00060000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_TIMSRC_M     0x00060000UL
// enums for bitfield TIMCTL_DIVBY3OUT_TIMSRC (width: 2)UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMSRC_CLK              0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMSRC_MAGN0            0x1UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMSRC_MAGN1            0x2UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMSRC_FREF             0x3UL
// bitfield: TIMCTL_DIVBY3OUT_TIMCTL
#define RFE32_TIMCTL_DIVBY3OUT_TIMCTL                  16UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_TIMCTL_S     16UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMCTL_BM               0x00010000UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_TIMCTL_M     0x00010000UL
// enums for bitfield TIMCTL_DIVBY3OUT_TIMCTL (width: 1)UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMCTL_DIS              0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_TIMCTL_EN               0x1UL
// bitfield: TIMCTL_DIVBY3OUT_DIV3
#define RFE32_TIMCTL_DIVBY3OUT_DIV3                    0UL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_DIV3_S       0UL
#define RFE32_TIMCTL_DIVBY3OUT_DIV3_BM                 0x0000000FUL
#define RF24_RFE32_TIMCTL_DIVBY3OUT_DIV3_M       0x0000000FUL
// enums for bitfield TIMCTL_DIVBY3OUT_DIV3 (width: 4)UL
#define RFE32_TIMCTL_DIVBY3OUT_DIV3_ALLZEROS           0x0UL
#define RFE32_TIMCTL_DIVBY3OUT_DIV3_ALLONES            0xFUL
// --------------------------------------------------------------
// TIMPER_TIMINC
// 
#define RFE32_TIMPER_TIMINC_ADR (RFE32_BASE + 0x00F0UL)
static volatile unsigned long* const SP_RFE32_TIMPER_TIMINC = (unsigned long*) RFE32_TIMPER_TIMINC_ADR;
#define S_RFE32_TIMPER_TIMINC (*SP_RFE32_TIMPER_TIMINC)
#define RF24_RFE32_O_TIMPER_TIMINC                 240
// bitfield: TIMPER_TIMINC_TIMPER_VAL
#define RFE32_TIMPER_TIMINC_TIMPER_VAL                 16UL
#define RF24_RFE32_TIMPER_TIMINC_TIMPER_VAL_S    16UL
#define RFE32_TIMPER_TIMINC_TIMPER_VAL_BM              0xFFFF0000UL
#define RF24_RFE32_TIMPER_TIMINC_TIMPER_VAL_M    0xFFFF0000UL
// enums for bitfield TIMPER_TIMINC_TIMPER_VAL (width: 16)UL
#define RFE32_TIMPER_TIMINC_TIMPER_VAL_ALLZEROS        0x0000UL
#define RFE32_TIMPER_TIMINC_TIMPER_VAL_ALLONES         0xFFFFUL
// bitfield: TIMPER_TIMINC_TIMINC_VAL
#define RFE32_TIMPER_TIMINC_TIMINC_VAL                 0UL
#define RF24_RFE32_TIMPER_TIMINC_TIMINC_VAL_S    0UL
#define RFE32_TIMPER_TIMINC_TIMINC_VAL_BM              0x0000FFFFUL
#define RF24_RFE32_TIMPER_TIMINC_TIMINC_VAL_M    0x0000FFFFUL
// enums for bitfield TIMPER_TIMINC_TIMINC_VAL (width: 16)UL
#define RFE32_TIMPER_TIMINC_TIMINC_VAL_ALLZEROS        0x0000UL
#define RFE32_TIMPER_TIMINC_TIMINC_VAL_ALLONES         0xFFFFUL
// --------------------------------------------------------------
// TIMCAPT_TIMCNT
// 
#define RFE32_TIMCAPT_TIMCNT_ADR (RFE32_BASE + 0x00F4UL)
static volatile unsigned long* const SP_RFE32_TIMCAPT_TIMCNT = (unsigned long*) RFE32_TIMCAPT_TIMCNT_ADR;
#define S_RFE32_TIMCAPT_TIMCNT (*SP_RFE32_TIMCAPT_TIMCNT)
#define RF24_RFE32_O_TIMCAPT_TIMCNT                244
// bitfield: TIMCAPT_TIMCNT_VALUE
#define RFE32_TIMCAPT_TIMCNT_VALUE                     16UL
#define RF24_RFE32_TIMCAPT_TIMCNT_VALUE_S        16UL
#define RFE32_TIMCAPT_TIMCNT_VALUE_BM                  0xFFFF0000UL
#define RF24_RFE32_TIMCAPT_TIMCNT_VALUE_M        0xFFFF0000UL
// enums for bitfield TIMCAPT_TIMCNT_VALUE (width: 16)UL
#define RFE32_TIMCAPT_TIMCNT_VALUE_ALLZEROS            0x0000UL
#define RFE32_TIMCAPT_TIMCNT_VALUE_ALLONES             0xFFFFUL
// bitfield: TIMCAPT_TIMCNT_VAL
#define RFE32_TIMCAPT_TIMCNT_VAL                       0UL
#define RF24_RFE32_TIMCAPT_TIMCNT_VAL_S          0UL
#define RFE32_TIMCAPT_TIMCNT_VAL_BM                    0x0000FFFFUL
#define RF24_RFE32_TIMCAPT_TIMCNT_VAL_M          0x0000FFFFUL
// enums for bitfield TIMCAPT_TIMCNT_VAL (width: 16)UL
#define RFE32_TIMCAPT_TIMCNT_VAL_ALLZEROS              0x0000UL
#define RFE32_TIMCAPT_TIMCNT_VAL_ALLONES               0xFFFFUL
// --------------------------------------------------------------
// TRCSTAT_TRCCTRL
// 
#define RFE32_TRCSTAT_TRCCTRL_ADR (RFE32_BASE + 0x00F8UL)
static volatile unsigned long* const SP_RFE32_TRCSTAT_TRCCTRL = (unsigned long*) RFE32_TRCSTAT_TRCCTRL_ADR;
#define S_RFE32_TRCSTAT_TRCCTRL (*SP_RFE32_TRCSTAT_TRCCTRL)
#define RF24_RFE32_O_TRCSTAT_TRCCTRL               248
// bitfield: TRCSTAT_TRCCTRL_BUSY
#define RFE32_TRCSTAT_TRCCTRL_BUSY                     16UL
#define RF24_RFE32_TRCSTAT_TRCCTRL_BUSY_S        16UL
#define RFE32_TRCSTAT_TRCCTRL_BUSY_BM                  0x00010000UL
#define RF24_RFE32_TRCSTAT_TRCCTRL_BUSY_M        0x00010000UL
// enums for bitfield TRCSTAT_TRCCTRL_BUSY (width: 1)UL
#define RFE32_TRCSTAT_TRCCTRL_BUSY_ZERO                0x0UL
#define RFE32_TRCSTAT_TRCCTRL_BUSY_ONE                 0x1UL
// bitfield: TRCSTAT_TRCCTRL_SEND
#define RFE32_TRCSTAT_TRCCTRL_SEND                     0UL
#define RF24_RFE32_TRCSTAT_TRCCTRL_SEND_S        0UL
#define RFE32_TRCSTAT_TRCCTRL_SEND_BM                  0x00000001UL
#define RF24_RFE32_TRCSTAT_TRCCTRL_SEND_M        0x00000001UL
// enums for bitfield TRCSTAT_TRCCTRL_SEND (width: 1)UL
#define RFE32_TRCSTAT_TRCCTRL_SEND_ZERO                0x0UL
#define RFE32_TRCSTAT_TRCCTRL_SEND_ONE                 0x1UL
// --------------------------------------------------------------
// TRCPAR0_TRCCMD
// 
#define RFE32_TRCPAR0_TRCCMD_ADR (RFE32_BASE + 0x00FCUL)
static volatile unsigned long* const SP_RFE32_TRCPAR0_TRCCMD = (unsigned long*) RFE32_TRCPAR0_TRCCMD_ADR;
#define S_RFE32_TRCPAR0_TRCCMD (*SP_RFE32_TRCPAR0_TRCCMD)
#define RF24_RFE32_O_TRCPAR0_TRCCMD                252
// bitfield: TRCPAR0_TRCCMD_VAL
#define RFE32_TRCPAR0_TRCCMD_VAL                       16UL
#define RF24_RFE32_TRCPAR0_TRCCMD_VAL_S          16UL
#define RFE32_TRCPAR0_TRCCMD_VAL_BM                    0xFFFF0000UL
#define RF24_RFE32_TRCPAR0_TRCCMD_VAL_M          0xFFFF0000UL
// enums for bitfield TRCPAR0_TRCCMD_VAL (width: 16)UL
#define RFE32_TRCPAR0_TRCCMD_VAL_ALLZEROS              0x0000UL
#define RFE32_TRCPAR0_TRCCMD_VAL_ALLONES               0xFFFFUL
// bitfield: TRCPAR0_TRCCMD_PARCNT
#define RFE32_TRCPAR0_TRCCMD_PARCNT                    8UL
#define RF24_RFE32_TRCPAR0_TRCCMD_PARCNT_S       8UL
#define RFE32_TRCPAR0_TRCCMD_PARCNT_BM                 0x00000300UL
#define RF24_RFE32_TRCPAR0_TRCCMD_PARCNT_M       0x00000300UL
// enums for bitfield TRCPAR0_TRCCMD_PARCNT (width: 2)UL
#define RFE32_TRCPAR0_TRCCMD_PARCNT_ALLZEROS           0x0UL
#define RFE32_TRCPAR0_TRCCMD_PARCNT_ALLONES            0x3UL
// bitfield: TRCPAR0_TRCCMD_PKTHDR
#define RFE32_TRCPAR0_TRCCMD_PKTHDR                    0UL
#define RF24_RFE32_TRCPAR0_TRCCMD_PKTHDR_S       0UL
#define RFE32_TRCPAR0_TRCCMD_PKTHDR_BM                 0x000000FFUL
#define RF24_RFE32_TRCPAR0_TRCCMD_PKTHDR_M       0x000000FFUL
// enums for bitfield TRCPAR0_TRCCMD_PKTHDR (width: 8)UL
#define RFE32_TRCPAR0_TRCCMD_PKTHDR_ALLZEROS           0x00UL
#define RFE32_TRCPAR0_TRCCMD_PKTHDR_ALLONES            0xFFUL
// --------------------------------------------------------------
// GPOCTL_TRCPAR1
// 
#define RFE32_GPOCTL_TRCPAR1_ADR (RFE32_BASE + 0x0100UL)
static volatile unsigned long* const SP_RFE32_GPOCTL_TRCPAR1 = (unsigned long*) RFE32_GPOCTL_TRCPAR1_ADR;
#define S_RFE32_GPOCTL_TRCPAR1 (*SP_RFE32_GPOCTL_TRCPAR1)
#define RF24_RFE32_O_GPOCTL_TRCPAR1                256
// bitfield: GPOCTL_TRCPAR1_SEL7
#define RFE32_GPOCTL_TRCPAR1_SEL7                      31UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL7_S         31UL
#define RFE32_GPOCTL_TRCPAR1_SEL7_BM                   0x80000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL7_M         0x80000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL7 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL7_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL7_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL6
#define RFE32_GPOCTL_TRCPAR1_SEL6                      30UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL6_S         30UL
#define RFE32_GPOCTL_TRCPAR1_SEL6_BM                   0x40000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL6_M         0x40000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL6 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL6_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL6_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL5
#define RFE32_GPOCTL_TRCPAR1_SEL5                      29UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL5_S         29UL
#define RFE32_GPOCTL_TRCPAR1_SEL5_BM                   0x20000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL5_M         0x20000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL5 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL5_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL5_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL4
#define RFE32_GPOCTL_TRCPAR1_SEL4                      28UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL4_S         28UL
#define RFE32_GPOCTL_TRCPAR1_SEL4_BM                   0x10000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL4_M         0x10000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL4 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL4_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL4_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL3
#define RFE32_GPOCTL_TRCPAR1_SEL3                      27UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL3_S         27UL
#define RFE32_GPOCTL_TRCPAR1_SEL3_BM                   0x08000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL3_M         0x08000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL3 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL3_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL3_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL2
#define RFE32_GPOCTL_TRCPAR1_SEL2                      26UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL2_S         26UL
#define RFE32_GPOCTL_TRCPAR1_SEL2_BM                   0x04000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL2_M         0x04000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL2 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL2_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL2_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL1
#define RFE32_GPOCTL_TRCPAR1_SEL1                      25UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL1_S         25UL
#define RFE32_GPOCTL_TRCPAR1_SEL1_BM                   0x02000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL1_M         0x02000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL1 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL1_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL1_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_SEL0
#define RFE32_GPOCTL_TRCPAR1_SEL0                      24UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL0_S         24UL
#define RFE32_GPOCTL_TRCPAR1_SEL0_BM                   0x01000000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_SEL0_M         0x01000000UL
// enums for bitfield GPOCTL_TRCPAR1_SEL0 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_SEL0_SW                   0x0UL
#define RFE32_GPOCTL_TRCPAR1_SEL0_HW                   0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO7
#define RFE32_GPOCTL_TRCPAR1_GPO7                      23UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO7_S         23UL
#define RFE32_GPOCTL_TRCPAR1_GPO7_BM                   0x00800000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO7_M         0x00800000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO7 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO7_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO7_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO6
#define RFE32_GPOCTL_TRCPAR1_GPO6                      22UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO6_S         22UL
#define RFE32_GPOCTL_TRCPAR1_GPO6_BM                   0x00400000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO6_M         0x00400000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO6 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO6_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO6_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO5
#define RFE32_GPOCTL_TRCPAR1_GPO5                      21UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO5_S         21UL
#define RFE32_GPOCTL_TRCPAR1_GPO5_BM                   0x00200000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO5_M         0x00200000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO5 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO5_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO5_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO4
#define RFE32_GPOCTL_TRCPAR1_GPO4                      20UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO4_S         20UL
#define RFE32_GPOCTL_TRCPAR1_GPO4_BM                   0x00100000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO4_M         0x00100000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO4 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO4_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO4_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO3
#define RFE32_GPOCTL_TRCPAR1_GPO3                      19UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO3_S         19UL
#define RFE32_GPOCTL_TRCPAR1_GPO3_BM                   0x00080000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO3_M         0x00080000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO3 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO3_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO3_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO2
#define RFE32_GPOCTL_TRCPAR1_GPO2                      18UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO2_S         18UL
#define RFE32_GPOCTL_TRCPAR1_GPO2_BM                   0x00040000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO2_M         0x00040000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO2 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO2_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO2_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO1
#define RFE32_GPOCTL_TRCPAR1_GPO1                      17UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO1_S         17UL
#define RFE32_GPOCTL_TRCPAR1_GPO1_BM                   0x00020000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO1_M         0x00020000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO1 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO1_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO1_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_GPO0
#define RFE32_GPOCTL_TRCPAR1_GPO0                      16UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO0_S         16UL
#define RFE32_GPOCTL_TRCPAR1_GPO0_BM                   0x00010000UL
#define RF24_RFE32_GPOCTL_TRCPAR1_GPO0_M         0x00010000UL
// enums for bitfield GPOCTL_TRCPAR1_GPO0 (width: 1)UL
#define RFE32_GPOCTL_TRCPAR1_GPO0_ZERO                 0x0UL
#define RFE32_GPOCTL_TRCPAR1_GPO0_ONE                  0x1UL
// bitfield: GPOCTL_TRCPAR1_VAL
#define RFE32_GPOCTL_TRCPAR1_VAL                       0UL
#define RF24_RFE32_GPOCTL_TRCPAR1_VAL_S          0UL
#define RFE32_GPOCTL_TRCPAR1_VAL_BM                    0x0000FFFFUL
#define RF24_RFE32_GPOCTL_TRCPAR1_VAL_M          0x0000FFFFUL
// enums for bitfield GPOCTL_TRCPAR1_VAL (width: 16)UL
#define RFE32_GPOCTL_TRCPAR1_VAL_ALLZEROS              0x0000UL
#define RFE32_GPOCTL_TRCPAR1_VAL_ALLONES               0xFFFFUL
// --------------------------------------------------------------
// DIVCTL_ANAISOCTL
// 
#define RFE32_DIVCTL_ANAISOCTL_ADR (RFE32_BASE + 0x0104UL)
static volatile unsigned long* const SP_RFE32_DIVCTL_ANAISOCTL = (unsigned long*) RFE32_DIVCTL_ANAISOCTL_ADR;
#define S_RFE32_DIVCTL_ANAISOCTL (*SP_RFE32_DIVCTL_ANAISOCTL)
#define RF24_RFE32_O_DIVCTL_ANAISOCTL              260
// bitfield: DIVCTL_ANAISOCTL_DIV2PH180
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH180               31UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH180_S  31UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH180_BM            0x80000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH180_M  0x80000000UL
// enums for bitfield DIVCTL_ANAISOCTL_DIV2PH180 (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH180_DIS           0x0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH180_EN            0x1UL
// bitfield: DIVCTL_ANAISOCTL_DIV2PH0
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH0                 30UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH0_S    30UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH0_BM              0x40000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH0_M    0x40000000UL
// enums for bitfield DIVCTL_ANAISOCTL_DIV2PH0 (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH0_DIS             0x0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH0_EN              0x1UL
// bitfield: DIVCTL_ANAISOCTL_DIV2PH270
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH270               29UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH270_S  29UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH270_BM            0x20000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH270_M  0x20000000UL
// enums for bitfield DIVCTL_ANAISOCTL_DIV2PH270 (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH270_DIS           0x0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH270_EN            0x1UL
// bitfield: DIVCTL_ANAISOCTL_DIV2PH90
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH90                28UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH90_S   28UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH90_BM             0x10000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2PH90_M   0x10000000UL
// enums for bitfield DIVCTL_ANAISOCTL_DIV2PH90 (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH90_DIS            0x0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2PH90_EN             0x1UL
// bitfield: DIVCTL_ANAISOCTL_SPARE11
#define RFE32_DIVCTL_ANAISOCTL_SPARE11                 27UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_SPARE11_S    27UL
#define RFE32_DIVCTL_ANAISOCTL_SPARE11_BM              0x08000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_SPARE11_M    0x08000000UL
// enums for bitfield DIVCTL_ANAISOCTL_SPARE11 (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_SPARE11_ZERO            0x0UL
#define RFE32_DIVCTL_ANAISOCTL_SPARE11_ONE             0x1UL
// bitfield: DIVCTL_ANAISOCTL_S1G20DBMMUX
#define RFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX             26UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_S 26UL
#define RFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_BM          0x04000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_M 0x04000000UL
// enums for bitfield DIVCTL_ANAISOCTL_S1G20DBMMUX (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_ENABLEN     0x0UL
#define RFE32_DIVCTL_ANAISOCTL_S1G20DBMMUX_DISABLE     0x1UL
// bitfield: DIVCTL_ANAISOCTL_ADCDIV
#define RFE32_DIVCTL_ANAISOCTL_ADCDIV                  25UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_ADCDIV_S     25UL
#define RFE32_DIVCTL_ANAISOCTL_ADCDIV_BM               0x02000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_ADCDIV_M     0x02000000UL
// enums for bitfield DIVCTL_ANAISOCTL_ADCDIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_ADCDIV_DIS              0x0UL
#define RFE32_DIVCTL_ANAISOCTL_ADCDIV_EN               0x1UL
// bitfield: DIVCTL_ANAISOCTL_ENSYNTH
#define RFE32_DIVCTL_ANAISOCTL_ENSYNTH                 24UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_ENSYNTH_S    24UL
#define RFE32_DIVCTL_ANAISOCTL_ENSYNTH_BM              0x01000000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_ENSYNTH_M    0x01000000UL
// enums for bitfield DIVCTL_ANAISOCTL_ENSYNTH (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_ENSYNTH_DIS             0x0UL
#define RFE32_DIVCTL_ANAISOCTL_ENSYNTH_EN              0x1UL
// bitfield: DIVCTL_ANAISOCTL_TXPH18020DBMDIV
#define RFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV         23UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_S 23UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_BM      0x00800000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_M 0x00800000UL
// enums for bitfield DIVCTL_ANAISOCTL_TXPH18020DBMDIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_DIS     0x0UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH18020DBMDIV_EN      0x1UL
// bitfield: DIVCTL_ANAISOCTL_TXPH020DBMDIV
#define RFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV           22UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_S 22UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_BM        0x00400000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_M 0x00400000UL
// enums for bitfield DIVCTL_ANAISOCTL_TXPH020DBMDIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_DIS       0x0UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH020DBMDIV_EN        0x1UL
// bitfield: DIVCTL_ANAISOCTL_TXPH180DIV
#define RFE32_DIVCTL_ANAISOCTL_TXPH180DIV              21UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH180DIV_S 21UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH180DIV_BM           0x00200000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH180DIV_M 0x00200000UL
// enums for bitfield DIVCTL_ANAISOCTL_TXPH180DIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH180DIV_DIS          0x0UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH180DIV_EN           0x1UL
// bitfield: DIVCTL_ANAISOCTL_TXPH0DIV
#define RFE32_DIVCTL_ANAISOCTL_TXPH0DIV                20UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH0DIV_S   20UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH0DIV_BM             0x00100000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_TXPH0DIV_M   0x00100000UL
// enums for bitfield DIVCTL_ANAISOCTL_TXPH0DIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH0DIV_DIS            0x0UL
#define RFE32_DIVCTL_ANAISOCTL_TXPH0DIV_EN             0x1UL
// bitfield: DIVCTL_ANAISOCTL_RXPH90DIV
#define RFE32_DIVCTL_ANAISOCTL_RXPH90DIV               19UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_RXPH90DIV_S  19UL
#define RFE32_DIVCTL_ANAISOCTL_RXPH90DIV_BM            0x00080000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_RXPH90DIV_M  0x00080000UL
// enums for bitfield DIVCTL_ANAISOCTL_RXPH90DIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_RXPH90DIV_DIS           0x0UL
#define RFE32_DIVCTL_ANAISOCTL_RXPH90DIV_EN            0x1UL
// bitfield: DIVCTL_ANAISOCTL_RXPH0DIV
#define RFE32_DIVCTL_ANAISOCTL_RXPH0DIV                18UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_RXPH0DIV_S   18UL
#define RFE32_DIVCTL_ANAISOCTL_RXPH0DIV_BM             0x00040000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_RXPH0DIV_M   0x00040000UL
// enums for bitfield DIVCTL_ANAISOCTL_RXPH0DIV (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_RXPH0DIV_DIS            0x0UL
#define RFE32_DIVCTL_ANAISOCTL_RXPH0DIV_EN             0x1UL
// bitfield: DIVCTL_ANAISOCTL_SPARE1
#define RFE32_DIVCTL_ANAISOCTL_SPARE1                  17UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_SPARE1_S     17UL
#define RFE32_DIVCTL_ANAISOCTL_SPARE1_BM               0x00020000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_SPARE1_M     0x00020000UL
// enums for bitfield DIVCTL_ANAISOCTL_SPARE1 (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_SPARE1_ZERO             0x0UL
#define RFE32_DIVCTL_ANAISOCTL_SPARE1_ONE              0x1UL
// bitfield: DIVCTL_ANAISOCTL_EN
#define RFE32_DIVCTL_ANAISOCTL_EN                      16UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_EN_S         16UL
#define RFE32_DIVCTL_ANAISOCTL_EN_BM                   0x00010000UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_EN_M         0x00010000UL
// enums for bitfield DIVCTL_ANAISOCTL_EN (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_EN_OFF                  0x0UL
#define RFE32_DIVCTL_ANAISOCTL_EN_ON                   0x1UL
// bitfield: DIVCTL_ANAISOCTL_ADCDIGRSTN
#define RFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN              4UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_S 4UL
#define RFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_BM           0x00000010UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_M 0x00000010UL
// enums for bitfield DIVCTL_ANAISOCTL_ADCDIGRSTN (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_ACTIVE       0x1UL
#define RFE32_DIVCTL_ANAISOCTL_ADCDIGRSTN_RESET        0x0UL
// bitfield: DIVCTL_ANAISOCTL_IFADC2SVTISO
#define RFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO            3UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_S 3UL
#define RFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_BM         0x00000008UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_M 0x00000008UL
// enums for bitfield DIVCTL_ANAISOCTL_IFADC2SVTISO (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_CONNECT    0x0UL
#define RFE32_DIVCTL_ANAISOCTL_IFADC2SVTISO_ISOLATE    0x1UL
// bitfield: DIVCTL_ANAISOCTL_DIV2IFADCISO
#define RFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO            2UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_S 2UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_BM         0x00000004UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_M 0x00000004UL
// enums for bitfield DIVCTL_ANAISOCTL_DIV2IFADCISO (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_CONNECT    0x0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2IFADCISO_ISOLATE    0x1UL
// bitfield: DIVCTL_ANAISOCTL_MTDC2SVTISO
#define RFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO             1UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_S 1UL
#define RFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_BM          0x00000002UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_M 0x00000002UL
// enums for bitfield DIVCTL_ANAISOCTL_MTDC2SVTISO (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_CONNECT     0x0UL
#define RFE32_DIVCTL_ANAISOCTL_MTDC2SVTISO_ISOLATE     0x1UL
// bitfield: DIVCTL_ANAISOCTL_DIV2MTDCISO
#define RFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO             0UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_S 0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_BM          0x00000001UL
#define RF24_RFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_M 0x00000001UL
// enums for bitfield DIVCTL_ANAISOCTL_DIV2MTDCISO (width: 1)UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_CONNECT     0x0UL
#define RFE32_DIVCTL_ANAISOCTL_DIV2MTDCISO_ISOLATE     0x1UL
// --------------------------------------------------------------
// MAGNACC0_RXCTRL
// 
#define RFE32_MAGNACC0_RXCTRL_ADR (RFE32_BASE + 0x0108UL)
static volatile unsigned long* const SP_RFE32_MAGNACC0_RXCTRL = (unsigned long*) RFE32_MAGNACC0_RXCTRL_ADR;
#define S_RFE32_MAGNACC0_RXCTRL (*SP_RFE32_MAGNACC0_RXCTRL)
#define RF24_RFE32_O_MAGNACC0_RXCTRL               264
// bitfield: MAGNACC0_RXCTRL_VAL
#define RFE32_MAGNACC0_RXCTRL_VAL                      16UL
#define RF24_RFE32_MAGNACC0_RXCTRL_VAL_S         16UL
#define RFE32_MAGNACC0_RXCTRL_VAL_BM                   0xFFFF0000UL
#define RF24_RFE32_MAGNACC0_RXCTRL_VAL_M         0xFFFF0000UL
// enums for bitfield MAGNACC0_RXCTRL_VAL (width: 16)UL
#define RFE32_MAGNACC0_RXCTRL_VAL_ALLZEROS             0x0000UL
#define RFE32_MAGNACC0_RXCTRL_VAL_ALLONES              0xFFFFUL
// bitfield: MAGNACC0_RXCTRL_SPARE
#define RFE32_MAGNACC0_RXCTRL_SPARE                    12UL
#define RF24_RFE32_MAGNACC0_RXCTRL_SPARE_S       12UL
#define RFE32_MAGNACC0_RXCTRL_SPARE_BM                 0x00001000UL
#define RF24_RFE32_MAGNACC0_RXCTRL_SPARE_M       0x00001000UL
// enums for bitfield MAGNACC0_RXCTRL_SPARE (width: 1)UL
#define RFE32_MAGNACC0_RXCTRL_SPARE_ZERO               0x0UL
#define RFE32_MAGNACC0_RXCTRL_SPARE_ONE                0x1UL
// bitfield: MAGNACC0_RXCTRL_ATTN
#define RFE32_MAGNACC0_RXCTRL_ATTN                     9UL
#define RF24_RFE32_MAGNACC0_RXCTRL_ATTN_S        9UL
#define RFE32_MAGNACC0_RXCTRL_ATTN_BM                  0x00000E00UL
#define RF24_RFE32_MAGNACC0_RXCTRL_ATTN_M        0x00000E00UL
// enums for bitfield MAGNACC0_RXCTRL_ATTN (width: 3)UL
#define RFE32_MAGNACC0_RXCTRL_ATTN_NOATT               0x0UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__18DB               0x6UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__3DB                0x1UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__6DB                0x2UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__9DB                0x3UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__12DB               0x4UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__15DB               0x5UL
#define RFE32_MAGNACC0_RXCTRL_ATTN__21DB               0x7UL
// bitfield: MAGNACC0_RXCTRL_IFAMPGC
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC                  4UL
#define RF24_RFE32_MAGNACC0_RXCTRL_IFAMPGC_S     4UL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_BM               0x000001F0UL
#define RF24_RFE32_MAGNACC0_RXCTRL_IFAMPGC_M     0x000001F0UL
// enums for bitfield MAGNACC0_RXCTRL_IFAMPGC (width: 5)UL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN15DB          0x00UL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN12DB          0x01UL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN9DB           0x03UL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN6DB           0x07UL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_MIN3DB           0x0FUL
#define RFE32_MAGNACC0_RXCTRL_IFAMPGC_MAX              0x1FUL
// bitfield: MAGNACC0_RXCTRL_LNAGAIN
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN                  0UL
#define RF24_RFE32_MAGNACC0_RXCTRL_LNAGAIN_S     0UL
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN_BM               0x0000000FUL
#define RF24_RFE32_MAGNACC0_RXCTRL_LNAGAIN_M     0x0000000FUL
// enums for bitfield MAGNACC0_RXCTRL_LNAGAIN (width: 4)UL
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN_MAX              0xFUL
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN6DB           0x3UL
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN3DB           0x7UL
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN12DB          0x0UL
#define RFE32_MAGNACC0_RXCTRL_LNAGAIN_MIN9DB           0x1UL
// --------------------------------------------------------------
// RSSI_MAGNACC1
// 
#define RFE32_RSSI_MAGNACC1_ADR (RFE32_BASE + 0x010CUL)
static volatile unsigned long* const SP_RFE32_RSSI_MAGNACC1 = (unsigned long*) RFE32_RSSI_MAGNACC1_ADR;
#define S_RFE32_RSSI_MAGNACC1 (*SP_RFE32_RSSI_MAGNACC1)
#define RF24_RFE32_O_RSSI_MAGNACC1                 268
// bitfield: RSSI_MAGNACC1_RSSI_VAL
#define RFE32_RSSI_MAGNACC1_RSSI_VAL                   16UL
#define RF24_RFE32_RSSI_MAGNACC1_RSSI_VAL_S      16UL
#define RFE32_RSSI_MAGNACC1_RSSI_VAL_BM                0x00FF0000UL
#define RF24_RFE32_RSSI_MAGNACC1_RSSI_VAL_M      0x00FF0000UL
// enums for bitfield RSSI_MAGNACC1_RSSI_VAL (width: 8)UL
#define RFE32_RSSI_MAGNACC1_RSSI_VAL_ALLZEROS          0x00UL
#define RFE32_RSSI_MAGNACC1_RSSI_VAL_ALLONES           0xFFUL
// bitfield: RSSI_MAGNACC1_MAGNACC1_VAL
#define RFE32_RSSI_MAGNACC1_MAGNACC1_VAL               0UL
#define RF24_RFE32_RSSI_MAGNACC1_MAGNACC1_VAL_S  0UL
#define RFE32_RSSI_MAGNACC1_MAGNACC1_VAL_BM            0x0000FFFFUL
#define RF24_RFE32_RSSI_MAGNACC1_MAGNACC1_VAL_M  0x0000FFFFUL
// enums for bitfield RSSI_MAGNACC1_MAGNACC1_VAL (width: 16)UL
#define RFE32_RSSI_MAGNACC1_MAGNACC1_VAL_ALLZEROS      0x0000UL
#define RFE32_RSSI_MAGNACC1_MAGNACC1_VAL_ALLONES       0xFFFFUL
// --------------------------------------------------------------
// RFGAIN_RSSIMAX
// 
#define RFE32_RFGAIN_RSSIMAX_ADR (RFE32_BASE + 0x0110UL)
static volatile unsigned long* const SP_RFE32_RFGAIN_RSSIMAX = (unsigned long*) RFE32_RFGAIN_RSSIMAX_ADR;
#define S_RFE32_RFGAIN_RSSIMAX (*SP_RFE32_RFGAIN_RSSIMAX)
#define RF24_RFE32_O_RFGAIN_RSSIMAX                272
// bitfield: RFGAIN_RSSIMAX_DBGAIN
#define RFE32_RFGAIN_RSSIMAX_DBGAIN                    16UL
#define RF24_RFE32_RFGAIN_RSSIMAX_DBGAIN_S       16UL
#define RFE32_RFGAIN_RSSIMAX_DBGAIN_BM                 0x00FF0000UL
#define RF24_RFE32_RFGAIN_RSSIMAX_DBGAIN_M       0x00FF0000UL
// enums for bitfield RFGAIN_RSSIMAX_DBGAIN (width: 8)UL
#define RFE32_RFGAIN_RSSIMAX_DBGAIN_ALLZEROS           0x00UL
#define RFE32_RFGAIN_RSSIMAX_DBGAIN_ALLONES            0xFFUL
// bitfield: RFGAIN_RSSIMAX_VAL
#define RFE32_RFGAIN_RSSIMAX_VAL                       0UL
#define RF24_RFE32_RFGAIN_RSSIMAX_VAL_S          0UL
#define RFE32_RFGAIN_RSSIMAX_VAL_BM                    0x000000FFUL
#define RF24_RFE32_RFGAIN_RSSIMAX_VAL_M          0x000000FFUL
// enums for bitfield RFGAIN_RSSIMAX_VAL (width: 8)UL
#define RFE32_RFGAIN_RSSIMAX_VAL_ALLZEROS              0x00UL
#define RFE32_RFGAIN_RSSIMAX_VAL_ALLONES               0xFFUL
// --------------------------------------------------------------
// DIVSTA_IFADCSTAT
// 
#define RFE32_DIVSTA_IFADCSTAT_ADR (RFE32_BASE + 0x0114UL)
static volatile unsigned long* const SP_RFE32_DIVSTA_IFADCSTAT = (unsigned long*) RFE32_DIVSTA_IFADCSTAT_ADR;
#define S_RFE32_DIVSTA_IFADCSTAT (*SP_RFE32_DIVSTA_IFADCSTAT)
#define RF24_RFE32_O_DIVSTA_IFADCSTAT              276
// bitfield: DIVSTA_IFADCSTAT_STAT
#define RFE32_DIVSTA_IFADCSTAT_STAT                    16UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_STAT_S       16UL
#define RFE32_DIVSTA_IFADCSTAT_STAT_BM                 0x00010000UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_STAT_M       0x00010000UL
// enums for bitfield DIVSTA_IFADCSTAT_STAT (width: 1)UL
#define RFE32_DIVSTA_IFADCSTAT_STAT_IDLE               0x0UL
#define RFE32_DIVSTA_IFADCSTAT_STAT_BUSY               0x1UL
// bitfield: DIVSTA_IFADCSTAT_RESERVED7
#define RFE32_DIVSTA_IFADCSTAT_RESERVED7               7UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_RESERVED7_S  7UL
#define RFE32_DIVSTA_IFADCSTAT_RESERVED7_BM            0x00000080UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_RESERVED7_M  0x00000080UL
// enums for bitfield DIVSTA_IFADCSTAT_RESERVED7 (width: 1)UL
#define RFE32_DIVSTA_IFADCSTAT_RESERVED7_ZERO          0x0UL
#define RFE32_DIVSTA_IFADCSTAT_RESERVED7_ONE           0x1UL
// bitfield: DIVSTA_IFADCSTAT_QUANTCALVAL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALVAL             2UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_S 2UL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_BM          0x0000007CUL
#define RF24_RFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_M 0x0000007CUL
// enums for bitfield DIVSTA_IFADCSTAT_QUANTCALVAL (width: 5)UL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_COMP0       0x00UL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALVAL_COMP1       0x01UL
// bitfield: DIVSTA_IFADCSTAT_QUANTCALDONE
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALDONE            1UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_S 1UL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_BM         0x00000002UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_M 0x00000002UL
// enums for bitfield DIVSTA_IFADCSTAT_QUANTCALDONE (width: 1)UL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_NOT_READY  0x0UL
#define RFE32_DIVSTA_IFADCSTAT_QUANTCALDONE_READY      0x1UL
// bitfield: DIVSTA_IFADCSTAT_RESERVED0
#define RFE32_DIVSTA_IFADCSTAT_RESERVED0               0UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_RESERVED0_S  0UL
#define RFE32_DIVSTA_IFADCSTAT_RESERVED0_BM            0x00000001UL
#define RF24_RFE32_DIVSTA_IFADCSTAT_RESERVED0_M  0x00000001UL
// enums for bitfield DIVSTA_IFADCSTAT_RESERVED0 (width: 1)UL
#define RFE32_DIVSTA_IFADCSTAT_RESERVED0_ZERO          0x0UL
#define RFE32_DIVSTA_IFADCSTAT_RESERVED0_ONE           0x1UL
// --------------------------------------------------------------
// DIVIDEND
// 
#define RFE32_DIVIDEND_ADR (RFE32_BASE + 0x0118UL)
static volatile unsigned long* const SP_RFE32_DIVIDEND = (unsigned long*) RFE32_DIVIDEND_ADR;
#define S_RFE32_DIVIDEND (*SP_RFE32_DIVIDEND)
#define RF24_RFE32_O_DIVIDEND                      280
// bitfield: DIVIDEND_VAL
#define RFE32_DIVIDEND_VAL                             0UL
#define RF24_RFE32_DIVIDEND_VAL_S                0UL
#define RFE32_DIVIDEND_VAL_BM                          0xFFFFFFFFUL
#define RF24_RFE32_DIVIDEND_VAL_M                0xFFFFFFFFUL
// enums for bitfield DIVIDEND_VAL (width: 32)UL
#define RFE32_DIVIDEND_VAL_ALLZEROS                    0x00000000UL
#define RFE32_DIVIDEND_VAL_ALLONES                     0x0000FFFFUL
// --------------------------------------------------------------
// DIVISOR
// 
#define RFE32_DIVISOR_ADR (RFE32_BASE + 0x011CUL)
static volatile unsigned long* const SP_RFE32_DIVISOR = (unsigned long*) RFE32_DIVISOR_ADR;
#define S_RFE32_DIVISOR (*SP_RFE32_DIVISOR)
#define RF24_RFE32_O_DIVISOR                       284
// bitfield: DIVISOR_VAL
#define RFE32_DIVISOR_VAL                              0UL
#define RF24_RFE32_DIVISOR_VAL_S                 0UL
#define RFE32_DIVISOR_VAL_BM                           0xFFFFFFFFUL
#define RF24_RFE32_DIVISOR_VAL_M                 0xFFFFFFFFUL
// enums for bitfield DIVISOR_VAL (width: 32)UL
#define RFE32_DIVISOR_VAL_ALLZEROS                     0x00000000UL
#define RFE32_DIVISOR_VAL_ALLONES                      0x0000FFFFUL
// --------------------------------------------------------------
// QUOTIENT
// 
#define RFE32_QUOTIENT_ADR (RFE32_BASE + 0x0120UL)
static volatile unsigned long* const SP_RFE32_QUOTIENT = (unsigned long*) RFE32_QUOTIENT_ADR;
#define S_RFE32_QUOTIENT (*SP_RFE32_QUOTIENT)
#define RF24_RFE32_O_QUOTIENT                      288
// bitfield: QUOTIENT_VAL
#define RFE32_QUOTIENT_VAL                             0UL
#define RF24_RFE32_QUOTIENT_VAL_S                0UL
#define RFE32_QUOTIENT_VAL_BM                          0xFFFFFFFFUL
#define RF24_RFE32_QUOTIENT_VAL_M                0xFFFFFFFFUL
// enums for bitfield QUOTIENT_VAL (width: 32)UL
#define RFE32_QUOTIENT_VAL_ALLZEROS                    0x00000000UL
#define RFE32_QUOTIENT_VAL_ALLONES                     0x0000FFFFUL
// --------------------------------------------------------------
// PRODUCT
// 
#define RFE32_PRODUCT_ADR (RFE32_BASE + 0x0124UL)
static volatile unsigned long* const SP_RFE32_PRODUCT = (unsigned long*) RFE32_PRODUCT_ADR;
#define S_RFE32_PRODUCT (*SP_RFE32_PRODUCT)
#define RF24_RFE32_O_PRODUCT                       292
// bitfield: PRODUCT_VAL
#define RFE32_PRODUCT_VAL                              0UL
#define RF24_RFE32_PRODUCT_VAL_S                 0UL
#define RFE32_PRODUCT_VAL_BM                           0xFFFFFFFFUL
#define RF24_RFE32_PRODUCT_VAL_M                 0xFFFFFFFFUL
// enums for bitfield PRODUCT_VAL (width: 32)UL
#define RFE32_PRODUCT_VAL_ALLZEROS                     0x00000000UL
#define RFE32_PRODUCT_VAL_ALLONES                      0x0000FFFFUL
// --------------------------------------------------------------
// MULTSTA
// 
#define RFE32_MULTSTA_ADR (RFE32_BASE + 0x0128UL)
static volatile unsigned long* const SP_RFE32_MULTSTA = (unsigned long*) RFE32_MULTSTA_ADR;
#define S_RFE32_MULTSTA (*SP_RFE32_MULTSTA)
#define RF24_RFE32_O_MULTSTA                       296
// bitfield: MULTSTA_STAT
#define RFE32_MULTSTA_STAT                             0UL
#define RF24_RFE32_MULTSTA_STAT_S                0UL
#define RFE32_MULTSTA_STAT_BM                          0x00000001UL
#define RF24_RFE32_MULTSTA_STAT_M                0x00000001UL
// enums for bitfield MULTSTA_STAT (width: 1)UL
#define RFE32_MULTSTA_STAT_IDLE                        0x0UL
#define RFE32_MULTSTA_STAT_BUSY                        0x1UL
// --------------------------------------------------------------
// MULTCFG
// 
#define RFE32_MULTCFG_ADR (RFE32_BASE + 0x012CUL)
static volatile unsigned long* const SP_RFE32_MULTCFG = (unsigned long*) RFE32_MULTCFG_ADR;
#define S_RFE32_MULTCFG (*SP_RFE32_MULTCFG)
#define RF24_RFE32_O_MULTCFG                       300
// bitfield: MULTCFG_MODE
#define RFE32_MULTCFG_MODE                             0UL
#define RF24_RFE32_MULTCFG_MODE_S                0UL
#define RFE32_MULTCFG_MODE_BM                          0x00000001UL
#define RF24_RFE32_MULTCFG_MODE_M                0x00000001UL
// enums for bitfield MULTCFG_MODE (width: 1)UL
#define RFE32_MULTCFG_MODE_UNSIGNED                    0x0UL
#define RFE32_MULTCFG_MODE_SIGNED                      0x1UL

#endif
