// ===========================================================================
// This file is autogenerated, please DO NOT modify!
//
// Generated on  2023-04-18 13:27:19
// by user:      developer
// on machine:   swtools
// CWD:          /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/inc
// Commandline:  /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tools/topsm/topsmregs.pl -target c -base 0x40083000 -dat_sz 32 -i /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/doc/RFEregs.txt
// C&P friendly: /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tools/topsm/topsmregs.pl -target c -base 0x40083000 -dat_sz 32 -i /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/doc/RFEregs.txt
//
// Relevant file version(s):
//
// /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tools/topsm/topsmregs.pl
//   rcs-info: (file not managed or unknown revision control system)
//   git-hash: 0d11a0ea4ba55ba3ef648be18aeec231d5314753
//
// /home/developer/.conan/data/loki-lrf/7.11.00.18/library-lprf/eng/build/7c92806c54e4cfdd9df8e8c53e37468130adda90/tc/octopus/regs/doc/RFEregs.txt
//   rcs-info: (file not managed or unknown revision control system)
//   git-hash: e0f136e67be03720bd7b850a8268b85b1ae63be7
//
// ===========================================================================


#ifndef __RFE_REGS_H
#define __RFE_REGS_H

#ifndef __HW_TYPES_H__ 
  #ifndef HWREG
    #define HWREG(x) (*((volatile unsigned long *)(x)))
  #endif
#endif
#define RFE_BASE 0x40083000UL
#define RF24_RFE_BASE 0x40083000UL
// --------------------------------------------------------------
// ENABLE
// 
#define RFE_ENABLE_ADR (RFE_BASE + 0x0000UL)
static volatile unsigned long* const SP_RFE_ENABLE = (unsigned long*) RFE_ENABLE_ADR;
#define S_RFE_ENABLE (*SP_RFE_ENABLE)
#define RF24_RFE_O_ENABLE                        0
// bitfield: ENABLE_ACC1
#define RFE_ENABLE_ACC1                              3UL
#define RF24_RFE_ENABLE_ACC1_S                   3UL
#define RFE_ENABLE_ACC1_BM                           0x00000008UL
#define RF24_RFE_ENABLE_ACC1_M                   0x00000008UL
// enums for bitfield ENABLE_ACC1 (width: 1)UL
#define RFE_ENABLE_ACC1_DIS                          0x0UL
#define RFE_ENABLE_ACC1_EN                           0x1UL
// bitfield: ENABLE_ACC0
#define RFE_ENABLE_ACC0                              2UL
#define RF24_RFE_ENABLE_ACC0_S                   2UL
#define RFE_ENABLE_ACC0_BM                           0x00000004UL
#define RF24_RFE_ENABLE_ACC0_M                   0x00000004UL
// enums for bitfield ENABLE_ACC0 (width: 1)UL
#define RFE_ENABLE_ACC0_DIS                          0x0UL
#define RFE_ENABLE_ACC0_EN                           0x1UL
// bitfield: ENABLE_LOCTIM
#define RFE_ENABLE_LOCTIM                            1UL
#define RF24_RFE_ENABLE_LOCTIM_S                 1UL
#define RFE_ENABLE_LOCTIM_BM                         0x00000002UL
#define RF24_RFE_ENABLE_LOCTIM_M                 0x00000002UL
// enums for bitfield ENABLE_LOCTIM (width: 1)UL
#define RFE_ENABLE_LOCTIM_DIS                        0x0UL
#define RFE_ENABLE_LOCTIM_EN                         0x1UL
// bitfield: ENABLE_TOPSM
#define RFE_ENABLE_TOPSM                             0UL
#define RF24_RFE_ENABLE_TOPSM_S                  0UL
#define RFE_ENABLE_TOPSM_BM                          0x00000001UL
#define RF24_RFE_ENABLE_TOPSM_M                  0x00000001UL
// enums for bitfield ENABLE_TOPSM (width: 1)UL
#define RFE_ENABLE_TOPSM_DIS                         0x0UL
#define RFE_ENABLE_TOPSM_EN                          0x1UL
// --------------------------------------------------------------
// FWSRC
// 
#define RFE_FWSRC_ADR (RFE_BASE + 0x0004UL)
static volatile unsigned long* const SP_RFE_FWSRC = (unsigned long*) RFE_FWSRC_ADR;
#define S_RFE_FWSRC (*SP_RFE_FWSRC)
#define RF24_RFE_O_FWSRC                         4
// bitfield: FWSRC_DATARAM
#define RFE_FWSRC_DATARAM                            2UL
#define RF24_RFE_FWSRC_DATARAM_S                 2UL
#define RFE_FWSRC_DATARAM_BM                         0x00000004UL
#define RF24_RFE_FWSRC_DATARAM_M                 0x00000004UL
// enums for bitfield FWSRC_DATARAM (width: 1)UL
#define RFE_FWSRC_DATARAM_RFERAM                     0x0UL
#define RFE_FWSRC_DATARAM_S2RRAM                     0x1UL
// bitfield: FWSRC_FWRAM
#define RFE_FWSRC_FWRAM                              1UL
#define RF24_RFE_FWSRC_FWRAM_S                   1UL
#define RFE_FWSRC_FWRAM_BM                           0x00000002UL
#define RF24_RFE_FWSRC_FWRAM_M                   0x00000002UL
// enums for bitfield FWSRC_FWRAM (width: 1)UL
#define RFE_FWSRC_FWRAM_RFERAM                       0x0UL
#define RFE_FWSRC_FWRAM_S2RRAM                       0x1UL
// bitfield: FWSRC_BANK
#define RFE_FWSRC_BANK                               0UL
#define RF24_RFE_FWSRC_BANK_S                    0UL
#define RFE_FWSRC_BANK_BM                            0x00000001UL
#define RF24_RFE_FWSRC_BANK_M                    0x00000001UL
// enums for bitfield FWSRC_BANK (width: 1)UL
#define RFE_FWSRC_BANK_ZERO                          0x0UL
#define RFE_FWSRC_BANK_ONE                           0x1UL
// --------------------------------------------------------------
// INIT
// 
#define RFE_INIT_ADR (RFE_BASE + 0x0008UL)
static volatile unsigned long* const SP_RFE_INIT = (unsigned long*) RFE_INIT_ADR;
#define S_RFE_INIT (*SP_RFE_INIT)
#define RF24_RFE_O_INIT                          8
// bitfield: INIT_ACC1
#define RFE_INIT_ACC1                                3UL
#define RF24_RFE_INIT_ACC1_S                     3UL
#define RFE_INIT_ACC1_BM                             0x00000008UL
#define RF24_RFE_INIT_ACC1_M                     0x00000008UL
// enums for bitfield INIT_ACC1 (width: 1)UL
#define RFE_INIT_ACC1_NO_EFFECT                      0x0UL
#define RFE_INIT_ACC1_RESET                          0x1UL
// bitfield: INIT_ACC0
#define RFE_INIT_ACC0                                2UL
#define RF24_RFE_INIT_ACC0_S                     2UL
#define RFE_INIT_ACC0_BM                             0x00000004UL
#define RF24_RFE_INIT_ACC0_M                     0x00000004UL
// enums for bitfield INIT_ACC0 (width: 1)UL
#define RFE_INIT_ACC0_NO_EFFECT                      0x0UL
#define RFE_INIT_ACC0_RESET                          0x1UL
// bitfield: INIT_LOCTIM
#define RFE_INIT_LOCTIM                              1UL
#define RF24_RFE_INIT_LOCTIM_S                   1UL
#define RFE_INIT_LOCTIM_BM                           0x00000002UL
#define RF24_RFE_INIT_LOCTIM_M                   0x00000002UL
// enums for bitfield INIT_LOCTIM (width: 1)UL
#define RFE_INIT_LOCTIM_NO_EFFECT                    0x0UL
#define RFE_INIT_LOCTIM_RESET                        0x1UL
// bitfield: INIT_TOPSM
#define RFE_INIT_TOPSM                               0UL
#define RF24_RFE_INIT_TOPSM_S                    0UL
#define RFE_INIT_TOPSM_BM                            0x00000001UL
#define RF24_RFE_INIT_TOPSM_M                    0x00000001UL
// enums for bitfield INIT_TOPSM (width: 1)UL
#define RFE_INIT_TOPSM_NO_EFFECT                     0x0UL
#define RFE_INIT_TOPSM_RESET                         0x1UL
// --------------------------------------------------------------
// PDREQ
// 
#define RFE_PDREQ_ADR (RFE_BASE + 0x000CUL)
static volatile unsigned long* const SP_RFE_PDREQ = (unsigned long*) RFE_PDREQ_ADR;
#define S_RFE_PDREQ (*SP_RFE_PDREQ)
#define RF24_RFE_O_PDREQ                         12
// bitfield: PDREQ_TOPSMPDREQ
#define RFE_PDREQ_TOPSMPDREQ                         0UL
#define RF24_RFE_PDREQ_TOPSMPDREQ_S              0UL
#define RFE_PDREQ_TOPSMPDREQ_BM                      0x00000001UL
#define RF24_RFE_PDREQ_TOPSMPDREQ_M              0x00000001UL
// enums for bitfield PDREQ_TOPSMPDREQ (width: 1)UL
#define RFE_PDREQ_TOPSMPDREQ_ZERO                    0x0UL
#define RFE_PDREQ_TOPSMPDREQ_ONE                     0x1UL
// --------------------------------------------------------------
// EVT0
// 
#define RFE_EVT0_ADR (RFE_BASE + 0x0010UL)
static volatile unsigned long* const SP_RFE_EVT0 = (unsigned long*) RFE_EVT0_ADR;
#define S_RFE_EVT0 (*SP_RFE_EVT0)
#define RF24_RFE_O_EVT0                          16
// bitfield: EVT0_MAGNTHR
#define RFE_EVT0_MAGNTHR                             14UL
#define RF24_RFE_EVT0_MAGNTHR_S                  14UL
#define RFE_EVT0_MAGNTHR_BM                          0x00004000UL
#define RF24_RFE_EVT0_MAGNTHR_M                  0x00004000UL
// enums for bitfield EVT0_MAGNTHR (width: 1)UL
#define RFE_EVT0_MAGNTHR_ZERO                        0x0UL
#define RFE_EVT0_MAGNTHR_ONE                         0x1UL
// bitfield: EVT0_S2RSTOP
#define RFE_EVT0_S2RSTOP                             13UL
#define RF24_RFE_EVT0_S2RSTOP_S                  13UL
#define RFE_EVT0_S2RSTOP_BM                          0x00002000UL
#define RF24_RFE_EVT0_S2RSTOP_M                  0x00002000UL
// enums for bitfield EVT0_S2RSTOP (width: 1)UL
#define RFE_EVT0_S2RSTOP_ZERO                        0x0UL
#define RFE_EVT0_S2RSTOP_ONE                         0x1UL
// bitfield: EVT0_SYSTCMP2
#define RFE_EVT0_SYSTCMP2                            12UL
#define RF24_RFE_EVT0_SYSTCMP2_S                 12UL
#define RFE_EVT0_SYSTCMP2_BM                         0x00001000UL
#define RF24_RFE_EVT0_SYSTCMP2_M                 0x00001000UL
// enums for bitfield EVT0_SYSTCMP2 (width: 1)UL
#define RFE_EVT0_SYSTCMP2_ZERO                       0x0UL
#define RFE_EVT0_SYSTCMP2_ONE                        0x1UL
// bitfield: EVT0_SYSTCMP1
#define RFE_EVT0_SYSTCMP1                            11UL
#define RF24_RFE_EVT0_SYSTCMP1_S                 11UL
#define RFE_EVT0_SYSTCMP1_BM                         0x00000800UL
#define RF24_RFE_EVT0_SYSTCMP1_M                 0x00000800UL
// enums for bitfield EVT0_SYSTCMP1 (width: 1)UL
#define RFE_EVT0_SYSTCMP1_ZERO                       0x0UL
#define RFE_EVT0_SYSTCMP1_ONE                        0x1UL
// bitfield: EVT0_SYSTCMP0
#define RFE_EVT0_SYSTCMP0                            10UL
#define RF24_RFE_EVT0_SYSTCMP0_S                 10UL
#define RFE_EVT0_SYSTCMP0_BM                         0x00000400UL
#define RF24_RFE_EVT0_SYSTCMP0_M                 0x00000400UL
// enums for bitfield EVT0_SYSTCMP0 (width: 1)UL
#define RFE_EVT0_SYSTCMP0_ZERO                       0x0UL
#define RFE_EVT0_SYSTCMP0_ONE                        0x1UL
// bitfield: EVT0_PBERFEDAT
#define RFE_EVT0_PBERFEDAT                           9UL
#define RF24_RFE_EVT0_PBERFEDAT_S                9UL
#define RFE_EVT0_PBERFEDAT_BM                        0x00000200UL
#define RF24_RFE_EVT0_PBERFEDAT_M                0x00000200UL
// enums for bitfield EVT0_PBERFEDAT (width: 1)UL
#define RFE_EVT0_PBERFEDAT_ZERO                      0x0UL
#define RFE_EVT0_PBERFEDAT_ONE                       0x1UL
// bitfield: EVT0_MDMRFEDAT
#define RFE_EVT0_MDMRFEDAT                           8UL
#define RF24_RFE_EVT0_MDMRFEDAT_S                8UL
#define RFE_EVT0_MDMRFEDAT_BM                        0x00000100UL
#define RF24_RFE_EVT0_MDMRFEDAT_M                0x00000100UL
// enums for bitfield EVT0_MDMRFEDAT (width: 1)UL
#define RFE_EVT0_MDMRFEDAT_ZERO                      0x0UL
#define RFE_EVT0_MDMRFEDAT_ONE                       0x1UL
// bitfield: EVT0_DLO
#define RFE_EVT0_DLO                                 7UL
#define RF24_RFE_EVT0_DLO_S                      7UL
#define RFE_EVT0_DLO_BM                              0x00000080UL
#define RF24_RFE_EVT0_DLO_M                      0x00000080UL
// enums for bitfield EVT0_DLO (width: 1)UL
#define RFE_EVT0_DLO_ZERO                            0x0UL
#define RFE_EVT0_DLO_ONE                             0x1UL
// bitfield: EVT0_PBECMD
#define RFE_EVT0_PBECMD                              6UL
#define RF24_RFE_EVT0_PBECMD_S                   6UL
#define RFE_EVT0_PBECMD_BM                           0x00000040UL
#define RF24_RFE_EVT0_PBECMD_M                   0x00000040UL
// enums for bitfield EVT0_PBECMD (width: 1)UL
#define RFE_EVT0_PBECMD_ZERO                         0x0UL
#define RFE_EVT0_PBECMD_ONE                          0x1UL
// bitfield: EVT0_COUNTER
#define RFE_EVT0_COUNTER                             5UL
#define RF24_RFE_EVT0_COUNTER_S                  5UL
#define RFE_EVT0_COUNTER_BM                          0x00000020UL
#define RF24_RFE_EVT0_COUNTER_M                  0x00000020UL
// enums for bitfield EVT0_COUNTER (width: 1)UL
#define RFE_EVT0_COUNTER_ZERO                        0x0UL
#define RFE_EVT0_COUNTER_ONE                         0x1UL
// bitfield: EVT0_MDMCMD
#define RFE_EVT0_MDMCMD                              4UL
#define RF24_RFE_EVT0_MDMCMD_S                   4UL
#define RFE_EVT0_MDMCMD_BM                           0x00000010UL
#define RF24_RFE_EVT0_MDMCMD_M                   0x00000010UL
// enums for bitfield EVT0_MDMCMD (width: 1)UL
#define RFE_EVT0_MDMCMD_ZERO                         0x0UL
#define RFE_EVT0_MDMCMD_ONE                          0x1UL
// bitfield: EVT0_ACC1
#define RFE_EVT0_ACC1                                3UL
#define RF24_RFE_EVT0_ACC1_S                     3UL
#define RFE_EVT0_ACC1_BM                             0x00000008UL
#define RF24_RFE_EVT0_ACC1_M                     0x00000008UL
// enums for bitfield EVT0_ACC1 (width: 1)UL
#define RFE_EVT0_ACC1_ZERO                           0x0UL
#define RFE_EVT0_ACC1_ONE                            0x1UL
// bitfield: EVT0_ACC0
#define RFE_EVT0_ACC0                                2UL
#define RF24_RFE_EVT0_ACC0_S                     2UL
#define RFE_EVT0_ACC0_BM                             0x00000004UL
#define RF24_RFE_EVT0_ACC0_M                     0x00000004UL
// enums for bitfield EVT0_ACC0 (width: 1)UL
#define RFE_EVT0_ACC0_ZERO                           0x0UL
#define RFE_EVT0_ACC0_ONE                            0x1UL
// bitfield: EVT0_TIMER
#define RFE_EVT0_TIMER                               1UL
#define RF24_RFE_EVT0_TIMER_S                    1UL
#define RFE_EVT0_TIMER_BM                            0x00000002UL
#define RF24_RFE_EVT0_TIMER_M                    0x00000002UL
// enums for bitfield EVT0_TIMER (width: 1)UL
#define RFE_EVT0_TIMER_ZERO                          0x0UL
#define RFE_EVT0_TIMER_ONE                           0x1UL
// bitfield: EVT0_RFEAPI
#define RFE_EVT0_RFEAPI                              0UL
#define RF24_RFE_EVT0_RFEAPI_S                   0UL
#define RFE_EVT0_RFEAPI_BM                           0x00000001UL
#define RF24_RFE_EVT0_RFEAPI_M                   0x00000001UL
// enums for bitfield EVT0_RFEAPI (width: 1)UL
#define RFE_EVT0_RFEAPI_ZERO                         0x0UL
#define RFE_EVT0_RFEAPI_ONE                          0x1UL
// --------------------------------------------------------------
// EVT1
// 
#define RFE_EVT1_ADR (RFE_BASE + 0x0014UL)
static volatile unsigned long* const SP_RFE_EVT1 = (unsigned long*) RFE_EVT1_ADR;
#define S_RFE_EVT1 (*SP_RFE_EVT1)
#define RF24_RFE_O_EVT1                          20
// bitfield: EVT1_PREREFCLK
#define RFE_EVT1_PREREFCLK                           13UL
#define RF24_RFE_EVT1_PREREFCLK_S                13UL
#define RFE_EVT1_PREREFCLK_BM                        0x00002000UL
#define RF24_RFE_EVT1_PREREFCLK_M                0x00002000UL
// enums for bitfield EVT1_PREREFCLK (width: 1)UL
#define RFE_EVT1_PREREFCLK_ZERO                      0x0UL
#define RFE_EVT1_PREREFCLK_ONE                       0x1UL
// bitfield: EVT1_REFCLK
#define RFE_EVT1_REFCLK                              12UL
#define RF24_RFE_EVT1_REFCLK_S                   12UL
#define RFE_EVT1_REFCLK_BM                           0x00001000UL
#define RF24_RFE_EVT1_REFCLK_M                   0x00001000UL
// enums for bitfield EVT1_REFCLK (width: 1)UL
#define RFE_EVT1_REFCLK_ZERO                         0x0UL
#define RFE_EVT1_REFCLK_ONE                          0x1UL
// bitfield: EVT1_FBLWTHR
#define RFE_EVT1_FBLWTHR                             11UL
#define RF24_RFE_EVT1_FBLWTHR_S                  11UL
#define RFE_EVT1_FBLWTHR_BM                          0x00000800UL
#define RF24_RFE_EVT1_FBLWTHR_M                  0x00000800UL
// enums for bitfield EVT1_FBLWTHR (width: 1)UL
#define RFE_EVT1_FBLWTHR_ZERO                        0x0UL
#define RFE_EVT1_FBLWTHR_ONE                         0x1UL
// bitfield: EVT1_FABVTHR
#define RFE_EVT1_FABVTHR                             10UL
#define RF24_RFE_EVT1_FABVTHR_S                  10UL
#define RFE_EVT1_FABVTHR_BM                          0x00000400UL
#define RF24_RFE_EVT1_FABVTHR_M                  0x00000400UL
// enums for bitfield EVT1_FABVTHR (width: 1)UL
#define RFE_EVT1_FABVTHR_ZERO                        0x0UL
#define RFE_EVT1_FABVTHR_ONE                         0x1UL
// bitfield: EVT1_LOCK
#define RFE_EVT1_LOCK                                9UL
#define RF24_RFE_EVT1_LOCK_S                     9UL
#define RFE_EVT1_LOCK_BM                             0x00000200UL
#define RF24_RFE_EVT1_LOCK_M                     0x00000200UL
// enums for bitfield EVT1_LOCK (width: 1)UL
#define RFE_EVT1_LOCK_ZERO                           0x0UL
#define RFE_EVT1_LOCK_ONE                            0x1UL
// bitfield: EVT1_LOL
#define RFE_EVT1_LOL                                 8UL
#define RF24_RFE_EVT1_LOL_S                      8UL
#define RFE_EVT1_LOL_BM                              0x00000100UL
#define RF24_RFE_EVT1_LOL_M                      0x00000100UL
// enums for bitfield EVT1_LOL (width: 1)UL
#define RFE_EVT1_LOL_ZERO                            0x0UL
#define RFE_EVT1_LOL_ONE                             0x1UL
// bitfield: EVT1_GPI7
#define RFE_EVT1_GPI7                                7UL
#define RF24_RFE_EVT1_GPI7_S                     7UL
#define RFE_EVT1_GPI7_BM                             0x00000080UL
#define RF24_RFE_EVT1_GPI7_M                     0x00000080UL
// enums for bitfield EVT1_GPI7 (width: 1)UL
#define RFE_EVT1_GPI7_ZERO                           0x0UL
#define RFE_EVT1_GPI7_ONE                            0x1UL
// bitfield: EVT1_GPI6
#define RFE_EVT1_GPI6                                6UL
#define RF24_RFE_EVT1_GPI6_S                     6UL
#define RFE_EVT1_GPI6_BM                             0x00000040UL
#define RF24_RFE_EVT1_GPI6_M                     0x00000040UL
// enums for bitfield EVT1_GPI6 (width: 1)UL
#define RFE_EVT1_GPI6_ZERO                           0x0UL
#define RFE_EVT1_GPI6_ONE                            0x1UL
// bitfield: EVT1_GPI5
#define RFE_EVT1_GPI5                                5UL
#define RF24_RFE_EVT1_GPI5_S                     5UL
#define RFE_EVT1_GPI5_BM                             0x00000020UL
#define RF24_RFE_EVT1_GPI5_M                     0x00000020UL
// enums for bitfield EVT1_GPI5 (width: 1)UL
#define RFE_EVT1_GPI5_ZERO                           0x0UL
#define RFE_EVT1_GPI5_ONE                            0x1UL
// bitfield: EVT1_GPI4
#define RFE_EVT1_GPI4                                4UL
#define RF24_RFE_EVT1_GPI4_S                     4UL
#define RFE_EVT1_GPI4_BM                             0x00000010UL
#define RF24_RFE_EVT1_GPI4_M                     0x00000010UL
// enums for bitfield EVT1_GPI4 (width: 1)UL
#define RFE_EVT1_GPI4_ZERO                           0x0UL
#define RFE_EVT1_GPI4_ONE                            0x1UL
// bitfield: EVT1_GPI3
#define RFE_EVT1_GPI3                                3UL
#define RF24_RFE_EVT1_GPI3_S                     3UL
#define RFE_EVT1_GPI3_BM                             0x00000008UL
#define RF24_RFE_EVT1_GPI3_M                     0x00000008UL
// enums for bitfield EVT1_GPI3 (width: 1)UL
#define RFE_EVT1_GPI3_ZERO                           0x0UL
#define RFE_EVT1_GPI3_ONE                            0x1UL
// bitfield: EVT1_GPI2
#define RFE_EVT1_GPI2                                2UL
#define RF24_RFE_EVT1_GPI2_S                     2UL
#define RFE_EVT1_GPI2_BM                             0x00000004UL
#define RF24_RFE_EVT1_GPI2_M                     0x00000004UL
// enums for bitfield EVT1_GPI2 (width: 1)UL
#define RFE_EVT1_GPI2_ZERO                           0x0UL
#define RFE_EVT1_GPI2_ONE                            0x1UL
// bitfield: EVT1_GPI1
#define RFE_EVT1_GPI1                                1UL
#define RF24_RFE_EVT1_GPI1_S                     1UL
#define RFE_EVT1_GPI1_BM                             0x00000002UL
#define RF24_RFE_EVT1_GPI1_M                     0x00000002UL
// enums for bitfield EVT1_GPI1 (width: 1)UL
#define RFE_EVT1_GPI1_ZERO                           0x0UL
#define RFE_EVT1_GPI1_ONE                            0x1UL
// bitfield: EVT1_GPI0
#define RFE_EVT1_GPI0                                0UL
#define RF24_RFE_EVT1_GPI0_S                     0UL
#define RFE_EVT1_GPI0_BM                             0x00000001UL
#define RF24_RFE_EVT1_GPI0_M                     0x00000001UL
// enums for bitfield EVT1_GPI0 (width: 1)UL
#define RFE_EVT1_GPI0_ZERO                           0x0UL
#define RFE_EVT1_GPI0_ONE                            0x1UL
// --------------------------------------------------------------
// EVTMSK0
// 
#define RFE_EVTMSK0_ADR (RFE_BASE + 0x0018UL)
static volatile unsigned long* const SP_RFE_EVTMSK0 = (unsigned long*) RFE_EVTMSK0_ADR;
#define S_RFE_EVTMSK0 (*SP_RFE_EVTMSK0)
#define RF24_RFE_O_EVTMSK0                       24
// bitfield: EVTMSK0_MAGNTHR
#define RFE_EVTMSK0_MAGNTHR                          14UL
#define RF24_RFE_EVTMSK0_MAGNTHR_S               14UL
#define RFE_EVTMSK0_MAGNTHR_BM                       0x00004000UL
#define RF24_RFE_EVTMSK0_MAGNTHR_M               0x00004000UL
// enums for bitfield EVTMSK0_MAGNTHR (width: 1)UL
#define RFE_EVTMSK0_MAGNTHR_DIS                      0x0UL
#define RFE_EVTMSK0_MAGNTHR_EN                       0x1UL
// bitfield: EVTMSK0_S2RSTOP
#define RFE_EVTMSK0_S2RSTOP                          13UL
#define RF24_RFE_EVTMSK0_S2RSTOP_S               13UL
#define RFE_EVTMSK0_S2RSTOP_BM                       0x00002000UL
#define RF24_RFE_EVTMSK0_S2RSTOP_M               0x00002000UL
// enums for bitfield EVTMSK0_S2RSTOP (width: 1)UL
#define RFE_EVTMSK0_S2RSTOP_DIS                      0x0UL
#define RFE_EVTMSK0_S2RSTOP_EN                       0x1UL
// bitfield: EVTMSK0_SYSTCMP2
#define RFE_EVTMSK0_SYSTCMP2                         12UL
#define RF24_RFE_EVTMSK0_SYSTCMP2_S              12UL
#define RFE_EVTMSK0_SYSTCMP2_BM                      0x00001000UL
#define RF24_RFE_EVTMSK0_SYSTCMP2_M              0x00001000UL
// enums for bitfield EVTMSK0_SYSTCMP2 (width: 1)UL
#define RFE_EVTMSK0_SYSTCMP2_DIS                     0x0UL
#define RFE_EVTMSK0_SYSTCMP2_EN                      0x1UL
// bitfield: EVTMSK0_SYSTCMP1
#define RFE_EVTMSK0_SYSTCMP1                         11UL
#define RF24_RFE_EVTMSK0_SYSTCMP1_S              11UL
#define RFE_EVTMSK0_SYSTCMP1_BM                      0x00000800UL
#define RF24_RFE_EVTMSK0_SYSTCMP1_M              0x00000800UL
// enums for bitfield EVTMSK0_SYSTCMP1 (width: 1)UL
#define RFE_EVTMSK0_SYSTCMP1_DIS                     0x0UL
#define RFE_EVTMSK0_SYSTCMP1_EN                      0x1UL
// bitfield: EVTMSK0_SYSTCMP0
#define RFE_EVTMSK0_SYSTCMP0                         10UL
#define RF24_RFE_EVTMSK0_SYSTCMP0_S              10UL
#define RFE_EVTMSK0_SYSTCMP0_BM                      0x00000400UL
#define RF24_RFE_EVTMSK0_SYSTCMP0_M              0x00000400UL
// enums for bitfield EVTMSK0_SYSTCMP0 (width: 1)UL
#define RFE_EVTMSK0_SYSTCMP0_DIS                     0x0UL
#define RFE_EVTMSK0_SYSTCMP0_EN                      0x1UL
// bitfield: EVTMSK0_PBERFEDAT
#define RFE_EVTMSK0_PBERFEDAT                        9UL
#define RF24_RFE_EVTMSK0_PBERFEDAT_S             9UL
#define RFE_EVTMSK0_PBERFEDAT_BM                     0x00000200UL
#define RF24_RFE_EVTMSK0_PBERFEDAT_M             0x00000200UL
// enums for bitfield EVTMSK0_PBERFEDAT (width: 1)UL
#define RFE_EVTMSK0_PBERFEDAT_DIS                    0x0UL
#define RFE_EVTMSK0_PBERFEDAT_EN                     0x1UL
// bitfield: EVTMSK0_MDMRFEDAT
#define RFE_EVTMSK0_MDMRFEDAT                        8UL
#define RF24_RFE_EVTMSK0_MDMRFEDAT_S             8UL
#define RFE_EVTMSK0_MDMRFEDAT_BM                     0x00000100UL
#define RF24_RFE_EVTMSK0_MDMRFEDAT_M             0x00000100UL
// enums for bitfield EVTMSK0_MDMRFEDAT (width: 1)UL
#define RFE_EVTMSK0_MDMRFEDAT_DIS                    0x0UL
#define RFE_EVTMSK0_MDMRFEDAT_EN                     0x1UL
// bitfield: EVTMSK0_DLO
#define RFE_EVTMSK0_DLO                              7UL
#define RF24_RFE_EVTMSK0_DLO_S                   7UL
#define RFE_EVTMSK0_DLO_BM                           0x00000080UL
#define RF24_RFE_EVTMSK0_DLO_M                   0x00000080UL
// enums for bitfield EVTMSK0_DLO (width: 1)UL
#define RFE_EVTMSK0_DLO_DIS                          0x0UL
#define RFE_EVTMSK0_DLO_EN                           0x1UL
// bitfield: EVTMSK0_PBECMD
#define RFE_EVTMSK0_PBECMD                           6UL
#define RF24_RFE_EVTMSK0_PBECMD_S                6UL
#define RFE_EVTMSK0_PBECMD_BM                        0x00000040UL
#define RF24_RFE_EVTMSK0_PBECMD_M                0x00000040UL
// enums for bitfield EVTMSK0_PBECMD (width: 1)UL
#define RFE_EVTMSK0_PBECMD_DIS                       0x0UL
#define RFE_EVTMSK0_PBECMD_EN                        0x1UL
// bitfield: EVTMSK0_COUNTER
#define RFE_EVTMSK0_COUNTER                          5UL
#define RF24_RFE_EVTMSK0_COUNTER_S               5UL
#define RFE_EVTMSK0_COUNTER_BM                       0x00000020UL
#define RF24_RFE_EVTMSK0_COUNTER_M               0x00000020UL
// enums for bitfield EVTMSK0_COUNTER (width: 1)UL
#define RFE_EVTMSK0_COUNTER_DIS                      0x0UL
#define RFE_EVTMSK0_COUNTER_EN                       0x1UL
// bitfield: EVTMSK0_MDMCMD
#define RFE_EVTMSK0_MDMCMD                           4UL
#define RF24_RFE_EVTMSK0_MDMCMD_S                4UL
#define RFE_EVTMSK0_MDMCMD_BM                        0x00000010UL
#define RF24_RFE_EVTMSK0_MDMCMD_M                0x00000010UL
// enums for bitfield EVTMSK0_MDMCMD (width: 1)UL
#define RFE_EVTMSK0_MDMCMD_DIS                       0x0UL
#define RFE_EVTMSK0_MDMCMD_EN                        0x1UL
// bitfield: EVTMSK0_ACC1
#define RFE_EVTMSK0_ACC1                             3UL
#define RF24_RFE_EVTMSK0_ACC1_S                  3UL
#define RFE_EVTMSK0_ACC1_BM                          0x00000008UL
#define RF24_RFE_EVTMSK0_ACC1_M                  0x00000008UL
// enums for bitfield EVTMSK0_ACC1 (width: 1)UL
#define RFE_EVTMSK0_ACC1_DIS                         0x0UL
#define RFE_EVTMSK0_ACC1_EN                          0x1UL
// bitfield: EVTMSK0_ACC0
#define RFE_EVTMSK0_ACC0                             2UL
#define RF24_RFE_EVTMSK0_ACC0_S                  2UL
#define RFE_EVTMSK0_ACC0_BM                          0x00000004UL
#define RF24_RFE_EVTMSK0_ACC0_M                  0x00000004UL
// enums for bitfield EVTMSK0_ACC0 (width: 1)UL
#define RFE_EVTMSK0_ACC0_DIS                         0x0UL
#define RFE_EVTMSK0_ACC0_EN                          0x1UL
// bitfield: EVTMSK0_TIMER
#define RFE_EVTMSK0_TIMER                            1UL
#define RF24_RFE_EVTMSK0_TIMER_S                 1UL
#define RFE_EVTMSK0_TIMER_BM                         0x00000002UL
#define RF24_RFE_EVTMSK0_TIMER_M                 0x00000002UL
// enums for bitfield EVTMSK0_TIMER (width: 1)UL
#define RFE_EVTMSK0_TIMER_DIS                        0x0UL
#define RFE_EVTMSK0_TIMER_EN                         0x1UL
// bitfield: EVTMSK0_RFEAPI
#define RFE_EVTMSK0_RFEAPI                           0UL
#define RF24_RFE_EVTMSK0_RFEAPI_S                0UL
#define RFE_EVTMSK0_RFEAPI_BM                        0x00000001UL
#define RF24_RFE_EVTMSK0_RFEAPI_M                0x00000001UL
// enums for bitfield EVTMSK0_RFEAPI (width: 1)UL
#define RFE_EVTMSK0_RFEAPI_DIS                       0x0UL
#define RFE_EVTMSK0_RFEAPI_EN                        0x1UL
// --------------------------------------------------------------
// EVTMSK1
// 
#define RFE_EVTMSK1_ADR (RFE_BASE + 0x001CUL)
static volatile unsigned long* const SP_RFE_EVTMSK1 = (unsigned long*) RFE_EVTMSK1_ADR;
#define S_RFE_EVTMSK1 (*SP_RFE_EVTMSK1)
#define RF24_RFE_O_EVTMSK1                       28
// bitfield: EVTMSK1_PREREFCLK
#define RFE_EVTMSK1_PREREFCLK                        13UL
#define RF24_RFE_EVTMSK1_PREREFCLK_S             13UL
#define RFE_EVTMSK1_PREREFCLK_BM                     0x00002000UL
#define RF24_RFE_EVTMSK1_PREREFCLK_M             0x00002000UL
// enums for bitfield EVTMSK1_PREREFCLK (width: 1)UL
#define RFE_EVTMSK1_PREREFCLK_DIS                    0x0UL
#define RFE_EVTMSK1_PREREFCLK_EN                     0x1UL
// bitfield: EVTMSK1_REFCLK
#define RFE_EVTMSK1_REFCLK                           12UL
#define RF24_RFE_EVTMSK1_REFCLK_S                12UL
#define RFE_EVTMSK1_REFCLK_BM                        0x00001000UL
#define RF24_RFE_EVTMSK1_REFCLK_M                0x00001000UL
// enums for bitfield EVTMSK1_REFCLK (width: 1)UL
#define RFE_EVTMSK1_REFCLK_DIS                       0x0UL
#define RFE_EVTMSK1_REFCLK_EN                        0x1UL
// bitfield: EVTMSK1_FBLWTHR
#define RFE_EVTMSK1_FBLWTHR                          11UL
#define RF24_RFE_EVTMSK1_FBLWTHR_S               11UL
#define RFE_EVTMSK1_FBLWTHR_BM                       0x00000800UL
#define RF24_RFE_EVTMSK1_FBLWTHR_M               0x00000800UL
// enums for bitfield EVTMSK1_FBLWTHR (width: 1)UL
#define RFE_EVTMSK1_FBLWTHR_DIS                      0x0UL
#define RFE_EVTMSK1_FBLWTHR_EN                       0x1UL
// bitfield: EVTMSK1_FABVTHR
#define RFE_EVTMSK1_FABVTHR                          10UL
#define RF24_RFE_EVTMSK1_FABVTHR_S               10UL
#define RFE_EVTMSK1_FABVTHR_BM                       0x00000400UL
#define RF24_RFE_EVTMSK1_FABVTHR_M               0x00000400UL
// enums for bitfield EVTMSK1_FABVTHR (width: 1)UL
#define RFE_EVTMSK1_FABVTHR_DIS                      0x0UL
#define RFE_EVTMSK1_FABVTHR_EN                       0x1UL
// bitfield: EVTMSK1_LOCK
#define RFE_EVTMSK1_LOCK                             9UL
#define RF24_RFE_EVTMSK1_LOCK_S                  9UL
#define RFE_EVTMSK1_LOCK_BM                          0x00000200UL
#define RF24_RFE_EVTMSK1_LOCK_M                  0x00000200UL
// enums for bitfield EVTMSK1_LOCK (width: 1)UL
#define RFE_EVTMSK1_LOCK_DIS                         0x0UL
#define RFE_EVTMSK1_LOCK_EN                          0x1UL
// bitfield: EVTMSK1_LOL
#define RFE_EVTMSK1_LOL                              8UL
#define RF24_RFE_EVTMSK1_LOL_S                   8UL
#define RFE_EVTMSK1_LOL_BM                           0x00000100UL
#define RF24_RFE_EVTMSK1_LOL_M                   0x00000100UL
// enums for bitfield EVTMSK1_LOL (width: 1)UL
#define RFE_EVTMSK1_LOL_DIS                          0x0UL
#define RFE_EVTMSK1_LOL_EN                           0x1UL
// bitfield: EVTMSK1_GPI7
#define RFE_EVTMSK1_GPI7                             7UL
#define RF24_RFE_EVTMSK1_GPI7_S                  7UL
#define RFE_EVTMSK1_GPI7_BM                          0x00000080UL
#define RF24_RFE_EVTMSK1_GPI7_M                  0x00000080UL
// enums for bitfield EVTMSK1_GPI7 (width: 1)UL
#define RFE_EVTMSK1_GPI7_DIS                         0x0UL
#define RFE_EVTMSK1_GPI7_EN                          0x1UL
// bitfield: EVTMSK1_GPI6
#define RFE_EVTMSK1_GPI6                             6UL
#define RF24_RFE_EVTMSK1_GPI6_S                  6UL
#define RFE_EVTMSK1_GPI6_BM                          0x00000040UL
#define RF24_RFE_EVTMSK1_GPI6_M                  0x00000040UL
// enums for bitfield EVTMSK1_GPI6 (width: 1)UL
#define RFE_EVTMSK1_GPI6_DIS                         0x0UL
#define RFE_EVTMSK1_GPI6_EN                          0x1UL
// bitfield: EVTMSK1_GPI5
#define RFE_EVTMSK1_GPI5                             5UL
#define RF24_RFE_EVTMSK1_GPI5_S                  5UL
#define RFE_EVTMSK1_GPI5_BM                          0x00000020UL
#define RF24_RFE_EVTMSK1_GPI5_M                  0x00000020UL
// enums for bitfield EVTMSK1_GPI5 (width: 1)UL
#define RFE_EVTMSK1_GPI5_DIS                         0x0UL
#define RFE_EVTMSK1_GPI5_EN                          0x1UL
// bitfield: EVTMSK1_GPI4
#define RFE_EVTMSK1_GPI4                             4UL
#define RF24_RFE_EVTMSK1_GPI4_S                  4UL
#define RFE_EVTMSK1_GPI4_BM                          0x00000010UL
#define RF24_RFE_EVTMSK1_GPI4_M                  0x00000010UL
// enums for bitfield EVTMSK1_GPI4 (width: 1)UL
#define RFE_EVTMSK1_GPI4_DIS                         0x0UL
#define RFE_EVTMSK1_GPI4_EN                          0x1UL
// bitfield: EVTMSK1_GPI3
#define RFE_EVTMSK1_GPI3                             3UL
#define RF24_RFE_EVTMSK1_GPI3_S                  3UL
#define RFE_EVTMSK1_GPI3_BM                          0x00000008UL
#define RF24_RFE_EVTMSK1_GPI3_M                  0x00000008UL
// enums for bitfield EVTMSK1_GPI3 (width: 1)UL
#define RFE_EVTMSK1_GPI3_DIS                         0x0UL
#define RFE_EVTMSK1_GPI3_EN                          0x1UL
// bitfield: EVTMSK1_GPI2
#define RFE_EVTMSK1_GPI2                             2UL
#define RF24_RFE_EVTMSK1_GPI2_S                  2UL
#define RFE_EVTMSK1_GPI2_BM                          0x00000004UL
#define RF24_RFE_EVTMSK1_GPI2_M                  0x00000004UL
// enums for bitfield EVTMSK1_GPI2 (width: 1)UL
#define RFE_EVTMSK1_GPI2_DIS                         0x0UL
#define RFE_EVTMSK1_GPI2_EN                          0x1UL
// bitfield: EVTMSK1_GPI1
#define RFE_EVTMSK1_GPI1                             1UL
#define RF24_RFE_EVTMSK1_GPI1_S                  1UL
#define RFE_EVTMSK1_GPI1_BM                          0x00000002UL
#define RF24_RFE_EVTMSK1_GPI1_M                  0x00000002UL
// enums for bitfield EVTMSK1_GPI1 (width: 1)UL
#define RFE_EVTMSK1_GPI1_DIS                         0x0UL
#define RFE_EVTMSK1_GPI1_EN                          0x1UL
// bitfield: EVTMSK1_GPI0
#define RFE_EVTMSK1_GPI0                             0UL
#define RF24_RFE_EVTMSK1_GPI0_S                  0UL
#define RFE_EVTMSK1_GPI0_BM                          0x00000001UL
#define RF24_RFE_EVTMSK1_GPI0_M                  0x00000001UL
// enums for bitfield EVTMSK1_GPI0 (width: 1)UL
#define RFE_EVTMSK1_GPI0_DIS                         0x0UL
#define RFE_EVTMSK1_GPI0_EN                          0x1UL
// --------------------------------------------------------------
// EVTCLR0
// 
#define RFE_EVTCLR0_ADR (RFE_BASE + 0x0020UL)
static volatile unsigned long* const SP_RFE_EVTCLR0 = (unsigned long*) RFE_EVTCLR0_ADR;
#define S_RFE_EVTCLR0 (*SP_RFE_EVTCLR0)
#define RF24_RFE_O_EVTCLR0                       32
// bitfield: EVTCLR0_MAGNTHR
#define RFE_EVTCLR0_MAGNTHR                          14UL
#define RF24_RFE_EVTCLR0_MAGNTHR_S               14UL
#define RFE_EVTCLR0_MAGNTHR_BM                       0x00004000UL
#define RF24_RFE_EVTCLR0_MAGNTHR_M               0x00004000UL
// enums for bitfield EVTCLR0_MAGNTHR (width: 1)UL
#define RFE_EVTCLR0_MAGNTHR_ZERO                     0x0UL
#define RFE_EVTCLR0_MAGNTHR_ONE                      0x1UL
// bitfield: EVTCLR0_S2RSTOP
#define RFE_EVTCLR0_S2RSTOP                          13UL
#define RF24_RFE_EVTCLR0_S2RSTOP_S               13UL
#define RFE_EVTCLR0_S2RSTOP_BM                       0x00002000UL
#define RF24_RFE_EVTCLR0_S2RSTOP_M               0x00002000UL
// enums for bitfield EVTCLR0_S2RSTOP (width: 1)UL
#define RFE_EVTCLR0_S2RSTOP_ZERO                     0x0UL
#define RFE_EVTCLR0_S2RSTOP_ONE                      0x1UL
// bitfield: EVTCLR0_SYSTCMP2
#define RFE_EVTCLR0_SYSTCMP2                         12UL
#define RF24_RFE_EVTCLR0_SYSTCMP2_S              12UL
#define RFE_EVTCLR0_SYSTCMP2_BM                      0x00001000UL
#define RF24_RFE_EVTCLR0_SYSTCMP2_M              0x00001000UL
// enums for bitfield EVTCLR0_SYSTCMP2 (width: 1)UL
#define RFE_EVTCLR0_SYSTCMP2_ZERO                    0x0UL
#define RFE_EVTCLR0_SYSTCMP2_ONE                     0x1UL
// bitfield: EVTCLR0_SYSTCMP1
#define RFE_EVTCLR0_SYSTCMP1                         11UL
#define RF24_RFE_EVTCLR0_SYSTCMP1_S              11UL
#define RFE_EVTCLR0_SYSTCMP1_BM                      0x00000800UL
#define RF24_RFE_EVTCLR0_SYSTCMP1_M              0x00000800UL
// enums for bitfield EVTCLR0_SYSTCMP1 (width: 1)UL
#define RFE_EVTCLR0_SYSTCMP1_ZERO                    0x0UL
#define RFE_EVTCLR0_SYSTCMP1_ONE                     0x1UL
// bitfield: EVTCLR0_SYSTCMP0
#define RFE_EVTCLR0_SYSTCMP0                         10UL
#define RF24_RFE_EVTCLR0_SYSTCMP0_S              10UL
#define RFE_EVTCLR0_SYSTCMP0_BM                      0x00000400UL
#define RF24_RFE_EVTCLR0_SYSTCMP0_M              0x00000400UL
// enums for bitfield EVTCLR0_SYSTCMP0 (width: 1)UL
#define RFE_EVTCLR0_SYSTCMP0_ZERO                    0x0UL
#define RFE_EVTCLR0_SYSTCMP0_ONE                     0x1UL
// bitfield: EVTCLR0_PBERFEDAT
#define RFE_EVTCLR0_PBERFEDAT                        9UL
#define RF24_RFE_EVTCLR0_PBERFEDAT_S             9UL
#define RFE_EVTCLR0_PBERFEDAT_BM                     0x00000200UL
#define RF24_RFE_EVTCLR0_PBERFEDAT_M             0x00000200UL
// enums for bitfield EVTCLR0_PBERFEDAT (width: 1)UL
#define RFE_EVTCLR0_PBERFEDAT_ZERO                   0x0UL
#define RFE_EVTCLR0_PBERFEDAT_ONE                    0x1UL
// bitfield: EVTCLR0_MDMRFEDAT
#define RFE_EVTCLR0_MDMRFEDAT                        8UL
#define RF24_RFE_EVTCLR0_MDMRFEDAT_S             8UL
#define RFE_EVTCLR0_MDMRFEDAT_BM                     0x00000100UL
#define RF24_RFE_EVTCLR0_MDMRFEDAT_M             0x00000100UL
// enums for bitfield EVTCLR0_MDMRFEDAT (width: 1)UL
#define RFE_EVTCLR0_MDMRFEDAT_ZERO                   0x0UL
#define RFE_EVTCLR0_MDMRFEDAT_ONE                    0x1UL
// bitfield: EVTCLR0_DLO
#define RFE_EVTCLR0_DLO                              7UL
#define RF24_RFE_EVTCLR0_DLO_S                   7UL
#define RFE_EVTCLR0_DLO_BM                           0x00000080UL
#define RF24_RFE_EVTCLR0_DLO_M                   0x00000080UL
// enums for bitfield EVTCLR0_DLO (width: 1)UL
#define RFE_EVTCLR0_DLO_ZERO                         0x0UL
#define RFE_EVTCLR0_DLO_ONE                          0x1UL
// bitfield: EVTCLR0_PBECMD
#define RFE_EVTCLR0_PBECMD                           6UL
#define RF24_RFE_EVTCLR0_PBECMD_S                6UL
#define RFE_EVTCLR0_PBECMD_BM                        0x00000040UL
#define RF24_RFE_EVTCLR0_PBECMD_M                0x00000040UL
// enums for bitfield EVTCLR0_PBECMD (width: 1)UL
#define RFE_EVTCLR0_PBECMD_ZERO                      0x0UL
#define RFE_EVTCLR0_PBECMD_ONE                       0x1UL
// bitfield: EVTCLR0_COUNTER
#define RFE_EVTCLR0_COUNTER                          5UL
#define RF24_RFE_EVTCLR0_COUNTER_S               5UL
#define RFE_EVTCLR0_COUNTER_BM                       0x00000020UL
#define RF24_RFE_EVTCLR0_COUNTER_M               0x00000020UL
// enums for bitfield EVTCLR0_COUNTER (width: 1)UL
#define RFE_EVTCLR0_COUNTER_ZERO                     0x0UL
#define RFE_EVTCLR0_COUNTER_ONE                      0x1UL
// bitfield: EVTCLR0_MDMCMD
#define RFE_EVTCLR0_MDMCMD                           4UL
#define RF24_RFE_EVTCLR0_MDMCMD_S                4UL
#define RFE_EVTCLR0_MDMCMD_BM                        0x00000010UL
#define RF24_RFE_EVTCLR0_MDMCMD_M                0x00000010UL
// enums for bitfield EVTCLR0_MDMCMD (width: 1)UL
#define RFE_EVTCLR0_MDMCMD_ZERO                      0x0UL
#define RFE_EVTCLR0_MDMCMD_ONE                       0x1UL
// bitfield: EVTCLR0_ACC1
#define RFE_EVTCLR0_ACC1                             3UL
#define RF24_RFE_EVTCLR0_ACC1_S                  3UL
#define RFE_EVTCLR0_ACC1_BM                          0x00000008UL
#define RF24_RFE_EVTCLR0_ACC1_M                  0x00000008UL
// enums for bitfield EVTCLR0_ACC1 (width: 1)UL
#define RFE_EVTCLR0_ACC1_ZERO                        0x0UL
#define RFE_EVTCLR0_ACC1_ONE                         0x1UL
// bitfield: EVTCLR0_ACC0
#define RFE_EVTCLR0_ACC0                             2UL
#define RF24_RFE_EVTCLR0_ACC0_S                  2UL
#define RFE_EVTCLR0_ACC0_BM                          0x00000004UL
#define RF24_RFE_EVTCLR0_ACC0_M                  0x00000004UL
// enums for bitfield EVTCLR0_ACC0 (width: 1)UL
#define RFE_EVTCLR0_ACC0_ZERO                        0x0UL
#define RFE_EVTCLR0_ACC0_ONE                         0x1UL
// bitfield: EVTCLR0_TIMER
#define RFE_EVTCLR0_TIMER                            1UL
#define RF24_RFE_EVTCLR0_TIMER_S                 1UL
#define RFE_EVTCLR0_TIMER_BM                         0x00000002UL
#define RF24_RFE_EVTCLR0_TIMER_M                 0x00000002UL
// enums for bitfield EVTCLR0_TIMER (width: 1)UL
#define RFE_EVTCLR0_TIMER_ZERO                       0x0UL
#define RFE_EVTCLR0_TIMER_ONE                        0x1UL
// bitfield: EVTCLR0_RFEAPI
#define RFE_EVTCLR0_RFEAPI                           0UL
#define RF24_RFE_EVTCLR0_RFEAPI_S                0UL
#define RFE_EVTCLR0_RFEAPI_BM                        0x00000001UL
#define RF24_RFE_EVTCLR0_RFEAPI_M                0x00000001UL
// enums for bitfield EVTCLR0_RFEAPI (width: 1)UL
#define RFE_EVTCLR0_RFEAPI_ZERO                      0x0UL
#define RFE_EVTCLR0_RFEAPI_ONE                       0x1UL
// --------------------------------------------------------------
// EVTCLR1
// 
#define RFE_EVTCLR1_ADR (RFE_BASE + 0x0024UL)
static volatile unsigned long* const SP_RFE_EVTCLR1 = (unsigned long*) RFE_EVTCLR1_ADR;
#define S_RFE_EVTCLR1 (*SP_RFE_EVTCLR1)
#define RF24_RFE_O_EVTCLR1                       36
// bitfield: EVTCLR1_PREREFCLK
#define RFE_EVTCLR1_PREREFCLK                        13UL
#define RF24_RFE_EVTCLR1_PREREFCLK_S             13UL
#define RFE_EVTCLR1_PREREFCLK_BM                     0x00002000UL
#define RF24_RFE_EVTCLR1_PREREFCLK_M             0x00002000UL
// enums for bitfield EVTCLR1_PREREFCLK (width: 1)UL
#define RFE_EVTCLR1_PREREFCLK_ZERO                   0x0UL
#define RFE_EVTCLR1_PREREFCLK_ONE                    0x1UL
// bitfield: EVTCLR1_REFCLK
#define RFE_EVTCLR1_REFCLK                           12UL
#define RF24_RFE_EVTCLR1_REFCLK_S                12UL
#define RFE_EVTCLR1_REFCLK_BM                        0x00001000UL
#define RF24_RFE_EVTCLR1_REFCLK_M                0x00001000UL
// enums for bitfield EVTCLR1_REFCLK (width: 1)UL
#define RFE_EVTCLR1_REFCLK_ZERO                      0x0UL
#define RFE_EVTCLR1_REFCLK_ONE                       0x1UL
// bitfield: EVTCLR1_FBLWTHR
#define RFE_EVTCLR1_FBLWTHR                          11UL
#define RF24_RFE_EVTCLR1_FBLWTHR_S               11UL
#define RFE_EVTCLR1_FBLWTHR_BM                       0x00000800UL
#define RF24_RFE_EVTCLR1_FBLWTHR_M               0x00000800UL
// enums for bitfield EVTCLR1_FBLWTHR (width: 1)UL
#define RFE_EVTCLR1_FBLWTHR_ZERO                     0x0UL
#define RFE_EVTCLR1_FBLWTHR_ONE                      0x1UL
// bitfield: EVTCLR1_FABVTHR
#define RFE_EVTCLR1_FABVTHR                          10UL
#define RF24_RFE_EVTCLR1_FABVTHR_S               10UL
#define RFE_EVTCLR1_FABVTHR_BM                       0x00000400UL
#define RF24_RFE_EVTCLR1_FABVTHR_M               0x00000400UL
// enums for bitfield EVTCLR1_FABVTHR (width: 1)UL
#define RFE_EVTCLR1_FABVTHR_ZERO                     0x0UL
#define RFE_EVTCLR1_FABVTHR_ONE                      0x1UL
// bitfield: EVTCLR1_LOCK
#define RFE_EVTCLR1_LOCK                             9UL
#define RF24_RFE_EVTCLR1_LOCK_S                  9UL
#define RFE_EVTCLR1_LOCK_BM                          0x00000200UL
#define RF24_RFE_EVTCLR1_LOCK_M                  0x00000200UL
// enums for bitfield EVTCLR1_LOCK (width: 1)UL
#define RFE_EVTCLR1_LOCK_ZERO                        0x0UL
#define RFE_EVTCLR1_LOCK_ONE                         0x1UL
// bitfield: EVTCLR1_LOL
#define RFE_EVTCLR1_LOL                              8UL
#define RF24_RFE_EVTCLR1_LOL_S                   8UL
#define RFE_EVTCLR1_LOL_BM                           0x00000100UL
#define RF24_RFE_EVTCLR1_LOL_M                   0x00000100UL
// enums for bitfield EVTCLR1_LOL (width: 1)UL
#define RFE_EVTCLR1_LOL_ZERO                         0x0UL
#define RFE_EVTCLR1_LOL_ONE                          0x1UL
// bitfield: EVTCLR1_GPI7
#define RFE_EVTCLR1_GPI7                             7UL
#define RF24_RFE_EVTCLR1_GPI7_S                  7UL
#define RFE_EVTCLR1_GPI7_BM                          0x00000080UL
#define RF24_RFE_EVTCLR1_GPI7_M                  0x00000080UL
// enums for bitfield EVTCLR1_GPI7 (width: 1)UL
#define RFE_EVTCLR1_GPI7_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI7_ONE                         0x1UL
// bitfield: EVTCLR1_GPI6
#define RFE_EVTCLR1_GPI6                             6UL
#define RF24_RFE_EVTCLR1_GPI6_S                  6UL
#define RFE_EVTCLR1_GPI6_BM                          0x00000040UL
#define RF24_RFE_EVTCLR1_GPI6_M                  0x00000040UL
// enums for bitfield EVTCLR1_GPI6 (width: 1)UL
#define RFE_EVTCLR1_GPI6_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI6_ONE                         0x1UL
// bitfield: EVTCLR1_GPI5
#define RFE_EVTCLR1_GPI5                             5UL
#define RF24_RFE_EVTCLR1_GPI5_S                  5UL
#define RFE_EVTCLR1_GPI5_BM                          0x00000020UL
#define RF24_RFE_EVTCLR1_GPI5_M                  0x00000020UL
// enums for bitfield EVTCLR1_GPI5 (width: 1)UL
#define RFE_EVTCLR1_GPI5_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI5_ONE                         0x1UL
// bitfield: EVTCLR1_GPI4
#define RFE_EVTCLR1_GPI4                             4UL
#define RF24_RFE_EVTCLR1_GPI4_S                  4UL
#define RFE_EVTCLR1_GPI4_BM                          0x00000010UL
#define RF24_RFE_EVTCLR1_GPI4_M                  0x00000010UL
// enums for bitfield EVTCLR1_GPI4 (width: 1)UL
#define RFE_EVTCLR1_GPI4_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI4_ONE                         0x1UL
// bitfield: EVTCLR1_GPI3
#define RFE_EVTCLR1_GPI3                             3UL
#define RF24_RFE_EVTCLR1_GPI3_S                  3UL
#define RFE_EVTCLR1_GPI3_BM                          0x00000008UL
#define RF24_RFE_EVTCLR1_GPI3_M                  0x00000008UL
// enums for bitfield EVTCLR1_GPI3 (width: 1)UL
#define RFE_EVTCLR1_GPI3_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI3_ONE                         0x1UL
// bitfield: EVTCLR1_GPI2
#define RFE_EVTCLR1_GPI2                             2UL
#define RF24_RFE_EVTCLR1_GPI2_S                  2UL
#define RFE_EVTCLR1_GPI2_BM                          0x00000004UL
#define RF24_RFE_EVTCLR1_GPI2_M                  0x00000004UL
// enums for bitfield EVTCLR1_GPI2 (width: 1)UL
#define RFE_EVTCLR1_GPI2_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI2_ONE                         0x1UL
// bitfield: EVTCLR1_GPI1
#define RFE_EVTCLR1_GPI1                             1UL
#define RF24_RFE_EVTCLR1_GPI1_S                  1UL
#define RFE_EVTCLR1_GPI1_BM                          0x00000002UL
#define RF24_RFE_EVTCLR1_GPI1_M                  0x00000002UL
// enums for bitfield EVTCLR1_GPI1 (width: 1)UL
#define RFE_EVTCLR1_GPI1_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI1_ONE                         0x1UL
// bitfield: EVTCLR1_GPI0
#define RFE_EVTCLR1_GPI0                             0UL
#define RF24_RFE_EVTCLR1_GPI0_S                  0UL
#define RFE_EVTCLR1_GPI0_BM                          0x00000001UL
#define RF24_RFE_EVTCLR1_GPI0_M                  0x00000001UL
// enums for bitfield EVTCLR1_GPI0 (width: 1)UL
#define RFE_EVTCLR1_GPI0_ZERO                        0x0UL
#define RFE_EVTCLR1_GPI0_ONE                         0x1UL
// --------------------------------------------------------------
// HFXTSTAT
// 
#define RFE_HFXTSTAT_ADR (RFE_BASE + 0x0028UL)
static volatile unsigned long* const SP_RFE_HFXTSTAT = (unsigned long*) RFE_HFXTSTAT_ADR;
#define S_RFE_HFXTSTAT (*SP_RFE_HFXTSTAT)
#define RF24_RFE_O_HFXTSTAT                      40
// bitfield: HFXTSTAT_STAT
#define RFE_HFXTSTAT_STAT                            0UL
#define RF24_RFE_HFXTSTAT_STAT_S                 0UL
#define RFE_HFXTSTAT_STAT_BM                         0x00000001UL
#define RF24_RFE_HFXTSTAT_STAT_M                 0x00000001UL
// enums for bitfield HFXTSTAT_STAT (width: 1)UL
#define RFE_HFXTSTAT_STAT_NONQUAL                    0x0UL
#define RFE_HFXTSTAT_STAT_QUAL                       0x1UL
// --------------------------------------------------------------
// RFSTATE
// 
#define RFE_RFSTATE_ADR (RFE_BASE + 0x0030UL)
static volatile unsigned long* const SP_RFE_RFSTATE = (unsigned long*) RFE_RFSTATE_ADR;
#define S_RFE_RFSTATE (*SP_RFE_RFSTATE)
#define RF24_RFE_O_RFSTATE                       48
// bitfield: RFSTATE_VAL
#define RFE_RFSTATE_VAL                              0UL
#define RF24_RFE_RFSTATE_VAL_S                   0UL
#define RFE_RFSTATE_VAL_BM                           0x0000000FUL
#define RF24_RFE_RFSTATE_VAL_M                   0x0000000FUL
// enums for bitfield RFSTATE_VAL (width: 4)UL
#define RFE_RFSTATE_VAL_IDLE                         0x0UL
#define RFE_RFSTATE_VAL_SYNTH                        0x1UL
#define RFE_RFSTATE_VAL_TX                           0x2UL
#define RFE_RFSTATE_VAL_RX                           0x3UL
// --------------------------------------------------------------
// API
// 
#define RFE_API_ADR (RFE_BASE + 0x0048UL)
static volatile unsigned long* const SP_RFE_API = (unsigned long*) RFE_API_ADR;
#define S_RFE_API (*SP_RFE_API)
#define RF24_RFE_O_API                           72
// bitfield: API_PROTOCOLID
#define RFE_API_PROTOCOLID                           4UL
#define RF24_RFE_API_PROTOCOLID_S                4UL
#define RFE_API_PROTOCOLID_BM                        0x000000F0UL
#define RF24_RFE_API_PROTOCOLID_M                0x000000F0UL
// enums for bitfield API_PROTOCOLID (width: 4)UL
#define RFE_API_PROTOCOLID_ALLZEROS                  0x0UL
#define RFE_API_PROTOCOLID_ALLONES                   0xFUL
// bitfield: API_RFECMD
#define RFE_API_RFECMD                               0UL
#define RF24_RFE_API_RFECMD_S                    0UL
#define RFE_API_RFECMD_BM                            0x0000000FUL
#define RF24_RFE_API_RFECMD_M                    0x0000000FUL
// enums for bitfield API_RFECMD (width: 4)UL
#define RFE_API_RFECMD_ALLZEROS                      0x0UL
#define RFE_API_RFECMD_ALLONES                       0xFUL
// --------------------------------------------------------------
// CMDPAR0
// 
#define RFE_CMDPAR0_ADR (RFE_BASE + 0x004CUL)
static volatile unsigned long* const SP_RFE_CMDPAR0 = (unsigned long*) RFE_CMDPAR0_ADR;
#define S_RFE_CMDPAR0 (*SP_RFE_CMDPAR0)
#define RF24_RFE_O_CMDPAR0                       76
// bitfield: CMDPAR0_VAL
#define RFE_CMDPAR0_VAL                              0UL
#define RF24_RFE_CMDPAR0_VAL_S                   0UL
#define RFE_CMDPAR0_VAL_BM                           0x0000FFFFUL
#define RF24_RFE_CMDPAR0_VAL_M                   0x0000FFFFUL
// enums for bitfield CMDPAR0_VAL (width: 16)UL
#define RFE_CMDPAR0_VAL_ALLZEROS                     0x0000UL
#define RFE_CMDPAR0_VAL_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// CMDPAR1
// 
#define RFE_CMDPAR1_ADR (RFE_BASE + 0x0050UL)
static volatile unsigned long* const SP_RFE_CMDPAR1 = (unsigned long*) RFE_CMDPAR1_ADR;
#define S_RFE_CMDPAR1 (*SP_RFE_CMDPAR1)
#define RF24_RFE_O_CMDPAR1                       80
// bitfield: CMDPAR1_VAL
#define RFE_CMDPAR1_VAL                              0UL
#define RF24_RFE_CMDPAR1_VAL_S                   0UL
#define RFE_CMDPAR1_VAL_BM                           0x0000FFFFUL
#define RF24_RFE_CMDPAR1_VAL_M                   0x0000FFFFUL
// enums for bitfield CMDPAR1_VAL (width: 16)UL
#define RFE_CMDPAR1_VAL_ALLZEROS                     0x0000UL
#define RFE_CMDPAR1_VAL_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// MSGBOX
// 
#define RFE_MSGBOX_ADR (RFE_BASE + 0x0054UL)
static volatile unsigned long* const SP_RFE_MSGBOX = (unsigned long*) RFE_MSGBOX_ADR;
#define S_RFE_MSGBOX (*SP_RFE_MSGBOX)
#define RF24_RFE_O_MSGBOX                        84
// bitfield: MSGBOX_VAL
#define RFE_MSGBOX_VAL                               0UL
#define RF24_RFE_MSGBOX_VAL_S                    0UL
#define RFE_MSGBOX_VAL_BM                            0x000000FFUL
#define RF24_RFE_MSGBOX_VAL_M                    0x000000FFUL
// enums for bitfield MSGBOX_VAL (width: 8)UL
#define RFE_MSGBOX_VAL_ALLZEROS                      0x00UL
#define RFE_MSGBOX_VAL_ALLONES                       0xFFUL
// --------------------------------------------------------------
// MCEDATOUT0
// 
#define RFE_MCEDATOUT0_ADR (RFE_BASE + 0x0058UL)
static volatile unsigned long* const SP_RFE_MCEDATOUT0 = (unsigned long*) RFE_MCEDATOUT0_ADR;
#define S_RFE_MCEDATOUT0 (*SP_RFE_MCEDATOUT0)
#define RF24_RFE_O_MCEDATOUT0                    88
// bitfield: MCEDATOUT0_VAL
#define RFE_MCEDATOUT0_VAL                           0UL
#define RF24_RFE_MCEDATOUT0_VAL_S                0UL
#define RFE_MCEDATOUT0_VAL_BM                        0x0000FFFFUL
#define RF24_RFE_MCEDATOUT0_VAL_M                0x0000FFFFUL
// enums for bitfield MCEDATOUT0_VAL (width: 16)UL
#define RFE_MCEDATOUT0_VAL_ALLZEROS                  0x0000UL
#define RFE_MCEDATOUT0_VAL_ALLONES                   0xFFFFUL
// --------------------------------------------------------------
// MCEDATIN0
// 
#define RFE_MCEDATIN0_ADR (RFE_BASE + 0x005CUL)
static volatile unsigned long* const SP_RFE_MCEDATIN0 = (unsigned long*) RFE_MCEDATIN0_ADR;
#define S_RFE_MCEDATIN0 (*SP_RFE_MCEDATIN0)
#define RF24_RFE_O_MCEDATIN0                     92
// bitfield: MCEDATIN0_VAL
#define RFE_MCEDATIN0_VAL                            0UL
#define RF24_RFE_MCEDATIN0_VAL_S                 0UL
#define RFE_MCEDATIN0_VAL_BM                         0x0000FFFFUL
#define RF24_RFE_MCEDATIN0_VAL_M                 0x0000FFFFUL
// enums for bitfield MCEDATIN0_VAL (width: 16)UL
#define RFE_MCEDATIN0_VAL_ALLZEROS                   0x0000UL
#define RFE_MCEDATIN0_VAL_ALLONES                    0xFFFFUL
// --------------------------------------------------------------
// MCECMDOUT
// 
#define RFE_MCECMDOUT_ADR (RFE_BASE + 0x0060UL)
static volatile unsigned long* const SP_RFE_MCECMDOUT = (unsigned long*) RFE_MCECMDOUT_ADR;
#define S_RFE_MCECMDOUT (*SP_RFE_MCECMDOUT)
#define RF24_RFE_O_MCECMDOUT                     96
// bitfield: MCECMDOUT_VAL
#define RFE_MCECMDOUT_VAL                            0UL
#define RF24_RFE_MCECMDOUT_VAL_S                 0UL
#define RFE_MCECMDOUT_VAL_BM                         0x0000000FUL
#define RF24_RFE_MCECMDOUT_VAL_M                 0x0000000FUL
// enums for bitfield MCECMDOUT_VAL (width: 4)UL
#define RFE_MCECMDOUT_VAL_ALLZEROS                   0x0UL
#define RFE_MCECMDOUT_VAL_ALLONES                    0xFUL
// --------------------------------------------------------------
// MCECMDIN
// 
#define RFE_MCECMDIN_ADR (RFE_BASE + 0x0064UL)
static volatile unsigned long* const SP_RFE_MCECMDIN = (unsigned long*) RFE_MCECMDIN_ADR;
#define S_RFE_MCECMDIN (*SP_RFE_MCECMDIN)
#define RF24_RFE_O_MCECMDIN                      100
// bitfield: MCECMDIN_VAL
#define RFE_MCECMDIN_VAL                             0UL
#define RF24_RFE_MCECMDIN_VAL_S                  0UL
#define RFE_MCECMDIN_VAL_BM                          0x0000000FUL
#define RF24_RFE_MCECMDIN_VAL_M                  0x0000000FUL
// enums for bitfield MCECMDIN_VAL (width: 4)UL
#define RFE_MCECMDIN_VAL_ALLZEROS                    0x0UL
#define RFE_MCECMDIN_VAL_ALLONES                     0xFUL
// --------------------------------------------------------------
// PBEDATOUT0
// 
#define RFE_PBEDATOUT0_ADR (RFE_BASE + 0x0068UL)
static volatile unsigned long* const SP_RFE_PBEDATOUT0 = (unsigned long*) RFE_PBEDATOUT0_ADR;
#define S_RFE_PBEDATOUT0 (*SP_RFE_PBEDATOUT0)
#define RF24_RFE_O_PBEDATOUT0                    104
// bitfield: PBEDATOUT0_VAL
#define RFE_PBEDATOUT0_VAL                           0UL
#define RF24_RFE_PBEDATOUT0_VAL_S                0UL
#define RFE_PBEDATOUT0_VAL_BM                        0x0000FFFFUL
#define RF24_RFE_PBEDATOUT0_VAL_M                0x0000FFFFUL
// enums for bitfield PBEDATOUT0_VAL (width: 16)UL
#define RFE_PBEDATOUT0_VAL_ALLZEROS                  0x0000UL
#define RFE_PBEDATOUT0_VAL_ALLONES                   0xFFFFUL
// --------------------------------------------------------------
// PBEDATIN0
// 
#define RFE_PBEDATIN0_ADR (RFE_BASE + 0x006CUL)
static volatile unsigned long* const SP_RFE_PBEDATIN0 = (unsigned long*) RFE_PBEDATIN0_ADR;
#define S_RFE_PBEDATIN0 (*SP_RFE_PBEDATIN0)
#define RF24_RFE_O_PBEDATIN0                     108
// bitfield: PBEDATIN0_VAL
#define RFE_PBEDATIN0_VAL                            0UL
#define RF24_RFE_PBEDATIN0_VAL_S                 0UL
#define RFE_PBEDATIN0_VAL_BM                         0x0000FFFFUL
#define RF24_RFE_PBEDATIN0_VAL_M                 0x0000FFFFUL
// enums for bitfield PBEDATIN0_VAL (width: 16)UL
#define RFE_PBEDATIN0_VAL_ALLZEROS                   0x0000UL
#define RFE_PBEDATIN0_VAL_ALLONES                    0xFFFFUL
// --------------------------------------------------------------
// PBECMDOUT
// 
#define RFE_PBECMDOUT_ADR (RFE_BASE + 0x0070UL)
static volatile unsigned long* const SP_RFE_PBECMDOUT = (unsigned long*) RFE_PBECMDOUT_ADR;
#define S_RFE_PBECMDOUT (*SP_RFE_PBECMDOUT)
#define RF24_RFE_O_PBECMDOUT                     112
// bitfield: PBECMDOUT_VAL
#define RFE_PBECMDOUT_VAL                            0UL
#define RF24_RFE_PBECMDOUT_VAL_S                 0UL
#define RFE_PBECMDOUT_VAL_BM                         0x0000000FUL
#define RF24_RFE_PBECMDOUT_VAL_M                 0x0000000FUL
// enums for bitfield PBECMDOUT_VAL (width: 4)UL
#define RFE_PBECMDOUT_VAL_ALLZEROS                   0x0UL
#define RFE_PBECMDOUT_VAL_ALLONES                    0xFUL
// --------------------------------------------------------------
// PBECMDIN
// 
#define RFE_PBECMDIN_ADR (RFE_BASE + 0x0074UL)
static volatile unsigned long* const SP_RFE_PBECMDIN = (unsigned long*) RFE_PBECMDIN_ADR;
#define S_RFE_PBECMDIN (*SP_RFE_PBECMDIN)
#define RF24_RFE_O_PBECMDIN                      116
// bitfield: PBECMDIN_VAL
#define RFE_PBECMDIN_VAL                             0UL
#define RF24_RFE_PBECMDIN_VAL_S                  0UL
#define RFE_PBECMDIN_VAL_BM                          0x0000000FUL
#define RF24_RFE_PBECMDIN_VAL_M                  0x0000000FUL
// enums for bitfield PBECMDIN_VAL (width: 4)UL
#define RFE_PBECMDIN_VAL_ALLZEROS                    0x0UL
#define RFE_PBECMDIN_VAL_ALLONES                     0xFUL
// --------------------------------------------------------------
// STRB
// 
#define RFE_STRB_ADR (RFE_BASE + 0x0078UL)
static volatile unsigned long* const SP_RFE_STRB = (unsigned long*) RFE_STRB_ADR;
#define S_RFE_STRB (*SP_RFE_STRB)
#define RF24_RFE_O_STRB                          120
// bitfield: STRB_S2RTRG
#define RFE_STRB_S2RTRG                              7UL
#define RF24_RFE_STRB_S2RTRG_S                   7UL
#define RFE_STRB_S2RTRG_BM                           0x00000080UL
#define RF24_RFE_STRB_S2RTRG_M                   0x00000080UL
// enums for bitfield STRB_S2RTRG (width: 1)UL
#define RFE_STRB_S2RTRG_ZERO                         0x0UL
#define RFE_STRB_S2RTRG_ONE                          0x1UL
// bitfield: STRB_DMATRG
#define RFE_STRB_DMATRG                              6UL
#define RF24_RFE_STRB_DMATRG_S                   6UL
#define RFE_STRB_DMATRG_BM                           0x00000040UL
#define RF24_RFE_STRB_DMATRG_M                   0x00000040UL
// enums for bitfield STRB_DMATRG (width: 1)UL
#define RFE_STRB_DMATRG_ZERO                         0x0UL
#define RFE_STRB_DMATRG_ONE                          0x1UL
// bitfield: STRB_SYSTCPT2
#define RFE_STRB_SYSTCPT2                            5UL
#define RF24_RFE_STRB_SYSTCPT2_S                 5UL
#define RFE_STRB_SYSTCPT2_BM                         0x00000020UL
#define RF24_RFE_STRB_SYSTCPT2_M                 0x00000020UL
// enums for bitfield STRB_SYSTCPT2 (width: 1)UL
#define RFE_STRB_SYSTCPT2_ZERO                       0x0UL
#define RFE_STRB_SYSTCPT2_ONE                        0x1UL
// bitfield: STRB_SYSTCPT1
#define RFE_STRB_SYSTCPT1                            4UL
#define RF24_RFE_STRB_SYSTCPT1_S                 4UL
#define RFE_STRB_SYSTCPT1_BM                         0x00000010UL
#define RF24_RFE_STRB_SYSTCPT1_M                 0x00000010UL
// enums for bitfield STRB_SYSTCPT1 (width: 1)UL
#define RFE_STRB_SYSTCPT1_ZERO                       0x0UL
#define RFE_STRB_SYSTCPT1_ONE                        0x1UL
// bitfield: STRB_SYSTCPT0
#define RFE_STRB_SYSTCPT0                            3UL
#define RF24_RFE_STRB_SYSTCPT0_S                 3UL
#define RFE_STRB_SYSTCPT0_BM                         0x00000008UL
#define RF24_RFE_STRB_SYSTCPT0_M                 0x00000008UL
// enums for bitfield STRB_SYSTCPT0 (width: 1)UL
#define RFE_STRB_SYSTCPT0_ZERO                       0x0UL
#define RFE_STRB_SYSTCPT0_ONE                        0x1UL
// bitfield: STRB_EVT1
#define RFE_STRB_EVT1                                2UL
#define RF24_RFE_STRB_EVT1_S                     2UL
#define RFE_STRB_EVT1_BM                             0x00000004UL
#define RF24_RFE_STRB_EVT1_M                     0x00000004UL
// enums for bitfield STRB_EVT1 (width: 1)UL
#define RFE_STRB_EVT1_ZERO                           0x0UL
#define RFE_STRB_EVT1_ONE                            0x1UL
// bitfield: STRB_EVT0
#define RFE_STRB_EVT0                                1UL
#define RF24_RFE_STRB_EVT0_S                     1UL
#define RFE_STRB_EVT0_BM                             0x00000002UL
#define RF24_RFE_STRB_EVT0_M                     0x00000002UL
// enums for bitfield STRB_EVT0 (width: 1)UL
#define RFE_STRB_EVT0_ZERO                           0x0UL
#define RFE_STRB_EVT0_ONE                            0x1UL
// bitfield: STRB_CMDDONE
#define RFE_STRB_CMDDONE                             0UL
#define RF24_RFE_STRB_CMDDONE_S                  0UL
#define RFE_STRB_CMDDONE_BM                          0x00000001UL
#define RF24_RFE_STRB_CMDDONE_M                  0x00000001UL
// enums for bitfield STRB_CMDDONE (width: 1)UL
#define RFE_STRB_CMDDONE_NO                          0x0UL
#define RFE_STRB_CMDDONE_YES                         0x1UL
// --------------------------------------------------------------
// MAGNTHRCFG
// 
#define RFE_MAGNTHRCFG_ADR (RFE_BASE + 0x0080UL)
static volatile unsigned long* const SP_RFE_MAGNTHRCFG = (unsigned long*) RFE_MAGNTHRCFG_ADR;
#define S_RFE_MAGNTHRCFG (*SP_RFE_MAGNTHRCFG)
#define RF24_RFE_O_MAGNTHRCFG                    128
// bitfield: MAGNTHRCFG_SEL
#define RFE_MAGNTHRCFG_SEL                           1UL
#define RF24_RFE_MAGNTHRCFG_SEL_S                1UL
#define RFE_MAGNTHRCFG_SEL_BM                        0x00000002UL
#define RF24_RFE_MAGNTHRCFG_SEL_M                0x00000002UL
// enums for bitfield MAGNTHRCFG_SEL (width: 1)UL
#define RFE_MAGNTHRCFG_SEL_MAGNACC0                  0x0UL
#define RFE_MAGNTHRCFG_SEL_MAGNACC1                  0x1UL
// bitfield: MAGNTHRCFG_CTL
#define RFE_MAGNTHRCFG_CTL                           0UL
#define RF24_RFE_MAGNTHRCFG_CTL_S                0UL
#define RFE_MAGNTHRCFG_CTL_BM                        0x00000001UL
#define RF24_RFE_MAGNTHRCFG_CTL_M                0x00000001UL
// enums for bitfield MAGNTHRCFG_CTL (width: 1)UL
#define RFE_MAGNTHRCFG_CTL_DIS                       0x0UL
#define RFE_MAGNTHRCFG_CTL_EN                        0x1UL
// --------------------------------------------------------------
// MAGNTHR
// 
#define RFE_MAGNTHR_ADR (RFE_BASE + 0x0084UL)
static volatile unsigned long* const SP_RFE_MAGNTHR = (unsigned long*) RFE_MAGNTHR_ADR;
#define S_RFE_MAGNTHR (*SP_RFE_MAGNTHR)
#define RF24_RFE_O_MAGNTHR                       132
// bitfield: MAGNTHR_VAL
#define RFE_MAGNTHR_VAL                              0UL
#define RF24_RFE_MAGNTHR_VAL_S                   0UL
#define RFE_MAGNTHR_VAL_BM                           0x000000FFUL
#define RF24_RFE_MAGNTHR_VAL_M                   0x000000FFUL
// enums for bitfield MAGNTHR_VAL (width: 8)UL
#define RFE_MAGNTHR_VAL_ALLZEROS                     0x00UL
#define RFE_MAGNTHR_VAL_ALLONES                      0xFFUL
// --------------------------------------------------------------
// RSSIOFFSET
// 
#define RFE_RSSIOFFSET_ADR (RFE_BASE + 0x0088UL)
static volatile unsigned long* const SP_RFE_RSSIOFFSET = (unsigned long*) RFE_RSSIOFFSET_ADR;
#define S_RFE_RSSIOFFSET (*SP_RFE_RSSIOFFSET)
#define RF24_RFE_O_RSSIOFFSET                    136
// bitfield: RSSIOFFSET_VAL
#define RFE_RSSIOFFSET_VAL                           0UL
#define RF24_RFE_RSSIOFFSET_VAL_S                0UL
#define RFE_RSSIOFFSET_VAL_BM                        0x000000FFUL
#define RF24_RFE_RSSIOFFSET_VAL_M                0x000000FFUL
// enums for bitfield RSSIOFFSET_VAL (width: 8)UL
#define RFE_RSSIOFFSET_VAL_ALLZEROS                  0x00UL
#define RFE_RSSIOFFSET_VAL_ALLONES                   0xFFUL
// --------------------------------------------------------------
// GAINCTL
// 
#define RFE_GAINCTL_ADR (RFE_BASE + 0x008CUL)
static volatile unsigned long* const SP_RFE_GAINCTL = (unsigned long*) RFE_GAINCTL_ADR;
#define S_RFE_GAINCTL (*SP_RFE_GAINCTL)
#define RF24_RFE_O_GAINCTL                       140
// bitfield: GAINCTL_BDE2DVGA
#define RFE_GAINCTL_BDE2DVGA                         2UL
#define RF24_RFE_GAINCTL_BDE2DVGA_S              2UL
#define RFE_GAINCTL_BDE2DVGA_BM                      0x0000000CUL
#define RF24_RFE_GAINCTL_BDE2DVGA_M              0x0000000CUL
// enums for bitfield GAINCTL_BDE2DVGA (width: 2)UL
#define RFE_GAINCTL_BDE2DVGA_GAIN1                   0x0UL
#define RFE_GAINCTL_BDE2DVGA_GAIN2                   0x1UL
#define RFE_GAINCTL_BDE2DVGA_GAIN4                   0x2UL
#define RFE_GAINCTL_BDE2DVGA_GAIN8                   0x3UL
// bitfield: GAINCTL_BDE1DVGA
#define RFE_GAINCTL_BDE1DVGA                         0UL
#define RF24_RFE_GAINCTL_BDE1DVGA_S              0UL
#define RFE_GAINCTL_BDE1DVGA_BM                      0x00000003UL
#define RF24_RFE_GAINCTL_BDE1DVGA_M              0x00000003UL
// enums for bitfield GAINCTL_BDE1DVGA (width: 2)UL
#define RFE_GAINCTL_BDE1DVGA_GAIN1                   0x0UL
#define RFE_GAINCTL_BDE1DVGA_GAIN2                   0x1UL
#define RFE_GAINCTL_BDE1DVGA_GAIN4                   0x2UL
#define RFE_GAINCTL_BDE1DVGA_GAIN8                   0x3UL
// --------------------------------------------------------------
// MAGNCTL0
// 
#define RFE_MAGNCTL0_ADR (RFE_BASE + 0x0090UL)
static volatile unsigned long* const SP_RFE_MAGNCTL0 = (unsigned long*) RFE_MAGNCTL0_ADR;
#define S_RFE_MAGNCTL0 (*SP_RFE_MAGNCTL0)
#define RF24_RFE_O_MAGNCTL0                      144
// bitfield: MAGNCTL0_PERMODE
#define RFE_MAGNCTL0_PERMODE                         12UL
#define RF24_RFE_MAGNCTL0_PERMODE_S              12UL
#define RFE_MAGNCTL0_PERMODE_BM                      0x00001000UL
#define RF24_RFE_MAGNCTL0_PERMODE_M              0x00001000UL
// enums for bitfield MAGNCTL0_PERMODE (width: 1)UL
#define RFE_MAGNCTL0_PERMODE_ONESHOT                 0x0UL
#define RFE_MAGNCTL0_PERMODE_PERIODIC                0x1UL
// bitfield: MAGNCTL0_SCL
#define RFE_MAGNCTL0_SCL                             8UL
#define RF24_RFE_MAGNCTL0_SCL_S                  8UL
#define RFE_MAGNCTL0_SCL_BM                          0x00000F00UL
#define RF24_RFE_MAGNCTL0_SCL_M                  0x00000F00UL
// enums for bitfield MAGNCTL0_SCL (width: 4)UL
#define RFE_MAGNCTL0_SCL_DIV1                        0x0UL
#define RFE_MAGNCTL0_SCL_DIV2                        0x1UL
#define RFE_MAGNCTL0_SCL_DIV4                        0x2UL
#define RFE_MAGNCTL0_SCL_DIV8                        0x3UL
#define RFE_MAGNCTL0_SCL_DIV16                       0x4UL
#define RFE_MAGNCTL0_SCL_DIV32                       0x5UL
#define RFE_MAGNCTL0_SCL_DIV64                       0x6UL
#define RFE_MAGNCTL0_SCL_DIV128                      0x7UL
#define RFE_MAGNCTL0_SCL_DIV256                      0x8UL
// bitfield: MAGNCTL0_PER
#define RFE_MAGNCTL0_PER                             0UL
#define RF24_RFE_MAGNCTL0_PER_S                  0UL
#define RFE_MAGNCTL0_PER_BM                          0x000000FFUL
#define RF24_RFE_MAGNCTL0_PER_M                  0x000000FFUL
// enums for bitfield MAGNCTL0_PER (width: 8)UL
#define RFE_MAGNCTL0_PER_ALLZEROS                    0x00UL
#define RFE_MAGNCTL0_PER_ALLONES                     0xFFUL
// --------------------------------------------------------------
// MAGNCTL1
// 
#define RFE_MAGNCTL1_ADR (RFE_BASE + 0x0094UL)
static volatile unsigned long* const SP_RFE_MAGNCTL1 = (unsigned long*) RFE_MAGNCTL1_ADR;
#define S_RFE_MAGNCTL1 (*SP_RFE_MAGNCTL1)
#define RF24_RFE_O_MAGNCTL1                      148
// bitfield: MAGNCTL1_PERMODE
#define RFE_MAGNCTL1_PERMODE                         12UL
#define RF24_RFE_MAGNCTL1_PERMODE_S              12UL
#define RFE_MAGNCTL1_PERMODE_BM                      0x00001000UL
#define RF24_RFE_MAGNCTL1_PERMODE_M              0x00001000UL
// enums for bitfield MAGNCTL1_PERMODE (width: 1)UL
#define RFE_MAGNCTL1_PERMODE_ONESHOT                 0x0UL
#define RFE_MAGNCTL1_PERMODE_PERIODIC                0x1UL
// bitfield: MAGNCTL1_SCL
#define RFE_MAGNCTL1_SCL                             8UL
#define RF24_RFE_MAGNCTL1_SCL_S                  8UL
#define RFE_MAGNCTL1_SCL_BM                          0x00000F00UL
#define RF24_RFE_MAGNCTL1_SCL_M                  0x00000F00UL
// enums for bitfield MAGNCTL1_SCL (width: 4)UL
#define RFE_MAGNCTL1_SCL_DIV1                        0x0UL
#define RFE_MAGNCTL1_SCL_DIV2                        0x1UL
#define RFE_MAGNCTL1_SCL_DIV4                        0x2UL
#define RFE_MAGNCTL1_SCL_DIV8                        0x3UL
#define RFE_MAGNCTL1_SCL_DIV16                       0x4UL
#define RFE_MAGNCTL1_SCL_DIV32                       0x5UL
#define RFE_MAGNCTL1_SCL_DIV64                       0x6UL
#define RFE_MAGNCTL1_SCL_DIV128                      0x7UL
#define RFE_MAGNCTL1_SCL_DIV256                      0x8UL
// bitfield: MAGNCTL1_PER
#define RFE_MAGNCTL1_PER                             0UL
#define RF24_RFE_MAGNCTL1_PER_S                  0UL
#define RFE_MAGNCTL1_PER_BM                          0x000000FFUL
#define RF24_RFE_MAGNCTL1_PER_M                  0x000000FFUL
// enums for bitfield MAGNCTL1_PER (width: 8)UL
#define RFE_MAGNCTL1_PER_ALLZEROS                    0x00UL
#define RFE_MAGNCTL1_PER_ALLONES                     0xFFUL
// --------------------------------------------------------------
// SPARE0
// 
#define RFE_SPARE0_ADR (RFE_BASE + 0x0098UL)
static volatile unsigned long* const SP_RFE_SPARE0 = (unsigned long*) RFE_SPARE0_ADR;
#define S_RFE_SPARE0 (*SP_RFE_SPARE0)
#define RF24_RFE_O_SPARE0                        152
// bitfield: SPARE0_VAL
#define RFE_SPARE0_VAL                               0UL
#define RF24_RFE_SPARE0_VAL_S                    0UL
#define RFE_SPARE0_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_SPARE0_VAL_M                    0x0000FFFFUL
// enums for bitfield SPARE0_VAL (width: 16)UL
#define RFE_SPARE0_VAL_ALLZEROS                      0x0000UL
#define RFE_SPARE0_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// SPARE1
// 
#define RFE_SPARE1_ADR (RFE_BASE + 0x009CUL)
static volatile unsigned long* const SP_RFE_SPARE1 = (unsigned long*) RFE_SPARE1_ADR;
#define S_RFE_SPARE1 (*SP_RFE_SPARE1)
#define RF24_RFE_O_SPARE1                        156
// bitfield: SPARE1_VAL
#define RFE_SPARE1_VAL                               0UL
#define RF24_RFE_SPARE1_VAL_S                    0UL
#define RFE_SPARE1_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_SPARE1_VAL_M                    0x0000FFFFUL
// enums for bitfield SPARE1_VAL (width: 16)UL
#define RFE_SPARE1_VAL_ALLZEROS                      0x0000UL
#define RFE_SPARE1_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// SPARE2
// 
#define RFE_SPARE2_ADR (RFE_BASE + 0x00A0UL)
static volatile unsigned long* const SP_RFE_SPARE2 = (unsigned long*) RFE_SPARE2_ADR;
#define S_RFE_SPARE2 (*SP_RFE_SPARE2)
#define RF24_RFE_O_SPARE2                        160
// bitfield: SPARE2_VAL
#define RFE_SPARE2_VAL                               0UL
#define RF24_RFE_SPARE2_VAL_S                    0UL
#define RFE_SPARE2_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_SPARE2_VAL_M                    0x0000FFFFUL
// enums for bitfield SPARE2_VAL (width: 16)UL
#define RFE_SPARE2_VAL_ALLZEROS                      0x0000UL
#define RFE_SPARE2_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// SPARE3
// 
#define RFE_SPARE3_ADR (RFE_BASE + 0x00A4UL)
static volatile unsigned long* const SP_RFE_SPARE3 = (unsigned long*) RFE_SPARE3_ADR;
#define S_RFE_SPARE3 (*SP_RFE_SPARE3)
#define RF24_RFE_O_SPARE3                        164
// bitfield: SPARE3_VAL
#define RFE_SPARE3_VAL                               0UL
#define RF24_RFE_SPARE3_VAL_S                    0UL
#define RFE_SPARE3_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_SPARE3_VAL_M                    0x0000FFFFUL
// enums for bitfield SPARE3_VAL (width: 16)UL
#define RFE_SPARE3_VAL_ALLZEROS                      0x0000UL
#define RFE_SPARE3_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// SPARE4
// 
#define RFE_SPARE4_ADR (RFE_BASE + 0x00A8UL)
static volatile unsigned long* const SP_RFE_SPARE4 = (unsigned long*) RFE_SPARE4_ADR;
#define S_RFE_SPARE4 (*SP_RFE_SPARE4)
#define RF24_RFE_O_SPARE4                        168
// bitfield: SPARE4_VAL
#define RFE_SPARE4_VAL                               0UL
#define RF24_RFE_SPARE4_VAL_S                    0UL
#define RFE_SPARE4_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_SPARE4_VAL_M                    0x0000FFFFUL
// enums for bitfield SPARE4_VAL (width: 16)UL
#define RFE_SPARE4_VAL_ALLZEROS                      0x0000UL
#define RFE_SPARE4_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// SPARE5
// 
#define RFE_SPARE5_ADR (RFE_BASE + 0x00ACUL)
static volatile unsigned long* const SP_RFE_SPARE5 = (unsigned long*) RFE_SPARE5_ADR;
#define S_RFE_SPARE5 (*SP_RFE_SPARE5)
#define RF24_RFE_O_SPARE5                        172
// bitfield: SPARE5_VAL
#define RFE_SPARE5_VAL                               0UL
#define RF24_RFE_SPARE5_VAL_S                    0UL
#define RFE_SPARE5_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_SPARE5_VAL_M                    0x0000FFFFUL
// enums for bitfield SPARE5_VAL (width: 16)UL
#define RFE_SPARE5_VAL_ALLZEROS                      0x0000UL
#define RFE_SPARE5_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// LNA
// 
#define RFE_LNA_ADR (RFE_BASE + 0x00B0UL)
static volatile unsigned long* const SP_RFE_LNA = (unsigned long*) RFE_LNA_ADR;
#define S_RFE_LNA (*SP_RFE_LNA)
#define RF24_RFE_O_LNA                           176
// bitfield: LNA_SPARE
#define RFE_LNA_SPARE                                8UL
#define RF24_RFE_LNA_SPARE_S                     8UL
#define RFE_LNA_SPARE_BM                             0x0000FF00UL
#define RF24_RFE_LNA_SPARE_M                     0x0000FF00UL
// enums for bitfield LNA_SPARE (width: 8)UL
#define RFE_LNA_SPARE_DIS                            0x00UL
#define RFE_LNA_SPARE_EN                             0x01UL
// bitfield: LNA_TRIM
#define RFE_LNA_TRIM                                 4UL
#define RF24_RFE_LNA_TRIM_S                      4UL
#define RFE_LNA_TRIM_BM                              0x000000F0UL
#define RF24_RFE_LNA_TRIM_M                      0x000000F0UL
// enums for bitfield LNA_TRIM (width: 4)UL
#define RFE_LNA_TRIM_ZEROS                           0x0UL
#define RFE_LNA_TRIM_ONES                            0xFUL
// bitfield: LNA_BIAS
#define RFE_LNA_BIAS                                 3UL
#define RF24_RFE_LNA_BIAS_S                      3UL
#define RFE_LNA_BIAS_BM                              0x00000008UL
#define RF24_RFE_LNA_BIAS_M                      0x00000008UL
// enums for bitfield LNA_BIAS (width: 1)UL
#define RFE_LNA_BIAS_BGAP                            0x0UL
#define RFE_LNA_BIAS_INT                             0x1UL
// bitfield: LNA_IB
#define RFE_LNA_IB                                   1UL
#define RF24_RFE_LNA_IB_S                        1UL
#define RFE_LNA_IB_BM                                0x00000006UL
#define RF24_RFE_LNA_IB_M                        0x00000006UL
// enums for bitfield LNA_IB (width: 2)UL
#define RFE_LNA_IB_MIN                               0x0UL
#define RFE_LNA_IB_MAX                               0x3UL
// bitfield: LNA_EN
#define RFE_LNA_EN                                   0UL
#define RF24_RFE_LNA_EN_S                        0UL
#define RFE_LNA_EN_BM                                0x00000001UL
#define RF24_RFE_LNA_EN_M                        0x00000001UL
// enums for bitfield LNA_EN (width: 1)UL
#define RFE_LNA_EN_OFF                               0x0UL
#define RFE_LNA_EN_ON                                0x1UL
// --------------------------------------------------------------
// IFAMPRFLDO
// 
#define RFE_IFAMPRFLDO_ADR (RFE_BASE + 0x00B4UL)
static volatile unsigned long* const SP_RFE_IFAMPRFLDO = (unsigned long*) RFE_IFAMPRFLDO_ADR;
#define S_RFE_IFAMPRFLDO (*SP_RFE_IFAMPRFLDO)
#define RF24_RFE_O_IFAMPRFLDO                    180
// bitfield: IFAMPRFLDO_TRIM
#define RFE_IFAMPRFLDO_TRIM                          9UL
#define RF24_RFE_IFAMPRFLDO_TRIM_S               9UL
#define RFE_IFAMPRFLDO_TRIM_BM                       0x0000FE00UL
#define RF24_RFE_IFAMPRFLDO_TRIM_M               0x0000FE00UL
// enums for bitfield IFAMPRFLDO_TRIM (width: 7)UL
#define RFE_IFAMPRFLDO_TRIM_MIN                      0x00UL
#define RFE_IFAMPRFLDO_TRIM_MAX                      0x7EUL
#define RFE_IFAMPRFLDO_TRIM_BYPASS                   0x7FUL
// bitfield: IFAMPRFLDO_EN
#define RFE_IFAMPRFLDO_EN                            8UL
#define RF24_RFE_IFAMPRFLDO_EN_S                 8UL
#define RFE_IFAMPRFLDO_EN_BM                         0x00000100UL
#define RF24_RFE_IFAMPRFLDO_EN_M                 0x00000100UL
// enums for bitfield IFAMPRFLDO_EN (width: 1)UL
#define RFE_IFAMPRFLDO_EN_DIS                        0x0UL
#define RFE_IFAMPRFLDO_EN_EN                         0x1UL
// bitfield: IFAMPRFLDO_AAFCAP
#define RFE_IFAMPRFLDO_AAFCAP                        4UL
#define RF24_RFE_IFAMPRFLDO_AAFCAP_S             4UL
#define RFE_IFAMPRFLDO_AAFCAP_BM                     0x000000F0UL
#define RF24_RFE_IFAMPRFLDO_AAFCAP_M             0x000000F0UL
// enums for bitfield IFAMPRFLDO_AAFCAP (width: 4)UL
#define RFE_IFAMPRFLDO_AAFCAP_MIN                    0x0UL
#define RFE_IFAMPRFLDO_AAFCAP_MAX                    0xFUL
// bitfield: IFAMPRFLDO_IFAMPIB
#define RFE_IFAMPRFLDO_IFAMPIB                       1UL
#define RF24_RFE_IFAMPRFLDO_IFAMPIB_S            1UL
#define RFE_IFAMPRFLDO_IFAMPIB_BM                    0x0000000EUL
#define RF24_RFE_IFAMPRFLDO_IFAMPIB_M            0x0000000EUL
// enums for bitfield IFAMPRFLDO_IFAMPIB (width: 3)UL
#define RFE_IFAMPRFLDO_IFAMPIB_MIN                   0x0UL
#define RFE_IFAMPRFLDO_IFAMPIB_MAX                   0x7UL
// bitfield: IFAMPRFLDO_IFAMP
#define RFE_IFAMPRFLDO_IFAMP                         0UL
#define RF24_RFE_IFAMPRFLDO_IFAMP_S              0UL
#define RFE_IFAMPRFLDO_IFAMP_BM                      0x00000001UL
#define RF24_RFE_IFAMPRFLDO_IFAMP_M              0x00000001UL
// enums for bitfield IFAMPRFLDO_IFAMP (width: 1)UL
#define RFE_IFAMPRFLDO_IFAMP_DIS                     0x0UL
#define RFE_IFAMPRFLDO_IFAMP_EN                      0x1UL
// --------------------------------------------------------------
// PA0
// 
#define RFE_PA0_ADR (RFE_BASE + 0x00B8UL)
static volatile unsigned long* const SP_RFE_PA0 = (unsigned long*) RFE_PA0_ADR;
#define S_RFE_PA0 (*SP_RFE_PA0)
#define RF24_RFE_O_PA0                           184
// bitfield: PA0_SPARE15
#define RFE_PA0_SPARE15                              15UL
#define RF24_RFE_PA0_SPARE15_S                   15UL
#define RFE_PA0_SPARE15_BM                           0x00008000UL
#define RF24_RFE_PA0_SPARE15_M                   0x00008000UL
// enums for bitfield PA0_SPARE15 (width: 1)UL
#define RFE_PA0_SPARE15_ZERO                         0x0UL
#define RFE_PA0_SPARE15_ONE                          0x1UL
// bitfield: PA0_MODE
#define RFE_PA0_MODE                                 14UL
#define RF24_RFE_PA0_MODE_S                      14UL
#define RFE_PA0_MODE_BM                              0x00004000UL
#define RF24_RFE_PA0_MODE_M                      0x00004000UL
// enums for bitfield PA0_MODE (width: 1)UL
#define RFE_PA0_MODE_LOW                             0x0UL
#define RFE_PA0_MODE_HIGH                            0x1UL
// bitfield: PA0_GAIN
#define RFE_PA0_GAIN                                 11UL
#define RF24_RFE_PA0_GAIN_S                      11UL
#define RFE_PA0_GAIN_BM                              0x00003800UL
#define RF24_RFE_PA0_GAIN_M                      0x00003800UL
// enums for bitfield PA0_GAIN (width: 3)UL
#define RFE_PA0_GAIN_MIN                             0x0UL
#define RFE_PA0_GAIN_MAX                             0x7UL
// bitfield: PA0_IB
#define RFE_PA0_IB                                   5UL
#define RF24_RFE_PA0_IB_S                        5UL
#define RFE_PA0_IB_BM                                0x000007E0UL
#define RF24_RFE_PA0_IB_M                        0x000007E0UL
// enums for bitfield PA0_IB (width: 6)UL
#define RFE_PA0_IB_MIN                               0x00UL
#define RFE_PA0_IB_MAX                               0x3FUL
// bitfield: PA0_TRIM
#define RFE_PA0_TRIM                                 0UL
#define RF24_RFE_PA0_TRIM_S                      0UL
#define RFE_PA0_TRIM_BM                              0x0000001FUL
#define RF24_RFE_PA0_TRIM_M                      0x0000001FUL
// enums for bitfield PA0_TRIM (width: 5)UL
#define RFE_PA0_TRIM_MIN                             0x00UL
#define RFE_PA0_TRIM_MAX                             0x1FUL
// --------------------------------------------------------------
// PA1
// 
#define RFE_PA1_ADR (RFE_BASE + 0x00BCUL)
static volatile unsigned long* const SP_RFE_PA1 = (unsigned long*) RFE_PA1_ADR;
#define S_RFE_PA1 (*SP_RFE_PA1)
#define RF24_RFE_O_PA1                           188
// bitfield: PA1_SPARE
#define RFE_PA1_SPARE                                7UL
#define RF24_RFE_PA1_SPARE_S                     7UL
#define RFE_PA1_SPARE_BM                             0x0000FF80UL
#define RF24_RFE_PA1_SPARE_M                     0x0000FF80UL
// enums for bitfield PA1_SPARE (width: 9)UL
#define RFE_PA1_SPARE_MIN                            0x000UL
#define RFE_PA1_SPARE_MAX                            0x003UL
// bitfield: PA1_MIXATST
#define RFE_PA1_MIXATST                              6UL
#define RF24_RFE_PA1_MIXATST_S                   6UL
#define RFE_PA1_MIXATST_BM                           0x00000040UL
#define RF24_RFE_PA1_MIXATST_M                   0x00000040UL
// enums for bitfield PA1_MIXATST (width: 1)UL
#define RFE_PA1_MIXATST_DIS                          0x0UL
#define RFE_PA1_MIXATST_EN                           0x1UL
// bitfield: PA1_LDOITST
#define RFE_PA1_LDOITST                              5UL
#define RF24_RFE_PA1_LDOITST_S                   5UL
#define RFE_PA1_LDOITST_BM                           0x00000020UL
#define RF24_RFE_PA1_LDOITST_M                   0x00000020UL
// enums for bitfield PA1_LDOITST (width: 1)UL
#define RFE_PA1_LDOITST_DIS                          0x0UL
#define RFE_PA1_LDOITST_EN                           0x1UL
// bitfield: PA1_LDOATST
#define RFE_PA1_LDOATST                              4UL
#define RF24_RFE_PA1_LDOATST_S                   4UL
#define RFE_PA1_LDOATST_BM                           0x00000010UL
#define RF24_RFE_PA1_LDOATST_M                   0x00000010UL
// enums for bitfield PA1_LDOATST (width: 1)UL
#define RFE_PA1_LDOATST_DIS                          0x0UL
#define RFE_PA1_LDOATST_EN                           0x1UL
// bitfield: PA1_RC
#define RFE_PA1_RC                                   2UL
#define RF24_RFE_PA1_RC_S                        2UL
#define RFE_PA1_RC_BM                                0x0000000CUL
#define RF24_RFE_PA1_RC_M                        0x0000000CUL
// enums for bitfield PA1_RC (width: 2)UL
#define RFE_PA1_RC_MIN                               0x0UL
#define RFE_PA1_RC_MAX                               0x3UL
// bitfield: PA1_RAMP
#define RFE_PA1_RAMP                                 1UL
#define RF24_RFE_PA1_RAMP_S                      1UL
#define RFE_PA1_RAMP_BM                              0x00000002UL
#define RF24_RFE_PA1_RAMP_M                      0x00000002UL
// enums for bitfield PA1_RAMP (width: 1)UL
#define RFE_PA1_RAMP_DOWN                            0x0UL
#define RFE_PA1_RAMP_UP                              0x1UL
// bitfield: PA1_EN
#define RFE_PA1_EN                                   0UL
#define RF24_RFE_PA1_EN_S                        0UL
#define RFE_PA1_EN_BM                                0x00000001UL
#define RF24_RFE_PA1_EN_M                        0x00000001UL
// enums for bitfield PA1_EN (width: 1)UL
#define RFE_PA1_EN_DIS                               0x0UL
#define RFE_PA1_EN_EN                                0x1UL
// --------------------------------------------------------------
// ULNA
// 
#define RFE_ULNA_ADR (RFE_BASE + 0x00C0UL)
static volatile unsigned long* const SP_RFE_ULNA = (unsigned long*) RFE_ULNA_ADR;
#define S_RFE_ULNA (*SP_RFE_ULNA)
#define RF24_RFE_O_ULNA                          192
// bitfield: ULNA_SPARE
#define RFE_ULNA_SPARE                               0UL
#define RF24_RFE_ULNA_SPARE_S                    0UL
#define RFE_ULNA_SPARE_BM                            0x0000FFFFUL
#define RF24_RFE_ULNA_SPARE_M                    0x0000FFFFUL
// enums for bitfield ULNA_SPARE (width: 16)UL
#define RFE_ULNA_SPARE_ALLZEROS                      0x0000UL
#define RFE_ULNA_SPARE_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// IFADC0
// 
#define RFE_IFADC0_ADR (RFE_BASE + 0x00C4UL)
static volatile unsigned long* const SP_RFE_IFADC0 = (unsigned long*) RFE_IFADC0_ADR;
#define S_RFE_IFADC0 (*SP_RFE_IFADC0)
#define RF24_RFE_O_IFADC0                        196
// bitfield: IFADC0_EXTCLK
#define RFE_IFADC0_EXTCLK                            15UL
#define RF24_RFE_IFADC0_EXTCLK_S                 15UL
#define RFE_IFADC0_EXTCLK_BM                         0x00008000UL
#define RF24_RFE_IFADC0_EXTCLK_M                 0x00008000UL
// enums for bitfield IFADC0_EXTCLK (width: 1)UL
#define RFE_IFADC0_EXTCLK_DIS                        0x0UL
#define RFE_IFADC0_EXTCLK_EN                         0x1UL
// bitfield: IFADC0_DITHERTRIM
#define RFE_IFADC0_DITHERTRIM                        12UL
#define RF24_RFE_IFADC0_DITHERTRIM_S             12UL
#define RFE_IFADC0_DITHERTRIM_BM                     0x00007000UL
#define RF24_RFE_IFADC0_DITHERTRIM_M             0x00007000UL
// enums for bitfield IFADC0_DITHERTRIM (width: 3)UL
#define RFE_IFADC0_DITHERTRIM_ZEROS                  0x0UL
#define RFE_IFADC0_DITHERTRIM_ONES                   0x7UL
// bitfield: IFADC0_DITHEREN
#define RFE_IFADC0_DITHEREN                          10UL
#define RF24_RFE_IFADC0_DITHEREN_S               10UL
#define RFE_IFADC0_DITHEREN_BM                       0x00000C00UL
#define RF24_RFE_IFADC0_DITHEREN_M               0x00000C00UL
// enums for bitfield IFADC0_DITHEREN (width: 2)UL
#define RFE_IFADC0_DITHEREN_DIS                      0x0UL
#define RFE_IFADC0_DITHEREN_ENS                      0x1UL
#define RFE_IFADC0_DITHEREN_ENSD                     0x2UL
#define RFE_IFADC0_DITHEREN_ENG                      0x3UL
// bitfield: IFADC0_ADCIEN
#define RFE_IFADC0_ADCIEN                            9UL
#define RF24_RFE_IFADC0_ADCIEN_S                 9UL
#define RFE_IFADC0_ADCIEN_BM                         0x00000200UL
#define RF24_RFE_IFADC0_ADCIEN_M                 0x00000200UL
// enums for bitfield IFADC0_ADCIEN (width: 1)UL
#define RFE_IFADC0_ADCIEN_DIS                        0x0UL
#define RFE_IFADC0_ADCIEN_EN                         0x1UL
// bitfield: IFADC0_ADCQEN
#define RFE_IFADC0_ADCQEN                            8UL
#define RF24_RFE_IFADC0_ADCQEN_S                 8UL
#define RFE_IFADC0_ADCQEN_BM                         0x00000100UL
#define RF24_RFE_IFADC0_ADCQEN_M                 0x00000100UL
// enums for bitfield IFADC0_ADCQEN (width: 1)UL
#define RFE_IFADC0_ADCQEN_DIS                        0x0UL
#define RFE_IFADC0_ADCQEN_EN                         0x1UL
// bitfield: IFADC0_INT2ADJ
#define RFE_IFADC0_INT2ADJ                           4UL
#define RF24_RFE_IFADC0_INT2ADJ_S                4UL
#define RFE_IFADC0_INT2ADJ_BM                        0x000000F0UL
#define RF24_RFE_IFADC0_INT2ADJ_M                0x000000F0UL
// enums for bitfield IFADC0_INT2ADJ (width: 4)UL
#define RFE_IFADC0_INT2ADJ_ZEROS                     0x0UL
#define RFE_IFADC0_INT2ADJ_ONES                      0xFUL
// bitfield: IFADC0_AAFCAP
#define RFE_IFADC0_AAFCAP                            2UL
#define RF24_RFE_IFADC0_AAFCAP_S                 2UL
#define RFE_IFADC0_AAFCAP_BM                         0x0000000CUL
#define RF24_RFE_IFADC0_AAFCAP_M                 0x0000000CUL
// enums for bitfield IFADC0_AAFCAP (width: 2)UL
#define RFE_IFADC0_AAFCAP_DIS                        0x0UL
#define RFE_IFADC0_AAFCAP_ENS                        0x1UL
#define RFE_IFADC0_AAFCAP_ENSD                       0x2UL
#define RFE_IFADC0_AAFCAP_ENG                        0x3UL
// bitfield: IFADC0_RESERVED
#define RFE_IFADC0_RESERVED                          0UL
#define RF24_RFE_IFADC0_RESERVED_S               0UL
#define RFE_IFADC0_RESERVED_BM                       0x00000003UL
#define RF24_RFE_IFADC0_RESERVED_M               0x00000003UL
// enums for bitfield IFADC0_RESERVED (width: 2)UL
#define RFE_IFADC0_RESERVED_ZEROS                    0x0UL
#define RFE_IFADC0_RESERVED_ONES                     0x3UL
// --------------------------------------------------------------
// IFADC1
// 
#define RFE_IFADC1_ADR (RFE_BASE + 0x00C8UL)
static volatile unsigned long* const SP_RFE_IFADC1 = (unsigned long*) RFE_IFADC1_ADR;
#define S_RFE_IFADC1 (*SP_RFE_IFADC1)
#define RF24_RFE_O_IFADC1                        200
// bitfield: IFADC1_NRZ
#define RFE_IFADC1_NRZ                               15UL
#define RF24_RFE_IFADC1_NRZ_S                    15UL
#define RFE_IFADC1_NRZ_BM                            0x00008000UL
#define RF24_RFE_IFADC1_NRZ_M                    0x00008000UL
// enums for bitfield IFADC1_NRZ (width: 1)UL
#define RFE_IFADC1_NRZ_DIS                           0x0UL
#define RFE_IFADC1_NRZ_EN                            0x1UL
// bitfield: IFADC1_TRIM
#define RFE_IFADC1_TRIM                              9UL
#define RF24_RFE_IFADC1_TRIM_S                   9UL
#define RFE_IFADC1_TRIM_BM                           0x00007E00UL
#define RF24_RFE_IFADC1_TRIM_M                   0x00007E00UL
// enums for bitfield IFADC1_TRIM (width: 6)UL
#define RFE_IFADC1_TRIM_ZEROS                        0x00UL
#define RFE_IFADC1_TRIM_ONES                         0x3FUL
// bitfield: IFADC1_RESERVED8
#define RFE_IFADC1_RESERVED8                         8UL
#define RF24_RFE_IFADC1_RESERVED8_S              8UL
#define RFE_IFADC1_RESERVED8_BM                      0x00000100UL
#define RF24_RFE_IFADC1_RESERVED8_M              0x00000100UL
// enums for bitfield IFADC1_RESERVED8 (width: 1)UL
#define RFE_IFADC1_RESERVED8_DIS                     0x0UL
#define RFE_IFADC1_RESERVED8_EN                      0x1UL
// bitfield: IFADC1_RSTN
#define RFE_IFADC1_RSTN                              7UL
#define RF24_RFE_IFADC1_RSTN_S                   7UL
#define RFE_IFADC1_RSTN_BM                           0x00000080UL
#define RF24_RFE_IFADC1_RSTN_M                   0x00000080UL
// enums for bitfield IFADC1_RSTN (width: 1)UL
#define RFE_IFADC1_RSTN_EN                           0x0UL
#define RFE_IFADC1_RSTN_DIS                          0x1UL
// bitfield: IFADC1_CLKGEN
#define RFE_IFADC1_CLKGEN                            6UL
#define RF24_RFE_IFADC1_CLKGEN_S                 6UL
#define RFE_IFADC1_CLKGEN_BM                         0x00000040UL
#define RF24_RFE_IFADC1_CLKGEN_M                 0x00000040UL
// enums for bitfield IFADC1_CLKGEN (width: 1)UL
#define RFE_IFADC1_CLKGEN_DIS                        0x0UL
#define RFE_IFADC1_CLKGEN_EN                         0x1UL
// bitfield: IFADC1_ADCDIGCLK
#define RFE_IFADC1_ADCDIGCLK                         5UL
#define RF24_RFE_IFADC1_ADCDIGCLK_S              5UL
#define RFE_IFADC1_ADCDIGCLK_BM                      0x00000020UL
#define RF24_RFE_IFADC1_ADCDIGCLK_M              0x00000020UL
// enums for bitfield IFADC1_ADCDIGCLK (width: 1)UL
#define RFE_IFADC1_ADCDIGCLK_DIS                     0x0UL
#define RFE_IFADC1_ADCDIGCLK_EN                      0x1UL
// bitfield: IFADC1_ADCLFSROUT
#define RFE_IFADC1_ADCLFSROUT                        4UL
#define RF24_RFE_IFADC1_ADCLFSROUT_S             4UL
#define RFE_IFADC1_ADCLFSROUT_BM                     0x00000010UL
#define RF24_RFE_IFADC1_ADCLFSROUT_M             0x00000010UL
// enums for bitfield IFADC1_ADCLFSROUT (width: 1)UL
#define RFE_IFADC1_ADCLFSROUT_DIS                    0x0UL
#define RFE_IFADC1_ADCLFSROUT_EN                     0x1UL
// bitfield: IFADC1_LPFTSTMODE
#define RFE_IFADC1_LPFTSTMODE                        1UL
#define RF24_RFE_IFADC1_LPFTSTMODE_S             1UL
#define RFE_IFADC1_LPFTSTMODE_BM                     0x0000000EUL
#define RF24_RFE_IFADC1_LPFTSTMODE_M             0x0000000EUL
// enums for bitfield IFADC1_LPFTSTMODE (width: 3)UL
#define RFE_IFADC1_LPFTSTMODE_DIS                    0x0UL
#define RFE_IFADC1_LPFTSTMODE_EN                     0x1UL
// bitfield: IFADC1_INVCLKOUT
#define RFE_IFADC1_INVCLKOUT                         0UL
#define RF24_RFE_IFADC1_INVCLKOUT_S              0UL
#define RFE_IFADC1_INVCLKOUT_BM                      0x00000001UL
#define RF24_RFE_IFADC1_INVCLKOUT_M              0x00000001UL
// enums for bitfield IFADC1_INVCLKOUT (width: 1)UL
#define RFE_IFADC1_INVCLKOUT_DIS                     0x0UL
#define RFE_IFADC1_INVCLKOUT_EN                      0x1UL
// --------------------------------------------------------------
// IFADCLF
// 
#define RFE_IFADCLF_ADR (RFE_BASE + 0x00CCUL)
static volatile unsigned long* const SP_RFE_IFADCLF = (unsigned long*) RFE_IFADCLF_ADR;
#define S_RFE_IFADCLF (*SP_RFE_IFADCLF)
#define RF24_RFE_O_IFADCLF                       204
// bitfield: IFADCLF_FF3
#define RFE_IFADCLF_FF3                              12UL
#define RF24_RFE_IFADCLF_FF3_S                   12UL
#define RFE_IFADCLF_FF3_BM                           0x0000F000UL
#define RF24_RFE_IFADCLF_FF3_M                   0x0000F000UL
// enums for bitfield IFADCLF_FF3 (width: 4)UL
#define RFE_IFADCLF_FF3_ZEROS                        0x0UL
#define RFE_IFADCLF_FF3_ONES                         0xFUL
// bitfield: IFADCLF_FF2
#define RFE_IFADCLF_FF2                              8UL
#define RF24_RFE_IFADCLF_FF2_S                   8UL
#define RFE_IFADCLF_FF2_BM                           0x00000F00UL
#define RF24_RFE_IFADCLF_FF2_M                   0x00000F00UL
// enums for bitfield IFADCLF_FF2 (width: 4)UL
#define RFE_IFADCLF_FF2_ZEROS                        0x0UL
#define RFE_IFADCLF_FF2_ONES                         0xFUL
// bitfield: IFADCLF_FF1
#define RFE_IFADCLF_FF1                              4UL
#define RF24_RFE_IFADCLF_FF1_S                   4UL
#define RFE_IFADCLF_FF1_BM                           0x000000F0UL
#define RF24_RFE_IFADCLF_FF1_M                   0x000000F0UL
// enums for bitfield IFADCLF_FF1 (width: 4)UL
#define RFE_IFADCLF_FF1_ZEROS                        0x0UL
#define RFE_IFADCLF_FF1_ONES                         0xFUL
// bitfield: IFADCLF_INT3
#define RFE_IFADCLF_INT3                             0UL
#define RF24_RFE_IFADCLF_INT3_S                  0UL
#define RFE_IFADCLF_INT3_BM                          0x0000000FUL
#define RF24_RFE_IFADCLF_INT3_M                  0x0000000FUL
// enums for bitfield IFADCLF_INT3 (width: 4)UL
#define RFE_IFADCLF_INT3_ZEROS                       0x0UL
#define RFE_IFADCLF_INT3_ONES                        0xFUL
// --------------------------------------------------------------
// IFADCQUANT
// 
#define RFE_IFADCQUANT_ADR (RFE_BASE + 0x00D0UL)
static volatile unsigned long* const SP_RFE_IFADCQUANT = (unsigned long*) RFE_IFADCQUANT_ADR;
#define S_RFE_IFADCQUANT (*SP_RFE_IFADCQUANT)
#define RF24_RFE_O_IFADCQUANT                    208
// bitfield: IFADCQUANT_CLKDLYTRIM
#define RFE_IFADCQUANT_CLKDLYTRIM                    14UL
#define RF24_RFE_IFADCQUANT_CLKDLYTRIM_S         14UL
#define RFE_IFADCQUANT_CLKDLYTRIM_BM                 0x0000C000UL
#define RF24_RFE_IFADCQUANT_CLKDLYTRIM_M         0x0000C000UL
// enums for bitfield IFADCQUANT_CLKDLYTRIM (width: 2)UL
#define RFE_IFADCQUANT_CLKDLYTRIM_ZEROS              0x0UL
#define RFE_IFADCQUANT_CLKDLYTRIM_ONES               0x3UL
// bitfield: IFADCQUANT_DBGCALVALIN
#define RFE_IFADCQUANT_DBGCALVALIN                   9UL
#define RF24_RFE_IFADCQUANT_DBGCALVALIN_S        9UL
#define RFE_IFADCQUANT_DBGCALVALIN_BM                0x00003E00UL
#define RF24_RFE_IFADCQUANT_DBGCALVALIN_M        0x00003E00UL
// enums for bitfield IFADCQUANT_DBGCALVALIN (width: 5)UL
#define RFE_IFADCQUANT_DBGCALVALIN_ZEROS             0x00UL
#define RFE_IFADCQUANT_DBGCALVALIN_ONES              0x1FUL
// bitfield: IFADCQUANT_DBGCALLEG
#define RFE_IFADCQUANT_DBGCALLEG                     8UL
#define RF24_RFE_IFADCQUANT_DBGCALLEG_S          8UL
#define RFE_IFADCQUANT_DBGCALLEG_BM                  0x00000100UL
#define RF24_RFE_IFADCQUANT_DBGCALLEG_M          0x00000100UL
// enums for bitfield IFADCQUANT_DBGCALLEG (width: 1)UL
#define RFE_IFADCQUANT_DBGCALLEG_POS                 0x0UL
#define RFE_IFADCQUANT_DBGCALLEG_NEG                 0x1UL
// bitfield: IFADCQUANT_DBGCALMQ
#define RFE_IFADCQUANT_DBGCALMQ                      6UL
#define RF24_RFE_IFADCQUANT_DBGCALMQ_S           6UL
#define RFE_IFADCQUANT_DBGCALMQ_BM                   0x000000C0UL
#define RF24_RFE_IFADCQUANT_DBGCALMQ_M           0x000000C0UL
// enums for bitfield IFADCQUANT_DBGCALMQ (width: 2)UL
#define RFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODZ         0x0UL
#define RFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODN         0x1UL
#define RFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODP         0x2UL
#define RFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODB         0x3UL
// bitfield: IFADCQUANT_DBGCALMI
#define RFE_IFADCQUANT_DBGCALMI                      4UL
#define RF24_RFE_IFADCQUANT_DBGCALMI_S           4UL
#define RFE_IFADCQUANT_DBGCALMI_BM                   0x00000030UL
#define RF24_RFE_IFADCQUANT_DBGCALMI_M           0x00000030UL
// enums for bitfield IFADCQUANT_DBGCALMI (width: 2)UL
#define RFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODZ         0x0UL
#define RFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODN         0x1UL
#define RFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODP         0x2UL
#define RFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODB         0x3UL
// bitfield: IFADCQUANT_AUTOCAL
#define RFE_IFADCQUANT_AUTOCAL                       3UL
#define RF24_RFE_IFADCQUANT_AUTOCAL_S            3UL
#define RFE_IFADCQUANT_AUTOCAL_BM                    0x00000008UL
#define RF24_RFE_IFADCQUANT_AUTOCAL_M            0x00000008UL
// enums for bitfield IFADCQUANT_AUTOCAL (width: 1)UL
#define RFE_IFADCQUANT_AUTOCAL_DIS                   0x0UL
#define RFE_IFADCQUANT_AUTOCAL_EN                    0x1UL
// bitfield: IFADCQUANT_QUANTTHR
#define RFE_IFADCQUANT_QUANTTHR                      0UL
#define RF24_RFE_IFADCQUANT_QUANTTHR_S           0UL
#define RFE_IFADCQUANT_QUANTTHR_BM                   0x00000007UL
#define RF24_RFE_IFADCQUANT_QUANTTHR_M           0x00000007UL
// enums for bitfield IFADCQUANT_QUANTTHR (width: 3)UL
#define RFE_IFADCQUANT_QUANTTHR_ZEROS                0x0UL
#define RFE_IFADCQUANT_QUANTTHR_ONES                 0x7UL
// --------------------------------------------------------------
// IFADCALDO
// 
#define RFE_IFADCALDO_ADR (RFE_BASE + 0x00D4UL)
static volatile unsigned long* const SP_RFE_IFADCALDO = (unsigned long*) RFE_IFADCALDO_ADR;
#define S_RFE_IFADCALDO (*SP_RFE_IFADCALDO)
#define RF24_RFE_O_IFADCALDO                     212
// bitfield: IFADCALDO_ATESTVSSANA
#define RFE_IFADCALDO_ATESTVSSANA                    15UL
#define RF24_RFE_IFADCALDO_ATESTVSSANA_S         15UL
#define RFE_IFADCALDO_ATESTVSSANA_BM                 0x00008000UL
#define RF24_RFE_IFADCALDO_ATESTVSSANA_M         0x00008000UL
// enums for bitfield IFADCALDO_ATESTVSSANA (width: 1)UL
#define RFE_IFADCALDO_ATESTVSSANA_DIS                0x0UL
#define RFE_IFADCALDO_ATESTVSSANA_EN                 0x1UL
// bitfield: IFADCALDO_RESERVED
#define RFE_IFADCALDO_RESERVED                       14UL
#define RF24_RFE_IFADCALDO_RESERVED_S            14UL
#define RFE_IFADCALDO_RESERVED_BM                    0x00004000UL
#define RF24_RFE_IFADCALDO_RESERVED_M            0x00004000UL
// enums for bitfield IFADCALDO_RESERVED (width: 1)UL
#define RFE_IFADCALDO_RESERVED_ZEROS                 0x0UL
#define RFE_IFADCALDO_RESERVED_ONES                  0x1UL
// bitfield: IFADCALDO_TRIMOUT
#define RFE_IFADCALDO_TRIMOUT                        8UL
#define RF24_RFE_IFADCALDO_TRIMOUT_S             8UL
#define RFE_IFADCALDO_TRIMOUT_BM                     0x00003F00UL
#define RF24_RFE_IFADCALDO_TRIMOUT_M             0x00003F00UL
// enums for bitfield IFADCALDO_TRIMOUT (width: 6)UL
#define RFE_IFADCALDO_TRIMOUT_ZEROS                  0x00UL
#define RFE_IFADCALDO_TRIMOUT_ONES                   0x3FUL
// bitfield: IFADCALDO_DUMMY
#define RFE_IFADCALDO_DUMMY                          7UL
#define RF24_RFE_IFADCALDO_DUMMY_S               7UL
#define RFE_IFADCALDO_DUMMY_BM                       0x00000080UL
#define RF24_RFE_IFADCALDO_DUMMY_M               0x00000080UL
// enums for bitfield IFADCALDO_DUMMY (width: 1)UL
#define RFE_IFADCALDO_DUMMY_DIS                      0x0UL
#define RFE_IFADCALDO_DUMMY_EN                       0x1UL
// bitfield: IFADCALDO_ATESTOUT
#define RFE_IFADCALDO_ATESTOUT                       6UL
#define RF24_RFE_IFADCALDO_ATESTOUT_S            6UL
#define RFE_IFADCALDO_ATESTOUT_BM                    0x00000040UL
#define RF24_RFE_IFADCALDO_ATESTOUT_M            0x00000040UL
// enums for bitfield IFADCALDO_ATESTOUT (width: 1)UL
#define RFE_IFADCALDO_ATESTOUT_DIS                   0x0UL
#define RFE_IFADCALDO_ATESTOUT_EN                    0x1UL
// bitfield: IFADCALDO_ATSTLDOFB
#define RFE_IFADCALDO_ATSTLDOFB                      5UL
#define RF24_RFE_IFADCALDO_ATSTLDOFB_S           5UL
#define RFE_IFADCALDO_ATSTLDOFB_BM                   0x00000020UL
#define RF24_RFE_IFADCALDO_ATSTLDOFB_M           0x00000020UL
// enums for bitfield IFADCALDO_ATSTLDOFB (width: 1)UL
#define RFE_IFADCALDO_ATSTLDOFB_DIS                  0x0UL
#define RFE_IFADCALDO_ATSTLDOFB_EN                   0x1UL
// bitfield: IFADCALDO_ATESTERRAMP
#define RFE_IFADCALDO_ATESTERRAMP                    4UL
#define RF24_RFE_IFADCALDO_ATESTERRAMP_S         4UL
#define RFE_IFADCALDO_ATESTERRAMP_BM                 0x00000010UL
#define RF24_RFE_IFADCALDO_ATESTERRAMP_M         0x00000010UL
// enums for bitfield IFADCALDO_ATESTERRAMP (width: 1)UL
#define RFE_IFADCALDO_ATESTERRAMP_DIS                0x0UL
#define RFE_IFADCALDO_ATESTERRAMP_EN                 0x1UL
// bitfield: IFADCALDO_ITEST
#define RFE_IFADCALDO_ITEST                          3UL
#define RF24_RFE_IFADCALDO_ITEST_S               3UL
#define RFE_IFADCALDO_ITEST_BM                       0x00000008UL
#define RF24_RFE_IFADCALDO_ITEST_M               0x00000008UL
// enums for bitfield IFADCALDO_ITEST (width: 1)UL
#define RFE_IFADCALDO_ITEST_DIS                      0x0UL
#define RFE_IFADCALDO_ITEST_EN                       0x1UL
// bitfield: IFADCALDO_BYPASS
#define RFE_IFADCALDO_BYPASS                         2UL
#define RF24_RFE_IFADCALDO_BYPASS_S              2UL
#define RFE_IFADCALDO_BYPASS_BM                      0x00000004UL
#define RF24_RFE_IFADCALDO_BYPASS_M              0x00000004UL
// enums for bitfield IFADCALDO_BYPASS (width: 1)UL
#define RFE_IFADCALDO_BYPASS_DIS                     0x0UL
#define RFE_IFADCALDO_BYPASS_EN                      0x1UL
// bitfield: IFADCALDO_CLAMP
#define RFE_IFADCALDO_CLAMP                          1UL
#define RF24_RFE_IFADCALDO_CLAMP_S               1UL
#define RFE_IFADCALDO_CLAMP_BM                       0x00000002UL
#define RF24_RFE_IFADCALDO_CLAMP_M               0x00000002UL
// enums for bitfield IFADCALDO_CLAMP (width: 1)UL
#define RFE_IFADCALDO_CLAMP_DIS                      0x0UL
#define RFE_IFADCALDO_CLAMP_EN                       0x1UL
// bitfield: IFADCALDO_CTL
#define RFE_IFADCALDO_CTL                            0UL
#define RF24_RFE_IFADCALDO_CTL_S                 0UL
#define RFE_IFADCALDO_CTL_BM                         0x00000001UL
#define RF24_RFE_IFADCALDO_CTL_M                 0x00000001UL
// enums for bitfield IFADCALDO_CTL (width: 1)UL
#define RFE_IFADCALDO_CTL_DIS                        0x0UL
#define RFE_IFADCALDO_CTL_EN                         0x1UL
// --------------------------------------------------------------
// IFADCDLDO
// 
#define RFE_IFADCDLDO_ADR (RFE_BASE + 0x00D8UL)
static volatile unsigned long* const SP_RFE_IFADCDLDO = (unsigned long*) RFE_IFADCDLDO_ADR;
#define S_RFE_IFADCDLDO (*SP_RFE_IFADCDLDO)
#define RF24_RFE_O_IFADCDLDO                     216
// bitfield: IFADCDLDO_RESERVED
#define RFE_IFADCDLDO_RESERVED                       14UL
#define RF24_RFE_IFADCDLDO_RESERVED_S            14UL
#define RFE_IFADCDLDO_RESERVED_BM                    0x0000C000UL
#define RF24_RFE_IFADCDLDO_RESERVED_M            0x0000C000UL
// enums for bitfield IFADCDLDO_RESERVED (width: 2)UL
#define RFE_IFADCDLDO_RESERVED_ZEROS                 0x0UL
#define RFE_IFADCDLDO_RESERVED_ONES                  0x3UL
// bitfield: IFADCDLDO_TRIMOUT
#define RFE_IFADCDLDO_TRIMOUT                        8UL
#define RF24_RFE_IFADCDLDO_TRIMOUT_S             8UL
#define RFE_IFADCDLDO_TRIMOUT_BM                     0x00003F00UL
#define RF24_RFE_IFADCDLDO_TRIMOUT_M             0x00003F00UL
// enums for bitfield IFADCDLDO_TRIMOUT (width: 6)UL
#define RFE_IFADCDLDO_TRIMOUT_ZEROS                  0x00UL
#define RFE_IFADCDLDO_TRIMOUT_ONES                   0x3FUL
// bitfield: IFADCDLDO_DUMMY
#define RFE_IFADCDLDO_DUMMY                          7UL
#define RF24_RFE_IFADCDLDO_DUMMY_S               7UL
#define RFE_IFADCDLDO_DUMMY_BM                       0x00000080UL
#define RF24_RFE_IFADCDLDO_DUMMY_M               0x00000080UL
// enums for bitfield IFADCDLDO_DUMMY (width: 1)UL
#define RFE_IFADCDLDO_DUMMY_DIS                      0x0UL
#define RFE_IFADCDLDO_DUMMY_EN                       0x1UL
// bitfield: IFADCDLDO_ATESTOUT
#define RFE_IFADCDLDO_ATESTOUT                       6UL
#define RF24_RFE_IFADCDLDO_ATESTOUT_S            6UL
#define RFE_IFADCDLDO_ATESTOUT_BM                    0x00000040UL
#define RF24_RFE_IFADCDLDO_ATESTOUT_M            0x00000040UL
// enums for bitfield IFADCDLDO_ATESTOUT (width: 1)UL
#define RFE_IFADCDLDO_ATESTOUT_DIS                   0x0UL
#define RFE_IFADCDLDO_ATESTOUT_EN                    0x1UL
// bitfield: IFADCDLDO_ATSTBGP
#define RFE_IFADCDLDO_ATSTBGP                        5UL
#define RF24_RFE_IFADCDLDO_ATSTBGP_S             5UL
#define RFE_IFADCDLDO_ATSTBGP_BM                     0x00000020UL
#define RF24_RFE_IFADCDLDO_ATSTBGP_M             0x00000020UL
// enums for bitfield IFADCDLDO_ATSTBGP (width: 1)UL
#define RFE_IFADCDLDO_ATSTBGP_DIS                    0x0UL
#define RFE_IFADCDLDO_ATSTBGP_EN                     0x1UL
// bitfield: IFADCDLDO_ATESTERRAMP
#define RFE_IFADCDLDO_ATESTERRAMP                    4UL
#define RF24_RFE_IFADCDLDO_ATESTERRAMP_S         4UL
#define RFE_IFADCDLDO_ATESTERRAMP_BM                 0x00000010UL
#define RF24_RFE_IFADCDLDO_ATESTERRAMP_M         0x00000010UL
// enums for bitfield IFADCDLDO_ATESTERRAMP (width: 1)UL
#define RFE_IFADCDLDO_ATESTERRAMP_DIS                0x0UL
#define RFE_IFADCDLDO_ATESTERRAMP_EN                 0x1UL
// bitfield: IFADCDLDO_ITEST
#define RFE_IFADCDLDO_ITEST                          3UL
#define RF24_RFE_IFADCDLDO_ITEST_S               3UL
#define RFE_IFADCDLDO_ITEST_BM                       0x00000008UL
#define RF24_RFE_IFADCDLDO_ITEST_M               0x00000008UL
// enums for bitfield IFADCDLDO_ITEST (width: 1)UL
#define RFE_IFADCDLDO_ITEST_DIS                      0x0UL
#define RFE_IFADCDLDO_ITEST_EN                       0x1UL
// bitfield: IFADCDLDO_BYPASS
#define RFE_IFADCDLDO_BYPASS                         2UL
#define RF24_RFE_IFADCDLDO_BYPASS_S              2UL
#define RFE_IFADCDLDO_BYPASS_BM                      0x00000004UL
#define RF24_RFE_IFADCDLDO_BYPASS_M              0x00000004UL
// enums for bitfield IFADCDLDO_BYPASS (width: 1)UL
#define RFE_IFADCDLDO_BYPASS_DIS                     0x0UL
#define RFE_IFADCDLDO_BYPASS_EN                      0x1UL
// bitfield: IFADCDLDO_CLAMP
#define RFE_IFADCDLDO_CLAMP                          1UL
#define RF24_RFE_IFADCDLDO_CLAMP_S               1UL
#define RFE_IFADCDLDO_CLAMP_BM                       0x00000002UL
#define RF24_RFE_IFADCDLDO_CLAMP_M               0x00000002UL
// enums for bitfield IFADCDLDO_CLAMP (width: 1)UL
#define RFE_IFADCDLDO_CLAMP_DIS                      0x0UL
#define RFE_IFADCDLDO_CLAMP_EN                       0x1UL
// bitfield: IFADCDLDO_CTL
#define RFE_IFADCDLDO_CTL                            0UL
#define RF24_RFE_IFADCDLDO_CTL_S                 0UL
#define RFE_IFADCDLDO_CTL_BM                         0x00000001UL
#define RF24_RFE_IFADCDLDO_CTL_M                 0x00000001UL
// enums for bitfield IFADCDLDO_CTL (width: 1)UL
#define RFE_IFADCDLDO_CTL_DIS                        0x0UL
#define RFE_IFADCDLDO_CTL_EN                         0x1UL
// --------------------------------------------------------------
// IFADCTST
// 
#define RFE_IFADCTST_ADR (RFE_BASE + 0x00DCUL)
static volatile unsigned long* const SP_RFE_IFADCTST = (unsigned long*) RFE_IFADCTST_ADR;
#define S_RFE_IFADCTST (*SP_RFE_IFADCTST)
#define RF24_RFE_O_IFADCTST                      220
// bitfield: IFADCTST_EXTCURR
#define RFE_IFADCTST_EXTCURR                         7UL
#define RF24_RFE_IFADCTST_EXTCURR_S              7UL
#define RFE_IFADCTST_EXTCURR_BM                      0x00000080UL
#define RF24_RFE_IFADCTST_EXTCURR_M              0x00000080UL
// enums for bitfield IFADCTST_EXTCURR (width: 1)UL
#define RFE_IFADCTST_EXTCURR_DIS                     0x0UL
#define RFE_IFADCTST_EXTCURR_EN                      0x1UL
// bitfield: IFADCTST_QCALDBIQ
#define RFE_IFADCTST_QCALDBIQ                        6UL
#define RF24_RFE_IFADCTST_QCALDBIQ_S             6UL
#define RFE_IFADCTST_QCALDBIQ_BM                     0x00000040UL
#define RF24_RFE_IFADCTST_QCALDBIQ_M             0x00000040UL
// enums for bitfield IFADCTST_QCALDBIQ (width: 1)UL
#define RFE_IFADCTST_QCALDBIQ_COMP0                  0x0UL
#define RFE_IFADCTST_QCALDBIQ_COMP1                  0x1UL
// bitfield: IFADCTST_QCALDBC
#define RFE_IFADCTST_QCALDBC                         5UL
#define RF24_RFE_IFADCTST_QCALDBC_S              5UL
#define RFE_IFADCTST_QCALDBC_BM                      0x00000020UL
#define RF24_RFE_IFADCTST_QCALDBC_M              0x00000020UL
// enums for bitfield IFADCTST_QCALDBC (width: 1)UL
#define RFE_IFADCTST_QCALDBC_COMP0                   0x0UL
#define RFE_IFADCTST_QCALDBC_COMP1                   0x1UL
// bitfield: IFADCTST_SEL
#define RFE_IFADCTST_SEL                             0UL
#define RF24_RFE_IFADCTST_SEL_S                  0UL
#define RFE_IFADCTST_SEL_BM                          0x0000001FUL
#define RF24_RFE_IFADCTST_SEL_M                  0x0000001FUL
// enums for bitfield IFADCTST_SEL (width: 5)UL
#define RFE_IFADCTST_SEL_NONE                        0x00UL
#define RFE_IFADCTST_SEL_EXTCLKN1                    0x1FUL
// --------------------------------------------------------------
// ATSTREFL
// 
#define RFE_ATSTREFL_ADR (RFE_BASE + 0x00E0UL)
static volatile unsigned long* const SP_RFE_ATSTREFL = (unsigned long*) RFE_ATSTREFL_ADR;
#define S_RFE_ATSTREFL (*SP_RFE_ATSTREFL)
#define RF24_RFE_O_ATSTREFL                      224
// bitfield: ATSTREFL_MUXLSB
#define RFE_ATSTREFL_MUXLSB                          0UL
#define RF24_RFE_ATSTREFL_MUXLSB_S               0UL
#define RFE_ATSTREFL_MUXLSB_BM                       0x0000FFFFUL
#define RF24_RFE_ATSTREFL_MUXLSB_M               0x0000FFFFUL
// enums for bitfield ATSTREFL_MUXLSB (width: 16)UL
#define RFE_ATSTREFL_MUXLSB_DIS                      0x0000UL
#define RFE_ATSTREFL_MUXLSB_FE_OUTIP                 0x0001UL
#define RFE_ATSTREFL_MUXLSB_FE_OUTIN                 0x0002UL
#define RFE_ATSTREFL_MUXLSB_FE_OUTQP                 0x0004UL
#define RFE_ATSTREFL_MUXLSB_FE_OUTQN                 0x0008UL
#define RFE_ATSTREFL_MUXLSB_FE_OUTIN_2               0x0020UL
#define RFE_ATSTREFL_MUXLSB_FE_OUTIP_2               0x0010UL
#define RFE_ATSTREFL_MUXLSB_MIX_OUTIP                0x0040UL
#define RFE_ATSTREFL_MUXLSB_MIX_OUTIN                0x0080UL
#define RFE_ATSTREFL_MUXLSB_MIX_OUTQP                0x0100UL
#define RFE_ATSTREFL_MUXLSB_MIX_OUTQN                0x0200UL
#define RFE_ATSTREFL_MUXLSB_PA_PEAK_OUTP             0x0400UL
#define RFE_ATSTREFL_MUXLSB_PA_PEAK_OUTN             0x0800UL
#define RFE_ATSTREFL_MUXLSB_LDO_ITEST                0x2000UL
#define RFE_ATSTREFL_MUXLSB_LDO_VTEST                0x4000UL
#define RFE_ATSTREFL_MUXLSB_IFADC_ATB                0x8000UL
// --------------------------------------------------------------
// ATSTREFH
// 
#define RFE_ATSTREFH_ADR (RFE_BASE + 0x00E4UL)
static volatile unsigned long* const SP_RFE_ATSTREFH = (unsigned long*) RFE_ATSTREFH_ADR;
#define S_RFE_ATSTREFH (*SP_RFE_ATSTREFH)
#define RF24_RFE_O_ATSTREFH                      228
// bitfield: ATSTREFH_VREFBPDIS
#define RFE_ATSTREFH_VREFBPDIS                       15UL
#define RF24_RFE_ATSTREFH_VREFBPDIS_S            15UL
#define RFE_ATSTREFH_VREFBPDIS_BM                    0x00008000UL
#define RF24_RFE_ATSTREFH_VREFBPDIS_M            0x00008000UL
// enums for bitfield ATSTREFH_VREFBPDIS (width: 1)UL
#define RFE_ATSTREFH_VREFBPDIS_BPEN                  0x0UL
#define RFE_ATSTREFH_VREFBPDIS_BPDIS                 0x1UL
// bitfield: ATSTREFH_IREFTRIM
#define RFE_ATSTREFH_IREFTRIM                        10UL
#define RF24_RFE_ATSTREFH_IREFTRIM_S             10UL
#define RFE_ATSTREFH_IREFTRIM_BM                     0x00007C00UL
#define RF24_RFE_ATSTREFH_IREFTRIM_M             0x00007C00UL
// enums for bitfield ATSTREFH_IREFTRIM (width: 5)UL
#define RFE_ATSTREFH_IREFTRIM_ZEROS                  0x00UL
#define RFE_ATSTREFH_IREFTRIM_ONES                   0x1FUL
// bitfield: ATSTREFH_BIAS
#define RFE_ATSTREFH_BIAS                            9UL
#define RF24_RFE_ATSTREFH_BIAS_S                 9UL
#define RFE_ATSTREFH_BIAS_BM                         0x00000200UL
#define RF24_RFE_ATSTREFH_BIAS_M                 0x00000200UL
// enums for bitfield ATSTREFH_BIAS (width: 1)UL
#define RFE_ATSTREFH_BIAS_DIS                        0x0UL
#define RFE_ATSTREFH_BIAS_EN                         0x1UL
// bitfield: ATSTREFH_OUTPUT2
#define RFE_ATSTREFH_OUTPUT2                         8UL
#define RF24_RFE_ATSTREFH_OUTPUT2_S              8UL
#define RFE_ATSTREFH_OUTPUT2_BM                      0x00000100UL
#define RF24_RFE_ATSTREFH_OUTPUT2_M              0x00000100UL
// enums for bitfield ATSTREFH_OUTPUT2 (width: 1)UL
#define RFE_ATSTREFH_OUTPUT2_DIS                     0x0UL
#define RFE_ATSTREFH_OUTPUT2_EN                      0x1UL
// bitfield: ATSTREFH_OUTPUT1
#define RFE_ATSTREFH_OUTPUT1                         7UL
#define RF24_RFE_ATSTREFH_OUTPUT1_S              7UL
#define RFE_ATSTREFH_OUTPUT1_BM                      0x00000080UL
#define RF24_RFE_ATSTREFH_OUTPUT1_M              0x00000080UL
// enums for bitfield ATSTREFH_OUTPUT1 (width: 1)UL
#define RFE_ATSTREFH_OUTPUT1_DIS                     0x0UL
#define RFE_ATSTREFH_OUTPUT1_EN                      0x1UL
// bitfield: ATSTREFH_MUXMSB
#define RFE_ATSTREFH_MUXMSB                          0UL
#define RF24_RFE_ATSTREFH_MUXMSB_S               0UL
#define RFE_ATSTREFH_MUXMSB_BM                       0x0000007FUL
#define RF24_RFE_ATSTREFH_MUXMSB_M               0x0000007FUL
// enums for bitfield ATSTREFH_MUXMSB (width: 7)UL
#define RFE_ATSTREFH_MUXMSB_DIS                      0x00UL
#define RFE_ATSTREFH_MUXMSB_IFADC_ATB                0x01UL
#define RFE_ATSTREFH_MUXMSB_REFSYS_IREF              0x04UL
#define RFE_ATSTREFH_MUXMSB_DIVBUF_PMOS_BIAS         0x08UL
#define RFE_ATSTREFH_MUXMSB_DIVBUF_NMOS_BIAS         0x10UL
// --------------------------------------------------------------
// DCO
// 
#define RFE_DCO_ADR (RFE_BASE + 0x00E8UL)
static volatile unsigned long* const SP_RFE_DCO = (unsigned long*) RFE_DCO_ADR;
#define S_RFE_DCO (*SP_RFE_DCO)
#define RF24_RFE_O_DCO                           232
// bitfield: DCO_MTDCSPARE
#define RFE_DCO_MTDCSPARE                            9UL
#define RF24_RFE_DCO_MTDCSPARE_S                 9UL
#define RFE_DCO_MTDCSPARE_BM                         0x00000600UL
#define RF24_RFE_DCO_MTDCSPARE_M                 0x00000600UL
// enums for bitfield DCO_MTDCSPARE (width: 2)UL
#define RFE_DCO_MTDCSPARE_EN                         0x0UL
#define RFE_DCO_MTDCSPARE_DIS                        0x1UL
// bitfield: DCO_SPARE7
#define RFE_DCO_SPARE7                               7UL
#define RF24_RFE_DCO_SPARE7_S                    7UL
#define RFE_DCO_SPARE7_BM                            0x00000180UL
#define RF24_RFE_DCO_SPARE7_M                    0x00000180UL
// enums for bitfield DCO_SPARE7 (width: 2)UL
#define RFE_DCO_SPARE7_ZERO                          0x0UL
#define RFE_DCO_SPARE7_ONE                           0x1UL
// bitfield: DCO_TAILRESTRIM
#define RFE_DCO_TAILRESTRIM                          3UL
#define RF24_RFE_DCO_TAILRESTRIM_S               3UL
#define RFE_DCO_TAILRESTRIM_BM                       0x00000078UL
#define RF24_RFE_DCO_TAILRESTRIM_M               0x00000078UL
// enums for bitfield DCO_TAILRESTRIM (width: 4)UL
#define RFE_DCO_TAILRESTRIM_ALLZEROS                 0x0UL
#define RFE_DCO_TAILRESTRIM_ALLONES                  0xFUL
// bitfield: DCO_RTRIMCAP
#define RFE_DCO_RTRIMCAP                             2UL
#define RF24_RFE_DCO_RTRIMCAP_S                  2UL
#define RFE_DCO_RTRIMCAP_BM                          0x00000004UL
#define RF24_RFE_DCO_RTRIMCAP_M                  0x00000004UL
// enums for bitfield DCO_RTRIMCAP (width: 1)UL
#define RFE_DCO_RTRIMCAP_DIS                         0x0UL
#define RFE_DCO_RTRIMCAP_EN                          0x1UL
// bitfield: DCO_CNRCAP
#define RFE_DCO_CNRCAP                               1UL
#define RF24_RFE_DCO_CNRCAP_S                    1UL
#define RFE_DCO_CNRCAP_BM                            0x00000002UL
#define RF24_RFE_DCO_CNRCAP_M                    0x00000002UL
// enums for bitfield DCO_CNRCAP (width: 1)UL
#define RFE_DCO_CNRCAP_DEFAULT                       0x0UL
#define RFE_DCO_CNRCAP__50MHZ                        0x1UL
// bitfield: DCO_CRSCAPCM
#define RFE_DCO_CRSCAPCM                             0UL
#define RF24_RFE_DCO_CRSCAPCM_S                  0UL
#define RFE_DCO_CRSCAPCM_BM                          0x00000001UL
#define RF24_RFE_DCO_CRSCAPCM_M                  0x00000001UL
// enums for bitfield DCO_CRSCAPCM (width: 1)UL
#define RFE_DCO_CRSCAPCM_DEFAULT                     0x0UL
#define RFE_DCO_CRSCAPCM_REDUCED                     0x1UL
// --------------------------------------------------------------
// DIV
// 
#define RFE_DIV_ADR (RFE_BASE + 0x00ECUL)
static volatile unsigned long* const SP_RFE_DIV = (unsigned long*) RFE_DIV_ADR;
#define S_RFE_DIV (*SP_RFE_DIV)
#define RF24_RFE_O_DIV                           236
// bitfield: DIV_PDET
#define RFE_DIV_PDET                                 15UL
#define RF24_RFE_DIV_PDET_S                      15UL
#define RFE_DIV_PDET_BM                              0x00008000UL
#define RF24_RFE_DIV_PDET_M                      0x00008000UL
// enums for bitfield DIV_PDET (width: 1)UL
#define RFE_DIV_PDET_DIS                             0x0UL
#define RFE_DIV_PDET_EN                              0x1UL
// bitfield: DIV_NMIREFTRIM
#define RFE_DIV_NMIREFTRIM                           12UL
#define RF24_RFE_DIV_NMIREFTRIM_S                12UL
#define RFE_DIV_NMIREFTRIM_BM                        0x00007000UL
#define RF24_RFE_DIV_NMIREFTRIM_M                0x00007000UL
// enums for bitfield DIV_NMIREFTRIM (width: 3)UL
#define RFE_DIV_NMIREFTRIM_ALLZEROS                  0x0UL
#define RFE_DIV_NMIREFTRIM_ALLONES                   0x7UL
// bitfield: DIV_PMIREFTRIM
#define RFE_DIV_PMIREFTRIM                           9UL
#define RF24_RFE_DIV_PMIREFTRIM_S                9UL
#define RFE_DIV_PMIREFTRIM_BM                        0x00000E00UL
#define RF24_RFE_DIV_PMIREFTRIM_M                0x00000E00UL
// enums for bitfield DIV_PMIREFTRIM (width: 3)UL
#define RFE_DIV_PMIREFTRIM_ALLZEROS                  0x0UL
#define RFE_DIV_PMIREFTRIM_ALLONES                   0x7UL
// bitfield: DIV_TXBBOOST
#define RFE_DIV_TXBBOOST                             8UL
#define RF24_RFE_DIV_TXBBOOST_S                  8UL
#define RFE_DIV_TXBBOOST_BM                          0x00000100UL
#define RF24_RFE_DIV_TXBBOOST_M                  0x00000100UL
// enums for bitfield DIV_TXBBOOST (width: 1)UL
#define RFE_DIV_TXBBOOST_DEFAULT                     0x0UL
#define RFE_DIV_TXBBOOST_INCREASED                   0x1UL
// bitfield: DIV_S1GFRC
#define RFE_DIV_S1GFRC                               7UL
#define RF24_RFE_DIV_S1GFRC_S                    7UL
#define RFE_DIV_S1GFRC_BM                            0x00000080UL
#define RF24_RFE_DIV_S1GFRC_M                    0x00000080UL
// enums for bitfield DIV_S1GFRC (width: 1)UL
#define RFE_DIV_S1GFRC_DIS                           0x0UL
#define RFE_DIV_S1GFRC_EN                            0x1UL
// bitfield: DIV_BUFGAIN
#define RFE_DIV_BUFGAIN                              5UL
#define RF24_RFE_DIV_BUFGAIN_S                   5UL
#define RFE_DIV_BUFGAIN_BM                           0x00000060UL
#define RF24_RFE_DIV_BUFGAIN_M                   0x00000060UL
// enums for bitfield DIV_BUFGAIN (width: 2)UL
#define RFE_DIV_BUFGAIN_MAX                          0x0UL
#define RFE_DIV_BUFGAIN__80_PST                      0x1UL
#define RFE_DIV_BUFGAIN_DONT_USE                     0x2UL
#define RFE_DIV_BUFGAIN__60_PST                      0x3UL
// bitfield: DIV_BIAS
#define RFE_DIV_BIAS                                 4UL
#define RF24_RFE_DIV_BIAS_S                      4UL
#define RFE_DIV_BIAS_BM                              0x00000010UL
#define RF24_RFE_DIV_BIAS_M                      0x00000010UL
// enums for bitfield DIV_BIAS (width: 1)UL
#define RFE_DIV_BIAS_ALTERNATIVE                     0x0UL
#define RFE_DIV_BIAS_DEFAULT                         0x1UL
// bitfield: DIV_OUT
#define RFE_DIV_OUT                                  3UL
#define RF24_RFE_DIV_OUT_S                       3UL
#define RFE_DIV_OUT_BM                               0x00000008UL
#define RF24_RFE_DIV_OUT_M                       0x00000008UL
// enums for bitfield DIV_OUT (width: 1)UL
#define RFE_DIV_OUT_FE_S1G                           0x0UL
#define RFE_DIV_OUT_FE_2G4                           0x1UL
// bitfield: DIV_RATIO
#define RFE_DIV_RATIO                                0UL
#define RF24_RFE_DIV_RATIO_S                     0UL
#define RFE_DIV_RATIO_BM                             0x00000007UL
#define RF24_RFE_DIV_RATIO_M                     0x00000007UL
// enums for bitfield DIV_RATIO (width: 3)UL
#define RFE_DIV_RATIO_DIV2                           0x0UL
#define RFE_DIV_RATIO_DIV4                           0x1UL
#define RFE_DIV_RATIO_DIV5                           0x4UL
#define RFE_DIV_RATIO_DIV6                           0x2UL
#define RFE_DIV_RATIO_DIV10                          0x5UL
#define RFE_DIV_RATIO_DIV12                          0x3UL
#define RFE_DIV_RATIO_DIV15                          0x6UL
#define RFE_DIV_RATIO_DIV30                          0x7UL
// --------------------------------------------------------------
// DIVLDO
// 
#define RFE_DIVLDO_ADR (RFE_BASE + 0x00F0UL)
static volatile unsigned long* const SP_RFE_DIVLDO = (unsigned long*) RFE_DIVLDO_ADR;
#define S_RFE_DIVLDO (*SP_RFE_DIVLDO)
#define RF24_RFE_O_DIVLDO                        240
// bitfield: DIVLDO_SPARE15
#define RFE_DIVLDO_SPARE15                           15UL
#define RF24_RFE_DIVLDO_SPARE15_S                15UL
#define RFE_DIVLDO_SPARE15_BM                        0x00008000UL
#define RF24_RFE_DIVLDO_SPARE15_M                0x00008000UL
// enums for bitfield DIVLDO_SPARE15 (width: 1)UL
#define RFE_DIVLDO_SPARE15_ZEROS                     0x0UL
#define RFE_DIVLDO_SPARE15_ONES                      0x1UL
// bitfield: DIVLDO_VOUTTRIM
#define RFE_DIVLDO_VOUTTRIM                          8UL
#define RF24_RFE_DIVLDO_VOUTTRIM_S               8UL
#define RFE_DIVLDO_VOUTTRIM_BM                       0x00007F00UL
#define RF24_RFE_DIVLDO_VOUTTRIM_M               0x00007F00UL
// enums for bitfield DIVLDO_VOUTTRIM (width: 7)UL
#define RFE_DIVLDO_VOUTTRIM_ZEROS                    0x00UL
#define RFE_DIVLDO_VOUTTRIM_ONES                     0x7FUL
// bitfield: DIVLDO_ITST
#define RFE_DIVLDO_ITST                              7UL
#define RF24_RFE_DIVLDO_ITST_S                   7UL
#define RFE_DIVLDO_ITST_BM                           0x00000080UL
#define RF24_RFE_DIVLDO_ITST_M                   0x00000080UL
// enums for bitfield DIVLDO_ITST (width: 1)UL
#define RFE_DIVLDO_ITST_DIS                          0x0UL
#define RFE_DIVLDO_ITST_EN                           0x1UL
// bitfield: DIVLDO_TMUX
#define RFE_DIVLDO_TMUX                              4UL
#define RF24_RFE_DIVLDO_TMUX_S                   4UL
#define RFE_DIVLDO_TMUX_BM                           0x00000070UL
#define RF24_RFE_DIVLDO_TMUX_M                   0x00000070UL
// enums for bitfield DIVLDO_TMUX (width: 3)UL
#define RFE_DIVLDO_TMUX_OFF                          0x0UL
#define RFE_DIVLDO_TMUX_GND                          0x1UL
#define RFE_DIVLDO_TMUX_LDO_OUT                      0x2UL
#define RFE_DIVLDO_TMUX_VDDR                         0x4UL
// bitfield: DIVLDO_SPARE3
#define RFE_DIVLDO_SPARE3                            3UL
#define RF24_RFE_DIVLDO_SPARE3_S                 3UL
#define RFE_DIVLDO_SPARE3_BM                         0x00000008UL
#define RF24_RFE_DIVLDO_SPARE3_M                 0x00000008UL
// enums for bitfield DIVLDO_SPARE3 (width: 1)UL
#define RFE_DIVLDO_SPARE3_ZERO                       0x0UL
#define RFE_DIVLDO_SPARE3_ONE                        0x1UL
// bitfield: DIVLDO_MODE
#define RFE_DIVLDO_MODE                              2UL
#define RF24_RFE_DIVLDO_MODE_S                   2UL
#define RFE_DIVLDO_MODE_BM                           0x00000004UL
#define RF24_RFE_DIVLDO_MODE_M                   0x00000004UL
// enums for bitfield DIVLDO_MODE (width: 1)UL
#define RFE_DIVLDO_MODE_NORM                         0x0UL
#define RFE_DIVLDO_MODE_FAST                         0x1UL
// bitfield: DIVLDO_BYPASS
#define RFE_DIVLDO_BYPASS                            1UL
#define RF24_RFE_DIVLDO_BYPASS_S                 1UL
#define RFE_DIVLDO_BYPASS_BM                         0x00000002UL
#define RF24_RFE_DIVLDO_BYPASS_M                 0x00000002UL
// enums for bitfield DIVLDO_BYPASS (width: 1)UL
#define RFE_DIVLDO_BYPASS_DIS                        0x0UL
#define RFE_DIVLDO_BYPASS_EN                         0x1UL
// bitfield: DIVLDO_CTL
#define RFE_DIVLDO_CTL                               0UL
#define RF24_RFE_DIVLDO_CTL_S                    0UL
#define RFE_DIVLDO_CTL_BM                            0x00000001UL
#define RF24_RFE_DIVLDO_CTL_M                    0x00000001UL
// enums for bitfield DIVLDO_CTL (width: 1)UL
#define RFE_DIVLDO_CTL_DIS                           0x0UL
#define RFE_DIVLDO_CTL_EN                            0x1UL
// --------------------------------------------------------------
// TDCLDO
// 
#define RFE_TDCLDO_ADR (RFE_BASE + 0x00F4UL)
static volatile unsigned long* const SP_RFE_TDCLDO = (unsigned long*) RFE_TDCLDO_ADR;
#define S_RFE_TDCLDO (*SP_RFE_TDCLDO)
#define RF24_RFE_O_TDCLDO                        244
// bitfield: TDCLDO_ITESTCTL
#define RFE_TDCLDO_ITESTCTL                          15UL
#define RF24_RFE_TDCLDO_ITESTCTL_S               15UL
#define RFE_TDCLDO_ITESTCTL_BM                       0x00008000UL
#define RF24_RFE_TDCLDO_ITESTCTL_M               0x00008000UL
// enums for bitfield TDCLDO_ITESTCTL (width: 1)UL
#define RFE_TDCLDO_ITESTCTL_DIS                      0x0UL
#define RFE_TDCLDO_ITESTCTL_EN                       0x1UL
// bitfield: TDCLDO_VOUTTRIM
#define RFE_TDCLDO_VOUTTRIM                          8UL
#define RF24_RFE_TDCLDO_VOUTTRIM_S               8UL
#define RFE_TDCLDO_VOUTTRIM_BM                       0x00007F00UL
#define RF24_RFE_TDCLDO_VOUTTRIM_M               0x00007F00UL
// enums for bitfield TDCLDO_VOUTTRIM (width: 7)UL
#define RFE_TDCLDO_VOUTTRIM_ZEROS                    0x00UL
#define RFE_TDCLDO_VOUTTRIM_ONES                     0x7FUL
// bitfield: TDCLDO_ITESTBUFCTL
#define RFE_TDCLDO_ITESTBUFCTL                       7UL
#define RF24_RFE_TDCLDO_ITESTBUFCTL_S            7UL
#define RFE_TDCLDO_ITESTBUFCTL_BM                    0x00000080UL
#define RF24_RFE_TDCLDO_ITESTBUFCTL_M            0x00000080UL
// enums for bitfield TDCLDO_ITESTBUFCTL (width: 1)UL
#define RFE_TDCLDO_ITESTBUFCTL_DIS                   0x0UL
#define RFE_TDCLDO_ITESTBUFCTL_EN                    0x1UL
// bitfield: TDCLDO_TMUX
#define RFE_TDCLDO_TMUX                              4UL
#define RF24_RFE_TDCLDO_TMUX_S                   4UL
#define RFE_TDCLDO_TMUX_BM                           0x00000070UL
#define RF24_RFE_TDCLDO_TMUX_M                   0x00000070UL
// enums for bitfield TDCLDO_TMUX (width: 3)UL
#define RFE_TDCLDO_TMUX_OFF                          0x0UL
#define RFE_TDCLDO_TMUX_VDDA                         0x1UL
#define RFE_TDCLDO_TMUX_LDO_OUT                      0x2UL
#define RFE_TDCLDO_TMUX_VSSA                         0x4UL
// bitfield: TDCLDO_PDSEL
#define RFE_TDCLDO_PDSEL                             3UL
#define RF24_RFE_TDCLDO_PDSEL_S                  3UL
#define RFE_TDCLDO_PDSEL_BM                          0x00000008UL
#define RF24_RFE_TDCLDO_PDSEL_M                  0x00000008UL
// enums for bitfield TDCLDO_PDSEL (width: 1)UL
#define RFE_TDCLDO_PDSEL_R                           0x0UL
#define RFE_TDCLDO_PDSEL_DIODE                       0x1UL
// bitfield: TDCLDO_MODE
#define RFE_TDCLDO_MODE                              2UL
#define RF24_RFE_TDCLDO_MODE_S                   2UL
#define RFE_TDCLDO_MODE_BM                           0x00000004UL
#define RF24_RFE_TDCLDO_MODE_M                   0x00000004UL
// enums for bitfield TDCLDO_MODE (width: 1)UL
#define RFE_TDCLDO_MODE_NORM                         0x0UL
#define RFE_TDCLDO_MODE_FAST                         0x1UL
// bitfield: TDCLDO_BYPASS
#define RFE_TDCLDO_BYPASS                            1UL
#define RF24_RFE_TDCLDO_BYPASS_S                 1UL
#define RFE_TDCLDO_BYPASS_BM                         0x00000002UL
#define RF24_RFE_TDCLDO_BYPASS_M                 0x00000002UL
// enums for bitfield TDCLDO_BYPASS (width: 1)UL
#define RFE_TDCLDO_BYPASS_DIS                        0x0UL
#define RFE_TDCLDO_BYPASS_EN                         0x1UL
// bitfield: TDCLDO_CTL
#define RFE_TDCLDO_CTL                               0UL
#define RF24_RFE_TDCLDO_CTL_S                    0UL
#define RFE_TDCLDO_CTL_BM                            0x00000001UL
#define RF24_RFE_TDCLDO_CTL_M                    0x00000001UL
// enums for bitfield TDCLDO_CTL (width: 1)UL
#define RFE_TDCLDO_CTL_DIS                           0x0UL
#define RFE_TDCLDO_CTL_EN                            0x1UL
// --------------------------------------------------------------
// DCOLDO0
// 
#define RFE_DCOLDO0_ADR (RFE_BASE + 0x00F8UL)
static volatile unsigned long* const SP_RFE_DCOLDO0 = (unsigned long*) RFE_DCOLDO0_ADR;
#define S_RFE_DCOLDO0 (*SP_RFE_DCOLDO0)
#define RF24_RFE_O_DCOLDO0                       248
// bitfield: DCOLDO0_ITST
#define RFE_DCOLDO0_ITST                             14UL
#define RF24_RFE_DCOLDO0_ITST_S                  14UL
#define RFE_DCOLDO0_ITST_BM                          0x0000C000UL
#define RF24_RFE_DCOLDO0_ITST_M                  0x0000C000UL
// enums for bitfield DCOLDO0_ITST (width: 2)UL
#define RFE_DCOLDO0_ITST_DIS                         0x0UL
#define RFE_DCOLDO0_ITST_FIRST                       0x1UL
#define RFE_DCOLDO0_ITST_BOTH                        0x3UL
#define RFE_DCOLDO0_ITST_SECOND                      0x2UL
// bitfield: DCOLDO0_SECONDTRIM
#define RFE_DCOLDO0_SECONDTRIM                       8UL
#define RF24_RFE_DCOLDO0_SECONDTRIM_S            8UL
#define RFE_DCOLDO0_SECONDTRIM_BM                    0x00003F00UL
#define RF24_RFE_DCOLDO0_SECONDTRIM_M            0x00003F00UL
// enums for bitfield DCOLDO0_SECONDTRIM (width: 6)UL
#define RFE_DCOLDO0_SECONDTRIM_ZEROS                 0x00UL
#define RFE_DCOLDO0_SECONDTRIM_ONES                  0x3FUL
// bitfield: DCOLDO0_FIRSTTRIM
#define RFE_DCOLDO0_FIRSTTRIM                        4UL
#define RF24_RFE_DCOLDO0_FIRSTTRIM_S             4UL
#define RFE_DCOLDO0_FIRSTTRIM_BM                     0x000000F0UL
#define RF24_RFE_DCOLDO0_FIRSTTRIM_M             0x000000F0UL
// enums for bitfield DCOLDO0_FIRSTTRIM (width: 4)UL
#define RFE_DCOLDO0_FIRSTTRIM_ZEROS                  0x0UL
#define RFE_DCOLDO0_FIRSTTRIM_ONES                   0xFUL
// bitfield: DCOLDO0_PDN
#define RFE_DCOLDO0_PDN                              3UL
#define RF24_RFE_DCOLDO0_PDN_S                   3UL
#define RFE_DCOLDO0_PDN_BM                           0x00000008UL
#define RF24_RFE_DCOLDO0_PDN_M                   0x00000008UL
// enums for bitfield DCOLDO0_PDN (width: 1)UL
#define RFE_DCOLDO0_PDN_DIS                          0x0UL
#define RFE_DCOLDO0_PDN_EN                           0x1UL
// bitfield: DCOLDO0_BYPFIRST
#define RFE_DCOLDO0_BYPFIRST                         2UL
#define RF24_RFE_DCOLDO0_BYPFIRST_S              2UL
#define RFE_DCOLDO0_BYPFIRST_BM                      0x00000004UL
#define RF24_RFE_DCOLDO0_BYPFIRST_M              0x00000004UL
// enums for bitfield DCOLDO0_BYPFIRST (width: 1)UL
#define RFE_DCOLDO0_BYPFIRST_DIS                     0x0UL
#define RFE_DCOLDO0_BYPFIRST_EN                      0x1UL
// bitfield: DCOLDO0_BYPBOTH
#define RFE_DCOLDO0_BYPBOTH                          1UL
#define RF24_RFE_DCOLDO0_BYPBOTH_S               1UL
#define RFE_DCOLDO0_BYPBOTH_BM                       0x00000002UL
#define RF24_RFE_DCOLDO0_BYPBOTH_M               0x00000002UL
// enums for bitfield DCOLDO0_BYPBOTH (width: 1)UL
#define RFE_DCOLDO0_BYPBOTH_DIS                      0x0UL
#define RFE_DCOLDO0_BYPBOTH_EN                       0x1UL
// bitfield: DCOLDO0_CTL
#define RFE_DCOLDO0_CTL                              0UL
#define RF24_RFE_DCOLDO0_CTL_S                   0UL
#define RFE_DCOLDO0_CTL_BM                           0x00000001UL
#define RF24_RFE_DCOLDO0_CTL_M                   0x00000001UL
// enums for bitfield DCOLDO0_CTL (width: 1)UL
#define RFE_DCOLDO0_CTL_DIS                          0x0UL
#define RFE_DCOLDO0_CTL_EN                           0x1UL
// --------------------------------------------------------------
// DCOLDO1
// 
#define RFE_DCOLDO1_ADR (RFE_BASE + 0x00FCUL)
static volatile unsigned long* const SP_RFE_DCOLDO1 = (unsigned long*) RFE_DCOLDO1_ADR;
#define S_RFE_DCOLDO1 (*SP_RFE_DCOLDO1)
#define RF24_RFE_O_DCOLDO1                       252
// bitfield: DCOLDO1_REFSRC
#define RFE_DCOLDO1_REFSRC                           10UL
#define RF24_RFE_DCOLDO1_REFSRC_S                10UL
#define RFE_DCOLDO1_REFSRC_BM                        0x00000400UL
#define RF24_RFE_DCOLDO1_REFSRC_M                0x00000400UL
// enums for bitfield DCOLDO1_REFSRC (width: 1)UL
#define RFE_DCOLDO1_REFSRC_XTAL                      0x0UL
#define RFE_DCOLDO1_REFSRC_BAW                       0x1UL
// bitfield: DCOLDO1_DIVATST
#define RFE_DCOLDO1_DIVATST                          8UL
#define RF24_RFE_DCOLDO1_DIVATST_S               8UL
#define RFE_DCOLDO1_DIVATST_BM                       0x00000300UL
#define RF24_RFE_DCOLDO1_DIVATST_M               0x00000300UL
// enums for bitfield DCOLDO1_DIVATST (width: 2)UL
#define RFE_DCOLDO1_DIVATST_ZEROS                    0x0UL
#define RFE_DCOLDO1_DIVATST_ONES                     0x3UL
// bitfield: DCOLDO1_PERFM
#define RFE_DCOLDO1_PERFM                            7UL
#define RF24_RFE_DCOLDO1_PERFM_S                 7UL
#define RFE_DCOLDO1_PERFM_BM                         0x00000080UL
#define RF24_RFE_DCOLDO1_PERFM_M                 0x00000080UL
// enums for bitfield DCOLDO1_PERFM (width: 1)UL
#define RFE_DCOLDO1_PERFM_DIS                        0x0UL
#define RFE_DCOLDO1_PERFM_EN                         0x1UL
// bitfield: DCOLDO1_CHRGFILT
#define RFE_DCOLDO1_CHRGFILT                         6UL
#define RF24_RFE_DCOLDO1_CHRGFILT_S              6UL
#define RFE_DCOLDO1_CHRGFILT_BM                      0x00000040UL
#define RF24_RFE_DCOLDO1_CHRGFILT_M              0x00000040UL
// enums for bitfield DCOLDO1_CHRGFILT (width: 1)UL
#define RFE_DCOLDO1_CHRGFILT_DIS                     0x0UL
#define RFE_DCOLDO1_CHRGFILT_EN                      0x1UL
// bitfield: DCOLDO1_ATST
#define RFE_DCOLDO1_ATST                             0UL
#define RF24_RFE_DCOLDO1_ATST_S                  0UL
#define RFE_DCOLDO1_ATST_BM                          0x0000003FUL
#define RF24_RFE_DCOLDO1_ATST_M                  0x0000003FUL
// enums for bitfield DCOLDO1_ATST (width: 6)UL
#define RFE_DCOLDO1_ATST_LDO_OUT                     0x00UL
#define RFE_DCOLDO1_ATST_FIRST_OUT                   0x01UL
#define RFE_DCOLDO1_ATST_VSSANA                      0x20UL
// --------------------------------------------------------------
// PRE0
// 
#define RFE_PRE0_ADR (RFE_BASE + 0x0100UL)
static volatile unsigned long* const SP_RFE_PRE0 = (unsigned long*) RFE_PRE0_ADR;
#define S_RFE_PRE0 (*SP_RFE_PRE0)
#define RF24_RFE_O_PRE0                          256
// bitfield: PRE0_SPARE14
#define RFE_PRE0_SPARE14                             14UL
#define RF24_RFE_PRE0_SPARE14_S                  14UL
#define RFE_PRE0_SPARE14_BM                          0x0000C000UL
#define RF24_RFE_PRE0_SPARE14_M                  0x0000C000UL
// enums for bitfield PRE0_SPARE14 (width: 2)UL
#define RFE_PRE0_SPARE14_ALLZEROS                    0x0UL
#define RFE_PRE0_SPARE14_ALLONES                     0x3UL
// bitfield: PRE0_PLLDIV1
#define RFE_PRE0_PLLDIV1                             8UL
#define RF24_RFE_PRE0_PLLDIV1_S                  8UL
#define RFE_PRE0_PLLDIV1_BM                          0x00003F00UL
#define RF24_RFE_PRE0_PLLDIV1_M                  0x00003F00UL
// enums for bitfield PRE0_PLLDIV1 (width: 6)UL
#define RFE_PRE0_PLLDIV1_ALLZEROS                    0x00UL
#define RFE_PRE0_PLLDIV1_ALLONES                     0x3FUL
// bitfield: PRE0_SPARE6
#define RFE_PRE0_SPARE6                              6UL
#define RF24_RFE_PRE0_SPARE6_S                   6UL
#define RFE_PRE0_SPARE6_BM                           0x000000C0UL
#define RF24_RFE_PRE0_SPARE6_M                   0x000000C0UL
// enums for bitfield PRE0_SPARE6 (width: 2)UL
#define RFE_PRE0_SPARE6_ALLZEROS                     0x0UL
#define RFE_PRE0_SPARE6_ALLONES                      0x3UL
// bitfield: PRE0_PLLDIV0
#define RFE_PRE0_PLLDIV0                             0UL
#define RF24_RFE_PRE0_PLLDIV0_S                  0UL
#define RFE_PRE0_PLLDIV0_BM                          0x0000003FUL
#define RF24_RFE_PRE0_PLLDIV0_M                  0x0000003FUL
// enums for bitfield PRE0_PLLDIV0 (width: 6)UL
#define RFE_PRE0_PLLDIV0_ALLZEROS                    0x00UL
#define RFE_PRE0_PLLDIV0_ALLONES                     0x3FUL
// --------------------------------------------------------------
// PRE1
// 
#define RFE_PRE1_ADR (RFE_BASE + 0x0104UL)
static volatile unsigned long* const SP_RFE_PRE1 = (unsigned long*) RFE_PRE1_ADR;
#define S_RFE_PRE1 (*SP_RFE_PRE1)
#define RF24_RFE_O_PRE1                          260
// bitfield: PRE1_IIRBW
#define RFE_PRE1_IIRBW                               14UL
#define RF24_RFE_PRE1_IIRBW_S                    14UL
#define RFE_PRE1_IIRBW_BM                            0x0000C000UL
#define RF24_RFE_PRE1_IIRBW_M                    0x0000C000UL
// enums for bitfield PRE1_IIRBW (width: 2)UL
#define RFE_PRE1_IIRBW_K2                            0x0UL
#define RFE_PRE1_IIRBW_K4                            0x1UL
#define RFE_PRE1_IIRBW_K8                            0x2UL
#define RFE_PRE1_IIRBW_K16                           0x3UL
// bitfield: PRE1_IIRORD
#define RFE_PRE1_IIRORD                              13UL
#define RF24_RFE_PRE1_IIRORD_S                   13UL
#define RFE_PRE1_IIRORD_BM                           0x00002000UL
#define RF24_RFE_PRE1_IIRORD_M                   0x00002000UL
// enums for bitfield PRE1_IIRORD (width: 1)UL
#define RFE_PRE1_IIRORD_FIRST                        0x0UL
#define RFE_PRE1_IIRORD_SECOND                       0x1UL
// bitfield: PRE1_IIRDIV
#define RFE_PRE1_IIRDIV                              8UL
#define RF24_RFE_PRE1_IIRDIV_S                   8UL
#define RFE_PRE1_IIRDIV_BM                           0x00001F00UL
#define RF24_RFE_PRE1_IIRDIV_M                   0x00001F00UL
// enums for bitfield PRE1_IIRDIV (width: 5)UL
#define RFE_PRE1_IIRDIV_ALLZEROS                     0x00UL
#define RFE_PRE1_IIRDIV_ALLONES                      0x1FUL
// bitfield: PRE1_CALHSDDC
#define RFE_PRE1_CALHSDDC                            6UL
#define RF24_RFE_PRE1_CALHSDDC_S                 6UL
#define RFE_PRE1_CALHSDDC_BM                         0x00000040UL
#define RF24_RFE_PRE1_CALHSDDC_M                 0x00000040UL
// enums for bitfield PRE1_CALHSDDC (width: 1)UL
#define RFE_PRE1_CALHSDDC_NOGATE                     0x0UL
#define RFE_PRE1_CALHSDDC_GATE                       0x1UL
// bitfield: PRE1_HSDDC
#define RFE_PRE1_HSDDC                               0UL
#define RF24_RFE_PRE1_HSDDC_S                    0UL
#define RFE_PRE1_HSDDC_BM                            0x0000003FUL
#define RF24_RFE_PRE1_HSDDC_M                    0x0000003FUL
// enums for bitfield PRE1_HSDDC (width: 6)UL
#define RFE_PRE1_HSDDC_ALLZEROS                      0x00UL
#define RFE_PRE1_HSDDC_ALLONES                       0x3FUL
// --------------------------------------------------------------
// PRE2
// 
#define RFE_PRE2_ADR (RFE_BASE + 0x0108UL)
static volatile unsigned long* const SP_RFE_PRE2 = (unsigned long*) RFE_PRE2_ADR;
#define S_RFE_PRE2 (*SP_RFE_PRE2)
#define RF24_RFE_O_PRE2                          264
// bitfield: PRE2_MIDCALDIVLSB
#define RFE_PRE2_MIDCALDIVLSB                        12UL
#define RF24_RFE_PRE2_MIDCALDIVLSB_S             12UL
#define RFE_PRE2_MIDCALDIVLSB_BM                     0x0000F000UL
#define RF24_RFE_PRE2_MIDCALDIVLSB_M             0x0000F000UL
// enums for bitfield PRE2_MIDCALDIVLSB (width: 4)UL
#define RFE_PRE2_MIDCALDIVLSB_ALLZEROS               0x0UL
#define RFE_PRE2_MIDCALDIVLSB_ALLONES                0xFUL
// bitfield: PRE2_CRSCALDIV
#define RFE_PRE2_CRSCALDIV                           6UL
#define RF24_RFE_PRE2_CRSCALDIV_S                6UL
#define RFE_PRE2_CRSCALDIV_BM                        0x00000FC0UL
#define RF24_RFE_PRE2_CRSCALDIV_M                0x00000FC0UL
// enums for bitfield PRE2_CRSCALDIV (width: 6)UL
#define RFE_PRE2_CRSCALDIV_ALLZEROS                  0x00UL
#define RFE_PRE2_CRSCALDIV_ALLONES                   0x3FUL
// bitfield: PRE2_FSMDIV
#define RFE_PRE2_FSMDIV                              0UL
#define RF24_RFE_PRE2_FSMDIV_S                   0UL
#define RFE_PRE2_FSMDIV_BM                           0x0000003FUL
#define RF24_RFE_PRE2_FSMDIV_M                   0x0000003FUL
// enums for bitfield PRE2_FSMDIV (width: 6)UL
#define RFE_PRE2_FSMDIV_ALLZEROS                     0x00UL
#define RFE_PRE2_FSMDIV_ALLONES                      0x3FUL
// --------------------------------------------------------------
// PRE3
// 
#define RFE_PRE3_ADR (RFE_BASE + 0x010CUL)
static volatile unsigned long* const SP_RFE_PRE3 = (unsigned long*) RFE_PRE3_ADR;
#define S_RFE_PRE3 (*SP_RFE_PRE3)
#define RF24_RFE_O_PRE3                          268
// bitfield: PRE3_FINECALDIV
#define RFE_PRE3_FINECALDIV                          5UL
#define RF24_RFE_PRE3_FINECALDIV_S               5UL
#define RFE_PRE3_FINECALDIV_BM                       0x0000FFE0UL
#define RF24_RFE_PRE3_FINECALDIV_M               0x0000FFE0UL
// enums for bitfield PRE3_FINECALDIV (width: 11)UL
#define RFE_PRE3_FINECALDIV_ALLZEROS                 0x000UL
#define RFE_PRE3_FINECALDIV_ALLONES                  0x7FFUL
// bitfield: PRE3_MIDCALDIVMSB
#define RFE_PRE3_MIDCALDIVMSB                        0UL
#define RF24_RFE_PRE3_MIDCALDIVMSB_S             0UL
#define RFE_PRE3_MIDCALDIVMSB_BM                     0x0000001FUL
#define RF24_RFE_PRE3_MIDCALDIVMSB_M             0x0000001FUL
// enums for bitfield PRE3_MIDCALDIVMSB (width: 5)UL
#define RFE_PRE3_MIDCALDIVMSB_ALLZEROS               0x00UL
#define RFE_PRE3_MIDCALDIVMSB_ALLONES                0x1FUL
// --------------------------------------------------------------
// CAL0
// 
#define RFE_CAL0_ADR (RFE_BASE + 0x0110UL)
static volatile unsigned long* const SP_RFE_CAL0 = (unsigned long*) RFE_CAL0_ADR;
#define S_RFE_CAL0 (*SP_RFE_CAL0)
#define RF24_RFE_O_CAL0                          272
// bitfield: CAL0_SPARE15
#define RFE_CAL0_SPARE15                             15UL
#define RF24_RFE_CAL0_SPARE15_S                  15UL
#define RFE_CAL0_SPARE15_BM                          0x00008000UL
#define RF24_RFE_CAL0_SPARE15_M                  0x00008000UL
// enums for bitfield CAL0_SPARE15 (width: 1)UL
#define RFE_CAL0_SPARE15_ZERO                        0x0UL
#define RFE_CAL0_SPARE15_ONE                         0x1UL
// bitfield: CAL0_FCSTART
#define RFE_CAL0_FCSTART                             8UL
#define RF24_RFE_CAL0_FCSTART_S                  8UL
#define RFE_CAL0_FCSTART_BM                          0x00007F00UL
#define RF24_RFE_CAL0_FCSTART_M                  0x00007F00UL
// enums for bitfield CAL0_FCSTART (width: 7)UL
#define RFE_CAL0_FCSTART_ALLZEROS                    0x00UL
#define RFE_CAL0_FCSTART_ALLONES                     0x7FUL
// bitfield: CAL0_CRS
#define RFE_CAL0_CRS                                 7UL
#define RF24_RFE_CAL0_CRS_S                      7UL
#define RFE_CAL0_CRS_BM                              0x00000080UL
#define RF24_RFE_CAL0_CRS_M                      0x00000080UL
// enums for bitfield CAL0_CRS (width: 1)UL
#define RFE_CAL0_CRS_DIS                             0x0UL
#define RFE_CAL0_CRS_EN                              0x1UL
// bitfield: CAL0_MID
#define RFE_CAL0_MID                                 6UL
#define RF24_RFE_CAL0_MID_S                      6UL
#define RFE_CAL0_MID_BM                              0x00000040UL
#define RF24_RFE_CAL0_MID_M                      0x00000040UL
// enums for bitfield CAL0_MID (width: 1)UL
#define RFE_CAL0_MID_DIS                             0x0UL
#define RFE_CAL0_MID_EN                              0x1UL
// bitfield: CAL0_KTDC
#define RFE_CAL0_KTDC                                5UL
#define RF24_RFE_CAL0_KTDC_S                     5UL
#define RFE_CAL0_KTDC_BM                             0x00000020UL
#define RF24_RFE_CAL0_KTDC_M                     0x00000020UL
// enums for bitfield CAL0_KTDC (width: 1)UL
#define RFE_CAL0_KTDC_DIS                            0x0UL
#define RFE_CAL0_KTDC_EN                             0x1UL
// bitfield: CAL0_KDCO
#define RFE_CAL0_KDCO                                4UL
#define RF24_RFE_CAL0_KDCO_S                     4UL
#define RFE_CAL0_KDCO_BM                             0x00000010UL
#define RF24_RFE_CAL0_KDCO_M                     0x00000010UL
// enums for bitfield CAL0_KDCO (width: 1)UL
#define RFE_CAL0_KDCO_DIS                            0x0UL
#define RFE_CAL0_KDCO_EN                             0x1UL
// bitfield: CAL0_TDCAVG
#define RFE_CAL0_TDCAVG                              2UL
#define RF24_RFE_CAL0_TDCAVG_S                   2UL
#define RFE_CAL0_TDCAVG_BM                           0x0000000CUL
#define RF24_RFE_CAL0_TDCAVG_M                   0x0000000CUL
// enums for bitfield CAL0_TDCAVG (width: 2)UL
#define RFE_CAL0_TDCAVG_REPEAT_1_TIME                0x0UL
#define RFE_CAL0_TDCAVG_REPEAT_2_TIMES               0x1UL
#define RFE_CAL0_TDCAVG_REPEAT_4_TIMES               0x2UL
#define RFE_CAL0_TDCAVG_REPEAT_8_TIMES               0x3UL
// bitfield: CAL0_TDC_SPARE
#define RFE_CAL0_TDC_SPARE                           0UL
#define RF24_RFE_CAL0_TDC_SPARE_S                0UL
#define RFE_CAL0_TDC_SPARE_BM                        0x00000003UL
#define RF24_RFE_CAL0_TDC_SPARE_M                0x00000003UL
// enums for bitfield CAL0_TDC_SPARE (width: 2)UL
#define RFE_CAL0_TDC_SPARE_ALLZEROS                  0x0UL
#define RFE_CAL0_TDC_SPARE_ALLONES                   0x3UL
// --------------------------------------------------------------
// CAL1
// 
#define RFE_CAL1_ADR (RFE_BASE + 0x0114UL)
static volatile unsigned long* const SP_RFE_CAL1 = (unsigned long*) RFE_CAL1_ADR;
#define S_RFE_CAL1 (*SP_RFE_CAL1)
#define RF24_RFE_O_CAL1                          276
// bitfield: CAL1_SPARE15
#define RFE_CAL1_SPARE15                             15UL
#define RF24_RFE_CAL1_SPARE15_S                  15UL
#define RFE_CAL1_SPARE15_BM                          0x00008000UL
#define RF24_RFE_CAL1_SPARE15_M                  0x00008000UL
// enums for bitfield CAL1_SPARE15 (width: 1)UL
#define RFE_CAL1_SPARE15_ZERO                        0x0UL
#define RFE_CAL1_SPARE15_ONE                         0x1UL
// bitfield: CAL1_FCTOP
#define RFE_CAL1_FCTOP                               8UL
#define RF24_RFE_CAL1_FCTOP_S                    8UL
#define RFE_CAL1_FCTOP_BM                            0x00007F00UL
#define RF24_RFE_CAL1_FCTOP_M                    0x00007F00UL
// enums for bitfield CAL1_FCTOP (width: 7)UL
#define RFE_CAL1_FCTOP_ALLZEROS                      0x00UL
#define RFE_CAL1_FCTOP_ALLONES                       0x7FUL
// bitfield: CAL1_SPARE7
#define RFE_CAL1_SPARE7                              7UL
#define RF24_RFE_CAL1_SPARE7_S                   7UL
#define RFE_CAL1_SPARE7_BM                           0x00000080UL
#define RF24_RFE_CAL1_SPARE7_M                   0x00000080UL
// enums for bitfield CAL1_SPARE7 (width: 1)UL
#define RFE_CAL1_SPARE7_ZERO                         0x0UL
#define RFE_CAL1_SPARE7_ONE                          0x1UL
// bitfield: CAL1_FCBOT
#define RFE_CAL1_FCBOT                               0UL
#define RF24_RFE_CAL1_FCBOT_S                    0UL
#define RFE_CAL1_FCBOT_BM                            0x0000007FUL
#define RF24_RFE_CAL1_FCBOT_M                    0x0000007FUL
// enums for bitfield CAL1_FCBOT (width: 7)UL
#define RFE_CAL1_FCBOT_ALLZEROS                      0x00UL
#define RFE_CAL1_FCBOT_ALLONES                       0x7FUL
// --------------------------------------------------------------
// CAL2
// 
#define RFE_CAL2_ADR (RFE_BASE + 0x0118UL)
static volatile unsigned long* const SP_RFE_CAL2 = (unsigned long*) RFE_CAL2_ADR;
#define S_RFE_CAL2 (*SP_RFE_CAL2)
#define RF24_RFE_O_CAL2                          280
// bitfield: CAL2_KTDCINV
#define RFE_CAL2_KTDCINV                             0UL
#define RF24_RFE_CAL2_KTDCINV_S                  0UL
#define RFE_CAL2_KTDCINV_BM                          0x0000FFFFUL
#define RF24_RFE_CAL2_KTDCINV_M                  0x0000FFFFUL
// enums for bitfield CAL2_KTDCINV (width: 16)UL
#define RFE_CAL2_KTDCINV_ALLZEROS                    0x0000UL
#define RFE_CAL2_KTDCINV_ALLONES                     0xFFFFUL
// --------------------------------------------------------------
// CAL3
// 
#define RFE_CAL3_ADR (RFE_BASE + 0x011CUL)
static volatile unsigned long* const SP_RFE_CAL3 = (unsigned long*) RFE_CAL3_ADR;
#define S_RFE_CAL3 (*SP_RFE_CAL3)
#define RF24_RFE_O_CAL3                          284
// bitfield: CAL3_DTXGAIN
#define RFE_CAL3_DTXGAIN                             0UL
#define RF24_RFE_CAL3_DTXGAIN_S                  0UL
#define RFE_CAL3_DTXGAIN_BM                          0x0000FFFFUL
#define RF24_RFE_CAL3_DTXGAIN_M                  0x0000FFFFUL
// enums for bitfield CAL3_DTXGAIN (width: 16)UL
#define RFE_CAL3_DTXGAIN_ALLZEROS                    0x0000UL
#define RFE_CAL3_DTXGAIN_ALLONES                     0xFFFFUL
// --------------------------------------------------------------
// MISC0
// 
#define RFE_MISC0_ADR (RFE_BASE + 0x0120UL)
static volatile unsigned long* const SP_RFE_MISC0 = (unsigned long*) RFE_MISC0_ADR;
#define S_RFE_MISC0 (*SP_RFE_MISC0)
#define RF24_RFE_O_MISC0                         288
// bitfield: MISC0_PHCPT
#define RFE_MISC0_PHCPT                              13UL
#define RF24_RFE_MISC0_PHCPT_S                   13UL
#define RFE_MISC0_PHCPT_BM                           0x00002000UL
#define RF24_RFE_MISC0_PHCPT_M                   0x00002000UL
// enums for bitfield MISC0_PHCPT (width: 1)UL
#define RFE_MISC0_PHCPT_SYNC                         0x0UL
#define RFE_MISC0_PHCPT_ASYNC                        0x1UL
// bitfield: MISC0_TDCCALCORR
#define RFE_MISC0_TDCCALCORR                         12UL
#define RF24_RFE_MISC0_TDCCALCORR_S              12UL
#define RFE_MISC0_TDCCALCORR_BM                      0x00001000UL
#define RF24_RFE_MISC0_TDCCALCORR_M              0x00001000UL
// enums for bitfield MISC0_TDCCALCORR (width: 1)UL
#define RFE_MISC0_TDCCALCORR_DIS                     0x0UL
#define RFE_MISC0_TDCCALCORR_EN                      0x1UL
// bitfield: MISC0_TDCMSBCORR
#define RFE_MISC0_TDCMSBCORR                         11UL
#define RF24_RFE_MISC0_TDCMSBCORR_S              11UL
#define RFE_MISC0_TDCMSBCORR_BM                      0x00000800UL
#define RF24_RFE_MISC0_TDCMSBCORR_M              0x00000800UL
// enums for bitfield MISC0_TDCMSBCORR (width: 1)UL
#define RFE_MISC0_TDCMSBCORR_DIS                     0x0UL
#define RFE_MISC0_TDCMSBCORR_EN                      0x1UL
// bitfield: MISC0_SDMDEM
#define RFE_MISC0_SDMDEM                             10UL
#define RF24_RFE_MISC0_SDMDEM_S                  10UL
#define RFE_MISC0_SDMDEM_BM                          0x00000400UL
#define RF24_RFE_MISC0_SDMDEM_M                  0x00000400UL
// enums for bitfield MISC0_SDMDEM (width: 1)UL
#define RFE_MISC0_SDMDEM_DIS                         0x0UL
#define RFE_MISC0_SDMDEM_EN                          0x1UL
// bitfield: MISC0_DLYSDM
#define RFE_MISC0_DLYSDM                             8UL
#define RF24_RFE_MISC0_DLYSDM_S                  8UL
#define RFE_MISC0_DLYSDM_BM                          0x00000300UL
#define RF24_RFE_MISC0_DLYSDM_M                  0x00000300UL
// enums for bitfield MISC0_DLYSDM (width: 2)UL
#define RFE_MISC0_DLYSDM_CKVD16_0_PER                0x0UL
#define RFE_MISC0_DLYSDM_CKVD16_1_PER                0x1UL
#define RFE_MISC0_DLYSDM_CKVD16_2_PER                0x2UL
#define RFE_MISC0_DLYSDM_CKVD16_3_PER                0x3UL
// bitfield: MISC0_DLYPHVALID
#define RFE_MISC0_DLYPHVALID                         6UL
#define RF24_RFE_MISC0_DLYPHVALID_S              6UL
#define RFE_MISC0_DLYPHVALID_BM                      0x00000040UL
#define RF24_RFE_MISC0_DLYPHVALID_M              0x00000040UL
// enums for bitfield MISC0_DLYPHVALID (width: 1)UL
#define RFE_MISC0_DLYPHVALID_CKVD16_0_PER            0x0UL
#define RFE_MISC0_DLYPHVALID_CKVD16_1_PER            0x1UL
// bitfield: MISC0_DLYCANCRS
#define RFE_MISC0_DLYCANCRS                          4UL
#define RF24_RFE_MISC0_DLYCANCRS_S               4UL
#define RFE_MISC0_DLYCANCRS_BM                       0x00000030UL
#define RF24_RFE_MISC0_DLYCANCRS_M               0x00000030UL
// enums for bitfield MISC0_DLYCANCRS (width: 2)UL
#define RFE_MISC0_DLYCANCRS_CKVD64_0_PER             0x0UL
#define RFE_MISC0_DLYCANCRS_CKVD64_1_PER             0x1UL
#define RFE_MISC0_DLYCANCRS_CKVD64_2_PER             0x2UL
#define RFE_MISC0_DLYCANCRS_CKVD64_3_PER             0x3UL
// bitfield: MISC0_DLYCANFINE
#define RFE_MISC0_DLYCANFINE                         2UL
#define RF24_RFE_MISC0_DLYCANFINE_S              2UL
#define RFE_MISC0_DLYCANFINE_BM                      0x0000000CUL
#define RF24_RFE_MISC0_DLYCANFINE_M              0x0000000CUL
// enums for bitfield MISC0_DLYCANFINE (width: 2)UL
#define RFE_MISC0_DLYCANFINE_CKVD16_1_PER            0x0UL
#define RFE_MISC0_DLYCANFINE_CKVD16_2_PER            0x1UL
#define RFE_MISC0_DLYCANFINE_CKVD16_3_PER            0x2UL
#define RFE_MISC0_DLYCANFINE_CKVD16_4_PER            0x3UL
// bitfield: MISC0_DLYADD
#define RFE_MISC0_DLYADD                             0UL
#define RF24_RFE_MISC0_DLYADD_S                  0UL
#define RFE_MISC0_DLYADD_BM                          0x00000003UL
#define RF24_RFE_MISC0_DLYADD_M                  0x00000003UL
// enums for bitfield MISC0_DLYADD (width: 2)UL
#define RFE_MISC0_DLYADD_CKVD64_0_PER                0x0UL
#define RFE_MISC0_DLYADD_CKVD64_1_PER                0x1UL
#define RFE_MISC0_DLYADD_CKVD64_2_PER                0x2UL
#define RFE_MISC0_DLYADD_CKVD64_3_PER                0x3UL
// --------------------------------------------------------------
// MISC1
// 
#define RFE_MISC1_ADR (RFE_BASE + 0x0124UL)
static volatile unsigned long* const SP_RFE_MISC1 = (unsigned long*) RFE_MISC1_ADR;
#define S_RFE_MISC1 (*SP_RFE_MISC1)
#define RF24_RFE_O_MISC1                         292
// bitfield: MISC1_FCDEMCLK
#define RFE_MISC1_FCDEMCLK                           14UL
#define RF24_RFE_MISC1_FCDEMCLK_S                14UL
#define RFE_MISC1_FCDEMCLK_BM                        0x00004000UL
#define RF24_RFE_MISC1_FCDEMCLK_M                0x00004000UL
// enums for bitfield MISC1_FCDEMCLK (width: 1)UL
#define RFE_MISC1_FCDEMCLK_CKCD16                    0x0UL
#define RFE_MISC1_FCDEMCLK_CKVD64                    0x1UL
// bitfield: MISC1_FCDEMUPD
#define RFE_MISC1_FCDEMUPD                           12UL
#define RF24_RFE_MISC1_FCDEMUPD_S                12UL
#define RFE_MISC1_FCDEMUPD_BM                        0x00003000UL
#define RF24_RFE_MISC1_FCDEMUPD_M                0x00003000UL
// enums for bitfield MISC1_FCDEMUPD (width: 2)UL
#define RFE_MISC1_FCDEMUPD_DEFAULT                   0x0UL
#define RFE_MISC1_FCDEMUPD_PH_ERR                    0x1UL
#define RFE_MISC1_FCDEMUPD_SDM                       0x2UL
#define RFE_MISC1_FCDEMUPD_SDM_XOR_PH_ERR            0x3UL
// bitfield: MISC1_TDCINL
#define RFE_MISC1_TDCINL                             6UL
#define RF24_RFE_MISC1_TDCINL_S                  6UL
#define RFE_MISC1_TDCINL_BM                          0x00000FC0UL
#define RF24_RFE_MISC1_TDCINL_M                  0x00000FC0UL
// enums for bitfield MISC1_TDCINL (width: 6)UL
#define RFE_MISC1_TDCINL_ZEROS                       0x00UL
#define RFE_MISC1_TDCINL_ONES                        0x3FUL
// bitfield: MISC1_TDCINLCTL
#define RFE_MISC1_TDCINLCTL                          5UL
#define RF24_RFE_MISC1_TDCINLCTL_S               5UL
#define RFE_MISC1_TDCINLCTL_BM                       0x00000020UL
#define RF24_RFE_MISC1_TDCINLCTL_M               0x00000020UL
// enums for bitfield MISC1_TDCINLCTL (width: 1)UL
#define RFE_MISC1_TDCINLCTL_DIS                      0x0UL
#define RFE_MISC1_TDCINLCTL_EN                       0x1UL
// bitfield: MISC1_PHINIT
#define RFE_MISC1_PHINIT                             4UL
#define RF24_RFE_MISC1_PHINIT_S                  4UL
#define RFE_MISC1_PHINIT_BM                          0x00000010UL
#define RF24_RFE_MISC1_PHINIT_M                  0x00000010UL
// enums for bitfield MISC1_PHINIT (width: 1)UL
#define RFE_MISC1_PHINIT_KNOWN                       0x0UL
#define RFE_MISC1_PHINIT_UNKNOWN                     0x1UL
// bitfield: MISC1_SDMOOVRCTL
#define RFE_MISC1_SDMOOVRCTL                         3UL
#define RF24_RFE_MISC1_SDMOOVRCTL_S              3UL
#define RFE_MISC1_SDMOOVRCTL_BM                      0x00000008UL
#define RF24_RFE_MISC1_SDMOOVRCTL_M              0x00000008UL
// enums for bitfield MISC1_SDMOOVRCTL (width: 1)UL
#define RFE_MISC1_SDMOOVRCTL_DIS                     0x0UL
#define RFE_MISC1_SDMOOVRCTL_EN                      0x1UL
// bitfield: MISC1_SDMOOVR
#define RFE_MISC1_SDMOOVR                            0UL
#define RF24_RFE_MISC1_SDMOOVR_S                 0UL
#define RFE_MISC1_SDMOOVR_BM                         0x00000007UL
#define RF24_RFE_MISC1_SDMOOVR_M                 0x00000007UL
// enums for bitfield MISC1_SDMOOVR (width: 3)UL
#define RFE_MISC1_SDMOOVR_ALLZEROS                   0x0UL
#define RFE_MISC1_SDMOOVR_ALLONES                    0x7UL
// --------------------------------------------------------------
// LF0
// 
#define RFE_LF0_ADR (RFE_BASE + 0x0128UL)
static volatile unsigned long* const SP_RFE_LF0 = (unsigned long*) RFE_LF0_ADR;
#define S_RFE_LF0 (*SP_RFE_LF0)
#define RF24_RFE_O_LF0                           296
// bitfield: LF0_KIPREC
#define RFE_LF0_KIPREC                               12UL
#define RF24_RFE_LF0_KIPREC_S                    12UL
#define RFE_LF0_KIPREC_BM                            0x00001000UL
#define RF24_RFE_LF0_KIPREC_M                    0x00001000UL
// bitfield: LF0_KI
#define RFE_LF0_KI                                   0UL
#define RF24_RFE_LF0_KI_S                        0UL
#define RFE_LF0_KI_BM                                0x00000FFFUL
#define RF24_RFE_LF0_KI_M                        0x00000FFFUL
// enums for bitfield LF0_KI (width: 12)UL
#define RFE_LF0_KI_ALLZEROS                          0x000UL
#define RFE_LF0_KI_ALLONES                           0xFFFUL
// --------------------------------------------------------------
// LF1
// 
#define RFE_LF1_ADR (RFE_BASE + 0x012CUL)
static volatile unsigned long* const SP_RFE_LF1 = (unsigned long*) RFE_LF1_ADR;
#define S_RFE_LF1 (*SP_RFE_LF1)
#define RF24_RFE_O_LF1                           300
// bitfield: LF1_KP
#define RFE_LF1_KP                                   0UL
#define RF24_RFE_LF1_KP_S                        0UL
#define RFE_LF1_KP_BM                                0x00003FFFUL
#define RF24_RFE_LF1_KP_M                        0x00003FFFUL
// enums for bitfield LF1_KP (width: 14)UL
#define RFE_LF1_KP_ALLZEROS                          0x0000UL
#define RFE_LF1_KP_ALLONES                           0x3FFFUL
// --------------------------------------------------------------
// PHEDISC
// 
#define RFE_PHEDISC_ADR (RFE_BASE + 0x0130UL)
static volatile unsigned long* const SP_RFE_PHEDISC = (unsigned long*) RFE_PHEDISC_ADR;
#define S_RFE_PHEDISC (*SP_RFE_PHEDISC)
#define RF24_RFE_O_PHEDISC                       304
// bitfield: PHEDISC_CNT
#define RFE_PHEDISC_CNT                              10UL
#define RF24_RFE_PHEDISC_CNT_S                   10UL
#define RFE_PHEDISC_CNT_BM                           0x00003C00UL
#define RF24_RFE_PHEDISC_CNT_M                   0x00003C00UL
// enums for bitfield PHEDISC_CNT (width: 4)UL
#define RFE_PHEDISC_CNT_ALLZEROS                     0x0UL
#define RFE_PHEDISC_CNT_ALLONES                      0xFUL
// bitfield: PHEDISC_THR
#define RFE_PHEDISC_THR                              0UL
#define RF24_RFE_PHEDISC_THR_S                   0UL
#define RFE_PHEDISC_THR_BM                           0x000003FFUL
#define RF24_RFE_PHEDISC_THR_M                   0x000003FFUL
// enums for bitfield PHEDISC_THR (width: 10)UL
#define RFE_PHEDISC_THR_ALLZEROS                     0x000UL
#define RFE_PHEDISC_THR_ALLONES                      0x3FFUL
// --------------------------------------------------------------
// PHINIT
// 
#define RFE_PHINIT_ADR (RFE_BASE + 0x0134UL)
static volatile unsigned long* const SP_RFE_PHINIT = (unsigned long*) RFE_PHINIT_ADR;
#define S_RFE_PHINIT (*SP_RFE_PHINIT)
#define RF24_RFE_O_PHINIT                        308
// bitfield: PHINIT_OFF
#define RFE_PHINIT_OFF                               0UL
#define RF24_RFE_PHINIT_OFF_S                    0UL
#define RFE_PHINIT_OFF_BM                            0x000000FFUL
#define RF24_RFE_PHINIT_OFF_M                    0x000000FFUL
// enums for bitfield PHINIT_OFF (width: 8)UL
#define RFE_PHINIT_OFF_ALLZEROS                      0x00UL
#define RFE_PHINIT_OFF_ALLONES                       0xFFUL
// --------------------------------------------------------------
// PLLMON0
// 
#define RFE_PLLMON0_ADR (RFE_BASE + 0x0138UL)
static volatile unsigned long* const SP_RFE_PLLMON0 = (unsigned long*) RFE_PLLMON0_ADR;
#define S_RFE_PLLMON0 (*SP_RFE_PLLMON0)
#define RF24_RFE_O_PLLMON0                       312
// bitfield: PLLMON0_PHELOLCNT
#define RFE_PLLMON0_PHELOLCNT                        14UL
#define RF24_RFE_PLLMON0_PHELOLCNT_S             14UL
#define RFE_PLLMON0_PHELOLCNT_BM                     0x0000C000UL
#define RF24_RFE_PLLMON0_PHELOLCNT_M             0x0000C000UL
// enums for bitfield PLLMON0_PHELOLCNT (width: 2)UL
#define RFE_PLLMON0_PHELOLCNT_REFCLK_16_PER          0x0UL
#define RFE_PLLMON0_PHELOLCNT_REFCLK_32_PER          0x1UL
#define RFE_PLLMON0_PHELOLCNT_REFCLK_64_PER          0x2UL
#define RFE_PLLMON0_PHELOLCNT_REFCLK_128_PER         0x3UL
// bitfield: PLLMON0_PHELOLTHR
#define RFE_PLLMON0_PHELOLTHR                        8UL
#define RF24_RFE_PLLMON0_PHELOLTHR_S             8UL
#define RFE_PLLMON0_PHELOLTHR_BM                     0x00003F00UL
#define RF24_RFE_PLLMON0_PHELOLTHR_M             0x00003F00UL
// enums for bitfield PLLMON0_PHELOLTHR (width: 6)UL
#define RFE_PLLMON0_PHELOLTHR_ALLZEROS               0x00UL
#define RFE_PLLMON0_PHELOLTHR_ALLONES                0x3FUL
// bitfield: PLLMON0_FCTHR
#define RFE_PLLMON0_FCTHR                            0UL
#define RF24_RFE_PLLMON0_FCTHR_S                 0UL
#define RFE_PLLMON0_FCTHR_BM                         0x0000007FUL
#define RF24_RFE_PLLMON0_FCTHR_M                 0x0000007FUL
// enums for bitfield PLLMON0_FCTHR (width: 7)UL
#define RFE_PLLMON0_FCTHR_ALLZEROS                   0x00UL
#define RFE_PLLMON0_FCTHR_ALLONES                    0x7FUL
// --------------------------------------------------------------
// PLLMON1
// 
#define RFE_PLLMON1_ADR (RFE_BASE + 0x013CUL)
static volatile unsigned long* const SP_RFE_PLLMON1 = (unsigned long*) RFE_PLLMON1_ADR;
#define S_RFE_PLLMON1 (*SP_RFE_PLLMON1)
#define RF24_RFE_O_PLLMON1                       316
// bitfield: PLLMON1_PHELOCKCNT
#define RFE_PLLMON1_PHELOCKCNT                       8UL
#define RF24_RFE_PLLMON1_PHELOCKCNT_S            8UL
#define RFE_PLLMON1_PHELOCKCNT_BM                    0x00001F00UL
#define RF24_RFE_PLLMON1_PHELOCKCNT_M            0x00001F00UL
// enums for bitfield PLLMON1_PHELOCKCNT (width: 5)UL
#define RFE_PLLMON1_PHELOCKCNT_ALLZEROS              0x00UL
#define RFE_PLLMON1_PHELOCKCNT_ALLONES               0x1FUL
// bitfield: PLLMON1_PHELOCKTHR
#define RFE_PLLMON1_PHELOCKTHR                       0UL
#define RF24_RFE_PLLMON1_PHELOCKTHR_S            0UL
#define RFE_PLLMON1_PHELOCKTHR_BM                    0x000000FFUL
#define RF24_RFE_PLLMON1_PHELOCKTHR_M            0x000000FFUL
// enums for bitfield PLLMON1_PHELOCKTHR (width: 8)UL
#define RFE_PLLMON1_PHELOCKTHR_ALLZEROS              0x00UL
#define RFE_PLLMON1_PHELOCKTHR_ALLONES               0xFFUL
// --------------------------------------------------------------
// MOD0
// 
#define RFE_MOD0_ADR (RFE_BASE + 0x0140UL)
static volatile unsigned long* const SP_RFE_MOD0 = (unsigned long*) RFE_MOD0_ADR;
#define S_RFE_MOD0 (*SP_RFE_MOD0)
#define RF24_RFE_O_MOD0                          320
// bitfield: MOD0_SCHEME
#define RFE_MOD0_SCHEME                              11UL
#define RF24_RFE_MOD0_SCHEME_S                   11UL
#define RFE_MOD0_SCHEME_BM                           0x00001800UL
#define RF24_RFE_MOD0_SCHEME_M                   0x00001800UL
// enums for bitfield MOD0_SCHEME (width: 2)UL
#define RFE_MOD0_SCHEME_NC                           0x0UL
#define RFE_MOD0_SCHEME_INLOOP_MOD_FREF              0x1UL
#define RFE_MOD0_SCHEME_INLOOP_MOD_FRF               0x2UL
#define RFE_MOD0_SCHEME_TWO_POINT_MOD_FRF            0x3UL
// bitfield: MOD0_SYMSHP
#define RFE_MOD0_SYMSHP                              8UL
#define RF24_RFE_MOD0_SYMSHP_S                   8UL
#define RFE_MOD0_SYMSHP_BM                           0x00000700UL
#define RF24_RFE_MOD0_SYMSHP_M                   0x00000700UL
// enums for bitfield MOD0_SYMSHP (width: 3)UL
#define RFE_MOD0_SYMSHP_SHAPEDFSK                    0x0UL
#define RFE_MOD0_SYMSHP_ZIGBEE                       0x1UL
#define RFE_MOD0_SYMSHP_PCWSPSK                      0x2UL
#define RFE_MOD0_SYMSHP_SHAPEDZIGBEE                 0x3UL
#define RFE_MOD0_SYMSHP_CHIRP                        0x4UL
// bitfield: MOD0_CANPTHGAIN
#define RFE_MOD0_CANPTHGAIN                          6UL
#define RF24_RFE_MOD0_CANPTHGAIN_S               6UL
#define RFE_MOD0_CANPTHGAIN_BM                       0x000000C0UL
#define RF24_RFE_MOD0_CANPTHGAIN_M               0x000000C0UL
// enums for bitfield MOD0_CANPTHGAIN (width: 2)UL
#define RFE_MOD0_CANPTHGAIN_TWO_POW_M_15             0x0UL
#define RFE_MOD0_CANPTHGAIN_TWO_POW_M_16             0x1UL
#define RFE_MOD0_CANPTHGAIN_TWO_POW_M_17             0x2UL
#define RFE_MOD0_CANPTHGAIN_TWO_POW_M_18             0x3UL
// bitfield: MOD0_SHPGAIN
#define RFE_MOD0_SHPGAIN                             4UL
#define RF24_RFE_MOD0_SHPGAIN_S                  4UL
#define RFE_MOD0_SHPGAIN_BM                          0x00000030UL
#define RF24_RFE_MOD0_SHPGAIN_M                  0x00000030UL
// enums for bitfield MOD0_SHPGAIN (width: 2)UL
#define RFE_MOD0_SHPGAIN_X1                          0x0UL
#define RFE_MOD0_SHPGAIN_X2                          0x1UL
#define RFE_MOD0_SHPGAIN_X4                          0x2UL
#define RFE_MOD0_SHPGAIN_X8                          0x3UL
// bitfield: MOD0_INTPFACT
#define RFE_MOD0_INTPFACT                            2UL
#define RF24_RFE_MOD0_INTPFACT_S                 2UL
#define RFE_MOD0_INTPFACT_BM                         0x0000000CUL
#define RF24_RFE_MOD0_INTPFACT_M                 0x0000000CUL
// enums for bitfield MOD0_INTPFACT (width: 2)UL
#define RFE_MOD0_INTPFACT_ILLEGAL0                   0x0UL
#define RFE_MOD0_INTPFACT_INTP_BY_16                 0x1UL
#define RFE_MOD0_INTPFACT_INTP_BY_32                 0x2UL
#define RFE_MOD0_INTPFACT_ILLEGAL1                   0x3UL
// --------------------------------------------------------------
// MOD1
// 
#define RFE_MOD1_ADR (RFE_BASE + 0x0144UL)
static volatile unsigned long* const SP_RFE_MOD1 = (unsigned long*) RFE_MOD1_ADR;
#define S_RFE_MOD1 (*SP_RFE_MOD1)
#define RF24_RFE_O_MOD1                          324
// bitfield: MOD1_FOFF
#define RFE_MOD1_FOFF                                0UL
#define RF24_RFE_MOD1_FOFF_S                     0UL
#define RFE_MOD1_FOFF_BM                             0x00000FFFUL
#define RF24_RFE_MOD1_FOFF_M                     0x00000FFFUL
// enums for bitfield MOD1_FOFF (width: 12)UL
#define RFE_MOD1_FOFF_ALLZEROS                       0x000UL
#define RFE_MOD1_FOFF_ALLONES                        0xFFFUL
// --------------------------------------------------------------
// DTX0
// 
#define RFE_DTX0_ADR (RFE_BASE + 0x0148UL)
static volatile unsigned long* const SP_RFE_DTX0 = (unsigned long*) RFE_DTX0_ADR;
#define S_RFE_DTX0 (*SP_RFE_DTX0)
#define RF24_RFE_O_DTX0                          328
// bitfield: DTX0_SHP1
#define RFE_DTX0_SHP1                                8UL
#define RF24_RFE_DTX0_SHP1_S                     8UL
#define RFE_DTX0_SHP1_BM                             0x0000FF00UL
#define RF24_RFE_DTX0_SHP1_M                     0x0000FF00UL
// enums for bitfield DTX0_SHP1 (width: 8)UL
#define RFE_DTX0_SHP1_ALLZEROS                       0x00UL
#define RFE_DTX0_SHP1_ALLONES                        0xFFUL
// bitfield: DTX0_SHP0
#define RFE_DTX0_SHP0                                0UL
#define RF24_RFE_DTX0_SHP0_S                     0UL
#define RFE_DTX0_SHP0_BM                             0x000000FFUL
#define RF24_RFE_DTX0_SHP0_M                     0x000000FFUL
// enums for bitfield DTX0_SHP0 (width: 8)UL
#define RFE_DTX0_SHP0_ALLZEROS                       0x00UL
#define RFE_DTX0_SHP0_ALLONES                        0xFFUL
// --------------------------------------------------------------
// DTX1
// 
#define RFE_DTX1_ADR (RFE_BASE + 0x014CUL)
static volatile unsigned long* const SP_RFE_DTX1 = (unsigned long*) RFE_DTX1_ADR;
#define S_RFE_DTX1 (*SP_RFE_DTX1)
#define RF24_RFE_O_DTX1                          332
// bitfield: DTX1_SHP3
#define RFE_DTX1_SHP3                                8UL
#define RF24_RFE_DTX1_SHP3_S                     8UL
#define RFE_DTX1_SHP3_BM                             0x0000FF00UL
#define RF24_RFE_DTX1_SHP3_M                     0x0000FF00UL
// enums for bitfield DTX1_SHP3 (width: 8)UL
#define RFE_DTX1_SHP3_ALLZEROS                       0x00UL
#define RFE_DTX1_SHP3_ALLONES                        0xFFUL
// bitfield: DTX1_SHP2
#define RFE_DTX1_SHP2                                0UL
#define RF24_RFE_DTX1_SHP2_S                     0UL
#define RFE_DTX1_SHP2_BM                             0x000000FFUL
#define RF24_RFE_DTX1_SHP2_M                     0x000000FFUL
// enums for bitfield DTX1_SHP2 (width: 8)UL
#define RFE_DTX1_SHP2_ALLZEROS                       0x00UL
#define RFE_DTX1_SHP2_ALLONES                        0xFFUL
// --------------------------------------------------------------
// DTX2
// 
#define RFE_DTX2_ADR (RFE_BASE + 0x0150UL)
static volatile unsigned long* const SP_RFE_DTX2 = (unsigned long*) RFE_DTX2_ADR;
#define S_RFE_DTX2 (*SP_RFE_DTX2)
#define RF24_RFE_O_DTX2                          336
// bitfield: DTX2_SHP5
#define RFE_DTX2_SHP5                                8UL
#define RF24_RFE_DTX2_SHP5_S                     8UL
#define RFE_DTX2_SHP5_BM                             0x0000FF00UL
#define RF24_RFE_DTX2_SHP5_M                     0x0000FF00UL
// enums for bitfield DTX2_SHP5 (width: 8)UL
#define RFE_DTX2_SHP5_ALLZEROS                       0x00UL
#define RFE_DTX2_SHP5_ALLONES                        0xFFUL
// bitfield: DTX2_SHP4
#define RFE_DTX2_SHP4                                0UL
#define RF24_RFE_DTX2_SHP4_S                     0UL
#define RFE_DTX2_SHP4_BM                             0x000000FFUL
#define RF24_RFE_DTX2_SHP4_M                     0x000000FFUL
// enums for bitfield DTX2_SHP4 (width: 8)UL
#define RFE_DTX2_SHP4_ALLZEROS                       0x00UL
#define RFE_DTX2_SHP4_ALLONES                        0xFFUL
// --------------------------------------------------------------
// DTX3
// 
#define RFE_DTX3_ADR (RFE_BASE + 0x0154UL)
static volatile unsigned long* const SP_RFE_DTX3 = (unsigned long*) RFE_DTX3_ADR;
#define S_RFE_DTX3 (*SP_RFE_DTX3)
#define RF24_RFE_O_DTX3                          340
// bitfield: DTX3_SHP7
#define RFE_DTX3_SHP7                                8UL
#define RF24_RFE_DTX3_SHP7_S                     8UL
#define RFE_DTX3_SHP7_BM                             0x0000FF00UL
#define RF24_RFE_DTX3_SHP7_M                     0x0000FF00UL
// enums for bitfield DTX3_SHP7 (width: 8)UL
#define RFE_DTX3_SHP7_ALLZEROS                       0x00UL
#define RFE_DTX3_SHP7_ALLONES                        0xFFUL
// bitfield: DTX3_SHP6
#define RFE_DTX3_SHP6                                0UL
#define RF24_RFE_DTX3_SHP6_S                     0UL
#define RFE_DTX3_SHP6_BM                             0x000000FFUL
#define RF24_RFE_DTX3_SHP6_M                     0x000000FFUL
// enums for bitfield DTX3_SHP6 (width: 8)UL
#define RFE_DTX3_SHP6_ALLZEROS                       0x00UL
#define RFE_DTX3_SHP6_ALLONES                        0xFFUL
// --------------------------------------------------------------
// DTX4
// 
#define RFE_DTX4_ADR (RFE_BASE + 0x0158UL)
static volatile unsigned long* const SP_RFE_DTX4 = (unsigned long*) RFE_DTX4_ADR;
#define S_RFE_DTX4 (*SP_RFE_DTX4)
#define RF24_RFE_O_DTX4                          344
// bitfield: DTX4_SHP9
#define RFE_DTX4_SHP9                                8UL
#define RF24_RFE_DTX4_SHP9_S                     8UL
#define RFE_DTX4_SHP9_BM                             0x0000FF00UL
#define RF24_RFE_DTX4_SHP9_M                     0x0000FF00UL
// enums for bitfield DTX4_SHP9 (width: 8)UL
#define RFE_DTX4_SHP9_ALLZEROS                       0x00UL
#define RFE_DTX4_SHP9_ALLONES                        0xFFUL
// bitfield: DTX4_SHP8
#define RFE_DTX4_SHP8                                0UL
#define RF24_RFE_DTX4_SHP8_S                     0UL
#define RFE_DTX4_SHP8_BM                             0x000000FFUL
#define RF24_RFE_DTX4_SHP8_M                     0x000000FFUL
// enums for bitfield DTX4_SHP8 (width: 8)UL
#define RFE_DTX4_SHP8_ALLZEROS                       0x00UL
#define RFE_DTX4_SHP8_ALLONES                        0xFFUL
// --------------------------------------------------------------
// DTX5
// 
#define RFE_DTX5_ADR (RFE_BASE + 0x015CUL)
static volatile unsigned long* const SP_RFE_DTX5 = (unsigned long*) RFE_DTX5_ADR;
#define S_RFE_DTX5 (*SP_RFE_DTX5)
#define RF24_RFE_O_DTX5                          348
// bitfield: DTX5_SHP11
#define RFE_DTX5_SHP11                               8UL
#define RF24_RFE_DTX5_SHP11_S                    8UL
#define RFE_DTX5_SHP11_BM                            0x0000FF00UL
#define RF24_RFE_DTX5_SHP11_M                    0x0000FF00UL
// enums for bitfield DTX5_SHP11 (width: 8)UL
#define RFE_DTX5_SHP11_ALLZEROS                      0x00UL
#define RFE_DTX5_SHP11_ALLONES                       0xFFUL
// bitfield: DTX5_SHP10
#define RFE_DTX5_SHP10                               0UL
#define RF24_RFE_DTX5_SHP10_S                    0UL
#define RFE_DTX5_SHP10_BM                            0x000000FFUL
#define RF24_RFE_DTX5_SHP10_M                    0x000000FFUL
// enums for bitfield DTX5_SHP10 (width: 8)UL
#define RFE_DTX5_SHP10_ALLZEROS                      0x00UL
#define RFE_DTX5_SHP10_ALLONES                       0xFFUL
// --------------------------------------------------------------
// DTX6
// 
#define RFE_DTX6_ADR (RFE_BASE + 0x0160UL)
static volatile unsigned long* const SP_RFE_DTX6 = (unsigned long*) RFE_DTX6_ADR;
#define S_RFE_DTX6 (*SP_RFE_DTX6)
#define RF24_RFE_O_DTX6                          352
// bitfield: DTX6_SHP13
#define RFE_DTX6_SHP13                               8UL
#define RF24_RFE_DTX6_SHP13_S                    8UL
#define RFE_DTX6_SHP13_BM                            0x0000FF00UL
#define RF24_RFE_DTX6_SHP13_M                    0x0000FF00UL
// enums for bitfield DTX6_SHP13 (width: 8)UL
#define RFE_DTX6_SHP13_ALLZEROS                      0x00UL
#define RFE_DTX6_SHP13_ALLONES                       0xFFUL
// bitfield: DTX6_SHP12
#define RFE_DTX6_SHP12                               0UL
#define RF24_RFE_DTX6_SHP12_S                    0UL
#define RFE_DTX6_SHP12_BM                            0x000000FFUL
#define RF24_RFE_DTX6_SHP12_M                    0x000000FFUL
// enums for bitfield DTX6_SHP12 (width: 8)UL
#define RFE_DTX6_SHP12_ALLZEROS                      0x00UL
#define RFE_DTX6_SHP12_ALLONES                       0xFFUL
// --------------------------------------------------------------
// DTX7
// 
#define RFE_DTX7_ADR (RFE_BASE + 0x0164UL)
static volatile unsigned long* const SP_RFE_DTX7 = (unsigned long*) RFE_DTX7_ADR;
#define S_RFE_DTX7 (*SP_RFE_DTX7)
#define RF24_RFE_O_DTX7                          356
// bitfield: DTX7_SHP15
#define RFE_DTX7_SHP15                               8UL
#define RF24_RFE_DTX7_SHP15_S                    8UL
#define RFE_DTX7_SHP15_BM                            0x0000FF00UL
#define RF24_RFE_DTX7_SHP15_M                    0x0000FF00UL
// enums for bitfield DTX7_SHP15 (width: 8)UL
#define RFE_DTX7_SHP15_ALLZEROS                      0x00UL
#define RFE_DTX7_SHP15_ALLONES                       0xFFUL
// bitfield: DTX7_SHP14
#define RFE_DTX7_SHP14                               0UL
#define RF24_RFE_DTX7_SHP14_S                    0UL
#define RFE_DTX7_SHP14_BM                            0x000000FFUL
#define RF24_RFE_DTX7_SHP14_M                    0x000000FFUL
// enums for bitfield DTX7_SHP14 (width: 8)UL
#define RFE_DTX7_SHP14_ALLZEROS                      0x00UL
#define RFE_DTX7_SHP14_ALLONES                       0xFFUL
// --------------------------------------------------------------
// DTX8
// 
#define RFE_DTX8_ADR (RFE_BASE + 0x0168UL)
static volatile unsigned long* const SP_RFE_DTX8 = (unsigned long*) RFE_DTX8_ADR;
#define S_RFE_DTX8 (*SP_RFE_DTX8)
#define RF24_RFE_O_DTX8                          360
// bitfield: DTX8_SHP17
#define RFE_DTX8_SHP17                               8UL
#define RF24_RFE_DTX8_SHP17_S                    8UL
#define RFE_DTX8_SHP17_BM                            0x0000FF00UL
#define RF24_RFE_DTX8_SHP17_M                    0x0000FF00UL
// enums for bitfield DTX8_SHP17 (width: 8)UL
#define RFE_DTX8_SHP17_ALLZEROS                      0x00UL
#define RFE_DTX8_SHP17_ALLONES                       0xFFUL
// bitfield: DTX8_SHP16
#define RFE_DTX8_SHP16                               0UL
#define RF24_RFE_DTX8_SHP16_S                    0UL
#define RFE_DTX8_SHP16_BM                            0x000000FFUL
#define RF24_RFE_DTX8_SHP16_M                    0x000000FFUL
// enums for bitfield DTX8_SHP16 (width: 8)UL
#define RFE_DTX8_SHP16_ALLZEROS                      0x00UL
#define RFE_DTX8_SHP16_ALLONES                       0xFFUL
// --------------------------------------------------------------
// DTX9
// 
#define RFE_DTX9_ADR (RFE_BASE + 0x016CUL)
static volatile unsigned long* const SP_RFE_DTX9 = (unsigned long*) RFE_DTX9_ADR;
#define S_RFE_DTX9 (*SP_RFE_DTX9)
#define RF24_RFE_O_DTX9                          364
// bitfield: DTX9_SHP19
#define RFE_DTX9_SHP19                               8UL
#define RF24_RFE_DTX9_SHP19_S                    8UL
#define RFE_DTX9_SHP19_BM                            0x0000FF00UL
#define RF24_RFE_DTX9_SHP19_M                    0x0000FF00UL
// enums for bitfield DTX9_SHP19 (width: 8)UL
#define RFE_DTX9_SHP19_ALLZEROS                      0x00UL
#define RFE_DTX9_SHP19_ALLONES                       0xFFUL
// bitfield: DTX9_SHP18
#define RFE_DTX9_SHP18                               0UL
#define RF24_RFE_DTX9_SHP18_S                    0UL
#define RFE_DTX9_SHP18_BM                            0x000000FFUL
#define RF24_RFE_DTX9_SHP18_M                    0x000000FFUL
// enums for bitfield DTX9_SHP18 (width: 8)UL
#define RFE_DTX9_SHP18_ALLZEROS                      0x00UL
#define RFE_DTX9_SHP18_ALLONES                       0xFFUL
// --------------------------------------------------------------
// DTX10
// 
#define RFE_DTX10_ADR (RFE_BASE + 0x0170UL)
static volatile unsigned long* const SP_RFE_DTX10 = (unsigned long*) RFE_DTX10_ADR;
#define S_RFE_DTX10 (*SP_RFE_DTX10)
#define RF24_RFE_O_DTX10                         368
// bitfield: DTX10_SHP21
#define RFE_DTX10_SHP21                              8UL
#define RF24_RFE_DTX10_SHP21_S                   8UL
#define RFE_DTX10_SHP21_BM                           0x0000FF00UL
#define RF24_RFE_DTX10_SHP21_M                   0x0000FF00UL
// enums for bitfield DTX10_SHP21 (width: 8)UL
#define RFE_DTX10_SHP21_ALLZEROS                     0x00UL
#define RFE_DTX10_SHP21_ALLONES                      0xFFUL
// bitfield: DTX10_SHP20
#define RFE_DTX10_SHP20                              0UL
#define RF24_RFE_DTX10_SHP20_S                   0UL
#define RFE_DTX10_SHP20_BM                           0x000000FFUL
#define RF24_RFE_DTX10_SHP20_M                   0x000000FFUL
// enums for bitfield DTX10_SHP20 (width: 8)UL
#define RFE_DTX10_SHP20_ALLZEROS                     0x00UL
#define RFE_DTX10_SHP20_ALLONES                      0xFFUL
// --------------------------------------------------------------
// DTX11
// 
#define RFE_DTX11_ADR (RFE_BASE + 0x0174UL)
static volatile unsigned long* const SP_RFE_DTX11 = (unsigned long*) RFE_DTX11_ADR;
#define S_RFE_DTX11 (*SP_RFE_DTX11)
#define RF24_RFE_O_DTX11                         372
// bitfield: DTX11_SHP23
#define RFE_DTX11_SHP23                              8UL
#define RF24_RFE_DTX11_SHP23_S                   8UL
#define RFE_DTX11_SHP23_BM                           0x0000FF00UL
#define RF24_RFE_DTX11_SHP23_M                   0x0000FF00UL
// enums for bitfield DTX11_SHP23 (width: 8)UL
#define RFE_DTX11_SHP23_ALLZEROS                     0x00UL
#define RFE_DTX11_SHP23_ALLONES                      0xFFUL
// bitfield: DTX11_SHP22
#define RFE_DTX11_SHP22                              0UL
#define RF24_RFE_DTX11_SHP22_S                   0UL
#define RFE_DTX11_SHP22_BM                           0x000000FFUL
#define RF24_RFE_DTX11_SHP22_M                   0x000000FFUL
// enums for bitfield DTX11_SHP22 (width: 8)UL
#define RFE_DTX11_SHP22_ALLZEROS                     0x00UL
#define RFE_DTX11_SHP22_ALLONES                      0xFFUL
// --------------------------------------------------------------
// PLLM0L
// 
#define RFE_PLLM0L_ADR (RFE_BASE + 0x0178UL)
static volatile unsigned long* const SP_RFE_PLLM0L = (unsigned long*) RFE_PLLM0L_ADR;
#define S_RFE_PLLM0L (*SP_RFE_PLLM0L)
#define RF24_RFE_O_PLLM0L                        376
// bitfield: PLLM0L_VALLSB
#define RFE_PLLM0L_VALLSB                            2UL
#define RF24_RFE_PLLM0L_VALLSB_S                 2UL
#define RFE_PLLM0L_VALLSB_BM                         0x0000FFFCUL
#define RF24_RFE_PLLM0L_VALLSB_M                 0x0000FFFCUL
// enums for bitfield PLLM0L_VALLSB (width: 14)UL
#define RFE_PLLM0L_VALLSB_ALLZEROS                   0x0000UL
#define RFE_PLLM0L_VALLSB_ALLONES                    0x3FFFUL
// bitfield: PLLM0L_SPARE0
#define RFE_PLLM0L_SPARE0                            0UL
#define RF24_RFE_PLLM0L_SPARE0_S                 0UL
#define RFE_PLLM0L_SPARE0_BM                         0x00000003UL
#define RF24_RFE_PLLM0L_SPARE0_M                 0x00000003UL
// enums for bitfield PLLM0L_SPARE0 (width: 2)UL
#define RFE_PLLM0L_SPARE0_ALLZEROS                   0x0UL
#define RFE_PLLM0L_SPARE0_ALLONES                    0x3UL
// --------------------------------------------------------------
// PLLM0H
// 
#define RFE_PLLM0H_ADR (RFE_BASE + 0x017CUL)
static volatile unsigned long* const SP_RFE_PLLM0H = (unsigned long*) RFE_PLLM0H_ADR;
#define S_RFE_PLLM0H (*SP_RFE_PLLM0H)
#define RF24_RFE_O_PLLM0H                        380
// bitfield: PLLM0H_VALMSB
#define RFE_PLLM0H_VALMSB                            0UL
#define RF24_RFE_PLLM0H_VALMSB_S                 0UL
#define RFE_PLLM0H_VALMSB_BM                         0x0000FFFFUL
#define RF24_RFE_PLLM0H_VALMSB_M                 0x0000FFFFUL
// enums for bitfield PLLM0H_VALMSB (width: 16)UL
#define RFE_PLLM0H_VALMSB_ALLZEROS                   0x0000UL
#define RFE_PLLM0H_VALMSB_ALLONES                    0xFFFFUL
// --------------------------------------------------------------
// PLLM1L
// 
#define RFE_PLLM1L_ADR (RFE_BASE + 0x0180UL)
static volatile unsigned long* const SP_RFE_PLLM1L = (unsigned long*) RFE_PLLM1L_ADR;
#define S_RFE_PLLM1L (*SP_RFE_PLLM1L)
#define RF24_RFE_O_PLLM1L                        384
// bitfield: PLLM1L_VALLSB
#define RFE_PLLM1L_VALLSB                            2UL
#define RF24_RFE_PLLM1L_VALLSB_S                 2UL
#define RFE_PLLM1L_VALLSB_BM                         0x0000FFFCUL
#define RF24_RFE_PLLM1L_VALLSB_M                 0x0000FFFCUL
// enums for bitfield PLLM1L_VALLSB (width: 14)UL
#define RFE_PLLM1L_VALLSB_ALLZEROS                   0x0000UL
#define RFE_PLLM1L_VALLSB_ALLONES                    0x3FFFUL
// bitfield: PLLM1L_SPARE0
#define RFE_PLLM1L_SPARE0                            0UL
#define RF24_RFE_PLLM1L_SPARE0_S                 0UL
#define RFE_PLLM1L_SPARE0_BM                         0x00000003UL
#define RF24_RFE_PLLM1L_SPARE0_M                 0x00000003UL
// enums for bitfield PLLM1L_SPARE0 (width: 2)UL
#define RFE_PLLM1L_SPARE0_ALLZEROS                   0x0UL
#define RFE_PLLM1L_SPARE0_ALLONES                    0x3UL
// --------------------------------------------------------------
// PLLM1H
// 
#define RFE_PLLM1H_ADR (RFE_BASE + 0x0184UL)
static volatile unsigned long* const SP_RFE_PLLM1H = (unsigned long*) RFE_PLLM1H_ADR;
#define S_RFE_PLLM1H (*SP_RFE_PLLM1H)
#define RF24_RFE_O_PLLM1H                        388
// bitfield: PLLM1H_VALMSB
#define RFE_PLLM1H_VALMSB                            0UL
#define RF24_RFE_PLLM1H_VALMSB_S                 0UL
#define RFE_PLLM1H_VALMSB_BM                         0x0000FFFFUL
#define RF24_RFE_PLLM1H_VALMSB_M                 0x0000FFFFUL
// enums for bitfield PLLM1H_VALMSB (width: 16)UL
#define RFE_PLLM1H_VALMSB_ALLZEROS                   0x0000UL
#define RFE_PLLM1H_VALMSB_ALLONES                    0xFFFFUL
// --------------------------------------------------------------
// CALMCRS
// 
#define RFE_CALMCRS_ADR (RFE_BASE + 0x0188UL)
static volatile unsigned long* const SP_RFE_CALMCRS = (unsigned long*) RFE_CALMCRS_ADR;
#define S_RFE_CALMCRS (*SP_RFE_CALMCRS)
#define RF24_RFE_O_CALMCRS                       392
// bitfield: CALMCRS_VAL
#define RFE_CALMCRS_VAL                              0UL
#define RF24_RFE_CALMCRS_VAL_S                   0UL
#define RFE_CALMCRS_VAL_BM                           0x0000FFFFUL
#define RF24_RFE_CALMCRS_VAL_M                   0x0000FFFFUL
// enums for bitfield CALMCRS_VAL (width: 16)UL
#define RFE_CALMCRS_VAL_ALLZEROS                     0x0000UL
#define RFE_CALMCRS_VAL_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// CALMMID
// 
#define RFE_CALMMID_ADR (RFE_BASE + 0x018CUL)
static volatile unsigned long* const SP_RFE_CALMMID = (unsigned long*) RFE_CALMMID_ADR;
#define S_RFE_CALMMID (*SP_RFE_CALMMID)
#define RF24_RFE_O_CALMMID                       396
// bitfield: CALMMID_VAL
#define RFE_CALMMID_VAL                              0UL
#define RF24_RFE_CALMMID_VAL_S                   0UL
#define RFE_CALMMID_VAL_BM                           0x0000FFFFUL
#define RF24_RFE_CALMMID_VAL_M                   0x0000FFFFUL
// enums for bitfield CALMMID_VAL (width: 16)UL
#define RFE_CALMMID_VAL_ALLZEROS                     0x0000UL
#define RFE_CALMMID_VAL_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// REFDIV
// 
#define RFE_REFDIV_ADR (RFE_BASE + 0x0190UL)
static volatile unsigned long* const SP_RFE_REFDIV = (unsigned long*) RFE_REFDIV_ADR;
#define S_RFE_REFDIV (*SP_RFE_REFDIV)
#define RF24_RFE_O_REFDIV                        400
// bitfield: REFDIV_LOAD
#define RFE_REFDIV_LOAD                              0UL
#define RF24_RFE_REFDIV_LOAD_S                   0UL
#define RFE_REFDIV_LOAD_BM                           0x0000FFFFUL
#define RF24_RFE_REFDIV_LOAD_M                   0x0000FFFFUL
// enums for bitfield REFDIV_LOAD (width: 16)UL
#define RFE_REFDIV_LOAD_ALLZEROS                     0x0000UL
#define RFE_REFDIV_LOAD_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// DLOCTL0
// 
#define RFE_DLOCTL0_ADR (RFE_BASE + 0x0198UL)
static volatile unsigned long* const SP_RFE_DLOCTL0 = (unsigned long*) RFE_DLOCTL0_ADR;
#define S_RFE_DLOCTL0 (*SP_RFE_DLOCTL0)
#define RF24_RFE_O_DLOCTL0                       408
// bitfield: DLOCTL0_TDCSTOP
#define RFE_DLOCTL0_TDCSTOP                          8UL
#define RF24_RFE_DLOCTL0_TDCSTOP_S               8UL
#define RFE_DLOCTL0_TDCSTOP_BM                       0x00000700UL
#define RF24_RFE_DLOCTL0_TDCSTOP_M               0x00000700UL
// enums for bitfield DLOCTL0_TDCSTOP (width: 3)UL
#define RFE_DLOCTL0_TDCSTOP_CLOSED                   0x0UL
#define RFE_DLOCTL0_TDCSTOP_OPEN                     0x1UL
// bitfield: DLOCTL0_DTSTXTAL
#define RFE_DLOCTL0_DTSTXTAL                         7UL
#define RF24_RFE_DLOCTL0_DTSTXTAL_S              7UL
#define RFE_DLOCTL0_DTSTXTAL_BM                      0x00000080UL
#define RF24_RFE_DLOCTL0_DTSTXTAL_M              0x00000080UL
// enums for bitfield DLOCTL0_DTSTXTAL (width: 1)UL
#define RFE_DLOCTL0_DTSTXTAL_ZERO                    0x0UL
#define RFE_DLOCTL0_DTSTXTAL_ONE                     0x1UL
// bitfield: DLOCTL0_LOOPUPD
#define RFE_DLOCTL0_LOOPUPD                          4UL
#define RF24_RFE_DLOCTL0_LOOPUPD_S               4UL
#define RFE_DLOCTL0_LOOPUPD_BM                       0x00000070UL
#define RF24_RFE_DLOCTL0_LOOPUPD_M               0x00000070UL
// enums for bitfield DLOCTL0_LOOPUPD (width: 3)UL
#define RFE_DLOCTL0_LOOPUPD_DEF                      0x0UL
#define RFE_DLOCTL0_LOOPUPD_ALT                      0x1UL
// bitfield: DLOCTL0_PH3
#define RFE_DLOCTL0_PH3                              3UL
#define RF24_RFE_DLOCTL0_PH3_S                   3UL
#define RFE_DLOCTL0_PH3_BM                           0x00000008UL
#define RF24_RFE_DLOCTL0_PH3_M                   0x00000008UL
// enums for bitfield DLOCTL0_PH3 (width: 1)UL
#define RFE_DLOCTL0_PH3_HALT                         0x0UL
#define RFE_DLOCTL0_PH3_START                        0x1UL
// bitfield: DLOCTL0_PH2
#define RFE_DLOCTL0_PH2                              2UL
#define RF24_RFE_DLOCTL0_PH2_S                   2UL
#define RFE_DLOCTL0_PH2_BM                           0x00000004UL
#define RF24_RFE_DLOCTL0_PH2_M                   0x00000004UL
// enums for bitfield DLOCTL0_PH2 (width: 1)UL
#define RFE_DLOCTL0_PH2_HALT                         0x0UL
#define RFE_DLOCTL0_PH2_START                        0x1UL
// bitfield: DLOCTL0_LOOPMODE
#define RFE_DLOCTL0_LOOPMODE                         1UL
#define RF24_RFE_DLOCTL0_LOOPMODE_S              1UL
#define RFE_DLOCTL0_LOOPMODE_BM                      0x00000002UL
#define RF24_RFE_DLOCTL0_LOOPMODE_M              0x00000002UL
// enums for bitfield DLOCTL0_LOOPMODE (width: 1)UL
#define RFE_DLOCTL0_LOOPMODE_CLOSED                  0x0UL
#define RFE_DLOCTL0_LOOPMODE_OPEN                    0x1UL
// bitfield: DLOCTL0_RSTN
#define RFE_DLOCTL0_RSTN                             0UL
#define RF24_RFE_DLOCTL0_RSTN_S                  0UL
#define RFE_DLOCTL0_RSTN_BM                          0x00000001UL
#define RF24_RFE_DLOCTL0_RSTN_M                  0x00000001UL
// enums for bitfield DLOCTL0_RSTN (width: 1)UL
#define RFE_DLOCTL0_RSTN_RESET                       0x0UL
#define RFE_DLOCTL0_RSTN_ACTIVE                      0x1UL
// --------------------------------------------------------------
// DLOCTL1
// 
#define RFE_DLOCTL1_ADR (RFE_BASE + 0x01A0UL)
static volatile unsigned long* const SP_RFE_DLOCTL1 = (unsigned long*) RFE_DLOCTL1_ADR;
#define S_RFE_DLOCTL1 (*SP_RFE_DLOCTL1)
#define RF24_RFE_O_DLOCTL1                       416
// bitfield: DLOCTL1_DCO
#define RFE_DLOCTL1_DCO                              15UL
#define RF24_RFE_DLOCTL1_DCO_S                   15UL
#define RFE_DLOCTL1_DCO_BM                           0x00008000UL
#define RF24_RFE_DLOCTL1_DCO_M                   0x00008000UL
// enums for bitfield DLOCTL1_DCO (width: 1)UL
#define RFE_DLOCTL1_DCO_DIS                          0x0UL
#define RFE_DLOCTL1_DCO_EN                           0x1UL
// bitfield: DLOCTL1_FCDEM
#define RFE_DLOCTL1_FCDEM                            7UL
#define RF24_RFE_DLOCTL1_FCDEM_S                 7UL
#define RFE_DLOCTL1_FCDEM_BM                         0x00000080UL
#define RF24_RFE_DLOCTL1_FCDEM_M                 0x00000080UL
// enums for bitfield DLOCTL1_FCDEM (width: 1)UL
#define RFE_DLOCTL1_FCDEM_DIS                        0x0UL
#define RFE_DLOCTL1_FCDEM_EN                         0x1UL
// bitfield: DLOCTL1_DTSTCKVD
#define RFE_DLOCTL1_DTSTCKVD                         6UL
#define RF24_RFE_DLOCTL1_DTSTCKVD_S              6UL
#define RFE_DLOCTL1_DTSTCKVD_BM                      0x00000040UL
#define RF24_RFE_DLOCTL1_DTSTCKVD_M              0x00000040UL
// enums for bitfield DLOCTL1_DTSTCKVD (width: 1)UL
#define RFE_DLOCTL1_DTSTCKVD_ZERO                    0x0UL
#define RFE_DLOCTL1_DTSTCKVD_ONE                     0x1UL
// bitfield: DLOCTL1_PHEDISC
#define RFE_DLOCTL1_PHEDISC                          5UL
#define RF24_RFE_DLOCTL1_PHEDISC_S               5UL
#define RFE_DLOCTL1_PHEDISC_BM                       0x00000020UL
#define RF24_RFE_DLOCTL1_PHEDISC_M               0x00000020UL
// enums for bitfield DLOCTL1_PHEDISC (width: 1)UL
#define RFE_DLOCTL1_PHEDISC_DIS                      0x0UL
#define RFE_DLOCTL1_PHEDISC_EN                       0x1UL
// bitfield: DLOCTL1_PLLMON
#define RFE_DLOCTL1_PLLMON                           4UL
#define RF24_RFE_DLOCTL1_PLLMON_S                4UL
#define RFE_DLOCTL1_PLLMON_BM                        0x00000010UL
#define RF24_RFE_DLOCTL1_PLLMON_M                0x00000010UL
// enums for bitfield DLOCTL1_PLLMON (width: 1)UL
#define RFE_DLOCTL1_PLLMON_DIS                       0x0UL
#define RFE_DLOCTL1_PLLMON_EN                        0x1UL
// bitfield: DLOCTL1_IIR
#define RFE_DLOCTL1_IIR                              3UL
#define RF24_RFE_DLOCTL1_IIR_S                   3UL
#define RFE_DLOCTL1_IIR_BM                           0x00000008UL
#define RF24_RFE_DLOCTL1_IIR_M                   0x00000008UL
// enums for bitfield DLOCTL1_IIR (width: 1)UL
#define RFE_DLOCTL1_IIR_DIS                          0x0UL
#define RFE_DLOCTL1_IIR_EN                           0x1UL
// bitfield: DLOCTL1_MOD
#define RFE_DLOCTL1_MOD                              2UL
#define RF24_RFE_DLOCTL1_MOD_S                   2UL
#define RFE_DLOCTL1_MOD_BM                           0x00000004UL
#define RF24_RFE_DLOCTL1_MOD_M                   0x00000004UL
// enums for bitfield DLOCTL1_MOD (width: 1)UL
#define RFE_DLOCTL1_MOD_DIS                          0x0UL
#define RFE_DLOCTL1_MOD_EN                           0x1UL
// bitfield: DLOCTL1_MODINIT
#define RFE_DLOCTL1_MODINIT                          1UL
#define RF24_RFE_DLOCTL1_MODINIT_S               1UL
#define RFE_DLOCTL1_MODINIT_BM                       0x00000002UL
#define RF24_RFE_DLOCTL1_MODINIT_M               0x00000002UL
// enums for bitfield DLOCTL1_MODINIT (width: 1)UL
#define RFE_DLOCTL1_MODINIT_DEACTIVATE               0x0UL
#define RFE_DLOCTL1_MODINIT_ACTIVATE                 0x1UL
// bitfield: DLOCTL1_MTDCRSTN
#define RFE_DLOCTL1_MTDCRSTN                         0UL
#define RF24_RFE_DLOCTL1_MTDCRSTN_S              0UL
#define RFE_DLOCTL1_MTDCRSTN_BM                      0x00000001UL
#define RF24_RFE_DLOCTL1_MTDCRSTN_M              0x00000001UL
// enums for bitfield DLOCTL1_MTDCRSTN (width: 1)UL
#define RFE_DLOCTL1_MTDCRSTN_RESET                   0x0UL
#define RFE_DLOCTL1_MTDCRSTN_ACTIVE                  0x1UL
// --------------------------------------------------------------
// DCOOVR0
// 
#define RFE_DCOOVR0_ADR (RFE_BASE + 0x01A8UL)
static volatile unsigned long* const SP_RFE_DCOOVR0 = (unsigned long*) RFE_DCOOVR0_ADR;
#define S_RFE_DCOOVR0 (*SP_RFE_DCOOVR0)
#define RF24_RFE_O_DCOOVR0                       424
// bitfield: DCOOVR0_MIDCODE
#define RFE_DCOOVR0_MIDCODE                          8UL
#define RF24_RFE_DCOOVR0_MIDCODE_S               8UL
#define RFE_DCOOVR0_MIDCODE_BM                       0x00003F00UL
#define RF24_RFE_DCOOVR0_MIDCODE_M               0x00003F00UL
// enums for bitfield DCOOVR0_MIDCODE (width: 6)UL
#define RFE_DCOOVR0_MIDCODE_ALLZEROS                 0x00UL
#define RFE_DCOOVR0_MIDCODE_ALLONES                  0x3FUL
// bitfield: DCOOVR0_CRSCODE
#define RFE_DCOOVR0_CRSCODE                          4UL
#define RF24_RFE_DCOOVR0_CRSCODE_S               4UL
#define RFE_DCOOVR0_CRSCODE_BM                       0x000000F0UL
#define RF24_RFE_DCOOVR0_CRSCODE_M               0x000000F0UL
// enums for bitfield DCOOVR0_CRSCODE (width: 4)UL
#define RFE_DCOOVR0_CRSCODE_ALLZEROS                 0x0UL
#define RFE_DCOOVR0_CRSCODE_ALLONES                  0xFUL
// bitfield: DCOOVR0_FINECTL
#define RFE_DCOOVR0_FINECTL                          3UL
#define RF24_RFE_DCOOVR0_FINECTL_S               3UL
#define RFE_DCOOVR0_FINECTL_BM                       0x00000008UL
#define RF24_RFE_DCOOVR0_FINECTL_M               0x00000008UL
// enums for bitfield DCOOVR0_FINECTL (width: 1)UL
#define RFE_DCOOVR0_FINECTL_DIS                      0x0UL
#define RFE_DCOOVR0_FINECTL_EN                       0x1UL
// bitfield: DCOOVR0_SDMICTL
#define RFE_DCOOVR0_SDMICTL                          2UL
#define RF24_RFE_DCOOVR0_SDMICTL_S               2UL
#define RFE_DCOOVR0_SDMICTL_BM                       0x00000004UL
#define RF24_RFE_DCOOVR0_SDMICTL_M               0x00000004UL
// enums for bitfield DCOOVR0_SDMICTL (width: 1)UL
#define RFE_DCOOVR0_SDMICTL_DIS                      0x0UL
#define RFE_DCOOVR0_SDMICTL_EN                       0x1UL
// bitfield: DCOOVR0_MIDCTL
#define RFE_DCOOVR0_MIDCTL                           1UL
#define RF24_RFE_DCOOVR0_MIDCTL_S                1UL
#define RFE_DCOOVR0_MIDCTL_BM                        0x00000002UL
#define RF24_RFE_DCOOVR0_MIDCTL_M                0x00000002UL
// enums for bitfield DCOOVR0_MIDCTL (width: 1)UL
#define RFE_DCOOVR0_MIDCTL_DIS                       0x0UL
#define RFE_DCOOVR0_MIDCTL_EN                        0x1UL
// bitfield: DCOOVR0_CRSCTL
#define RFE_DCOOVR0_CRSCTL                           0UL
#define RF24_RFE_DCOOVR0_CRSCTL_S                0UL
#define RFE_DCOOVR0_CRSCTL_BM                        0x00000001UL
#define RF24_RFE_DCOOVR0_CRSCTL_M                0x00000001UL
// enums for bitfield DCOOVR0_CRSCTL (width: 1)UL
#define RFE_DCOOVR0_CRSCTL_DIS                       0x0UL
#define RFE_DCOOVR0_CRSCTL_EN                        0x1UL
// --------------------------------------------------------------
// DCOOVR1
// 
#define RFE_DCOOVR1_ADR (RFE_BASE + 0x01ACUL)
static volatile unsigned long* const SP_RFE_DCOOVR1 = (unsigned long*) RFE_DCOOVR1_ADR;
#define S_RFE_DCOOVR1 (*SP_RFE_DCOOVR1)
#define RF24_RFE_O_DCOOVR1                       428
// bitfield: DCOOVR1_FINECODE
#define RFE_DCOOVR1_FINECODE                         8UL
#define RF24_RFE_DCOOVR1_FINECODE_S              8UL
#define RFE_DCOOVR1_FINECODE_BM                      0x00007F00UL
#define RF24_RFE_DCOOVR1_FINECODE_M              0x00007F00UL
// enums for bitfield DCOOVR1_FINECODE (width: 7)UL
#define RFE_DCOOVR1_FINECODE_ALLZEROS                0x00UL
#define RFE_DCOOVR1_FINECODE_ALLONES                 0x7FUL
// bitfield: DCOOVR1_SDMICODE
#define RFE_DCOOVR1_SDMICODE                         0UL
#define RF24_RFE_DCOOVR1_SDMICODE_S              0UL
#define RFE_DCOOVR1_SDMICODE_BM                      0x000000FFUL
#define RF24_RFE_DCOOVR1_SDMICODE_M              0x000000FFUL
// enums for bitfield DCOOVR1_SDMICODE (width: 8)UL
#define RFE_DCOOVR1_SDMICODE_ALLZEROS                0x00UL
#define RFE_DCOOVR1_SDMICODE_ALLONES                 0xFFUL
// --------------------------------------------------------------
// DTST
// 
#define RFE_DTST_ADR (RFE_BASE + 0x01B0UL)
static volatile unsigned long* const SP_RFE_DTST = (unsigned long*) RFE_DTST_ADR;
#define S_RFE_DTST (*SP_RFE_DTST)
#define RF24_RFE_O_DTST                          432
// bitfield: DTST_SPARE11
#define RFE_DTST_SPARE11                             11UL
#define RF24_RFE_DTST_SPARE11_S                  11UL
#define RFE_DTST_SPARE11_BM                          0x00007800UL
#define RF24_RFE_DTST_SPARE11_M                  0x00007800UL
// enums for bitfield DTST_SPARE11 (width: 4)UL
#define RFE_DTST_SPARE11_ALLZEROS                    0x0UL
#define RFE_DTST_SPARE11_ALLONES                     0xFUL
// bitfield: DTST_VARTGLDLY
#define RFE_DTST_VARTGLDLY                           8UL
#define RF24_RFE_DTST_VARTGLDLY_S                8UL
#define RFE_DTST_VARTGLDLY_BM                        0x00000700UL
#define RF24_RFE_DTST_VARTGLDLY_M                0x00000700UL
// enums for bitfield DTST_VARTGLDLY (width: 3)UL
#define RFE_DTST_VARTGLDLY_CLK_0_PER                 0x0UL
#define RFE_DTST_VARTGLDLY_CLK_1_PER                 0x1UL
#define RFE_DTST_VARTGLDLY_CLK_2_PER                 0x2UL
#define RFE_DTST_VARTGLDLY_CLK_3_PER                 0x3UL
#define RFE_DTST_VARTGLDLY_CLK_4_PER                 0x4UL
#define RFE_DTST_VARTGLDLY_CLK_5_PER                 0x5UL
#define RFE_DTST_VARTGLDLY_CLK_6_PER                 0x6UL
#define RFE_DTST_VARTGLDLY_CLK_7_PER                 0x7UL
// bitfield: DTST_REFTGLDLY
#define RFE_DTST_REFTGLDLY                           7UL
#define RF24_RFE_DTST_REFTGLDLY_S                7UL
#define RFE_DTST_REFTGLDLY_BM                        0x00000080UL
#define RF24_RFE_DTST_REFTGLDLY_M                0x00000080UL
// enums for bitfield DTST_REFTGLDLY (width: 1)UL
#define RFE_DTST_REFTGLDLY_CLK_0_PER                 0x0UL
#define RFE_DTST_REFTGLDLY_CLK_1_PER                 0x1UL
// bitfield: DTST_TRNSEQ
#define RFE_DTST_TRNSEQ                              6UL
#define RF24_RFE_DTST_TRNSEQ_S                   6UL
#define RFE_DTST_TRNSEQ_BM                           0x00000040UL
#define RF24_RFE_DTST_TRNSEQ_M                   0x00000040UL
// enums for bitfield DTST_TRNSEQ (width: 1)UL
#define RFE_DTST_TRNSEQ_DIS                          0x0UL
#define RFE_DTST_TRNSEQ_EN                           0x1UL
// bitfield: DTST_SPARE5
#define RFE_DTST_SPARE5                              5UL
#define RF24_RFE_DTST_SPARE5_S                   5UL
#define RFE_DTST_SPARE5_BM                           0x00000020UL
#define RF24_RFE_DTST_SPARE5_M                   0x00000020UL
// enums for bitfield DTST_SPARE5 (width: 1)UL
#define RFE_DTST_SPARE5_ZERO                         0x0UL
#define RFE_DTST_SPARE5_ONE                          0x1UL
// bitfield: DTST_SIG
#define RFE_DTST_SIG                                 0UL
#define RF24_RFE_DTST_SIG_S                      0UL
#define RFE_DTST_SIG_BM                              0x0000001FUL
#define RF24_RFE_DTST_SIG_M                      0x0000001FUL
// enums for bitfield DTST_SIG (width: 5)UL
#define RFE_DTST_SIG_REF_NC_0                        0x00UL
#define RFE_DTST_SIG_REF_FSMCAL                      0x01UL
#define RFE_DTST_SIG_REF_FERR_MAG                    0x02UL
#define RFE_DTST_SIG_REF_NC_3                        0x03UL
#define RFE_DTST_SIG_REF_NC_4                        0x04UL
#define RFE_DTST_SIG_REF_NC_5                        0x05UL
#define RFE_DTST_SIG_REF_NC_6                        0x06UL
#define RFE_DTST_SIG_REF_NC_7                        0x07UL
#define RFE_DTST_SIG_REF_NC_8                        0x08UL
#define RFE_DTST_SIG_REF_NC_9                        0x09UL
#define RFE_DTST_SIG_REF_NC_10                       0x0AUL
#define RFE_DTST_SIG_REF_NC_11                       0x0BUL
#define RFE_DTST_SIG_REF_NC_12                       0x0CUL
#define RFE_DTST_SIG_REF_NC_13                       0x0DUL
#define RFE_DTST_SIG_REF_NC_14                       0x0EUL
#define RFE_DTST_SIG_REF_NC_15                       0x0FUL
#define RFE_DTST_SIG_VAR_NC_0                        0x10UL
#define RFE_DTST_SIG_VAR_PHERR_UPPER                 0x11UL
#define RFE_DTST_SIG_VAR_PHERR_LOWER                 0x12UL
#define RFE_DTST_SIG_VAR_PH_RAW                      0x13UL
#define RFE_DTST_SIG_VAR_PH_TDCCORR                  0x14UL
#define RFE_DTST_SIG_VAR_PH_COMP_PHERR_TDCSTOP       0x15UL
#define RFE_DTST_SIG_VAR_TDCSTOP_PHERR               0x16UL
#define RFE_DTST_SIG_VAR_TDCSTOP_STATUS_TDC          0x17UL
#define RFE_DTST_SIG_VAR_MPX_CAN                     0x18UL
#define RFE_DTST_SIG_VAR_LOCK_FINECODE               0x19UL
#define RFE_DTST_SIG_VAR_LOOP_UPD_FINECODE           0x1AUL
#define RFE_DTST_SIG_VAR_NC_11                       0x1BUL
#define RFE_DTST_SIG_VAR_NC_12                       0x1CUL
#define RFE_DTST_SIG_VAR_NC_13                       0x1DUL
#define RFE_DTST_SIG_VAR_NC_14                       0x1EUL
#define RFE_DTST_SIG_VAR_NC_15                       0x1FUL
// --------------------------------------------------------------
// DLOEV
// 
#define RFE_DLOEV_ADR (RFE_BASE + 0x01B4UL)
static volatile unsigned long* const SP_RFE_DLOEV = (unsigned long*) RFE_DLOEV_ADR;
#define S_RFE_DLOEV (*SP_RFE_DLOEV)
#define RF24_RFE_O_DLOEV                         436
// bitfield: DLOEV_LOCK
#define RFE_DLOEV_LOCK                               7UL
#define RF24_RFE_DLOEV_LOCK_S                    7UL
#define RFE_DLOEV_LOCK_BM                            0x00000080UL
#define RF24_RFE_DLOEV_LOCK_M                    0x00000080UL
// enums for bitfield DLOEV_LOCK (width: 1)UL
#define RFE_DLOEV_LOCK_ZERO                          0x0UL
#define RFE_DLOEV_LOCK_ONE                           0x1UL
// bitfield: DLOEV_LOL
#define RFE_DLOEV_LOL                                6UL
#define RF24_RFE_DLOEV_LOL_S                     6UL
#define RFE_DLOEV_LOL_BM                             0x00000040UL
#define RF24_RFE_DLOEV_LOL_M                     0x00000040UL
// enums for bitfield DLOEV_LOL (width: 1)UL
#define RFE_DLOEV_LOL_ZERO                           0x0UL
#define RFE_DLOEV_LOL_ONE                            0x1UL
// bitfield: DLOEV_FCABVTHR
#define RFE_DLOEV_FCABVTHR                           5UL
#define RF24_RFE_DLOEV_FCABVTHR_S                5UL
#define RFE_DLOEV_FCABVTHR_BM                        0x00000020UL
#define RF24_RFE_DLOEV_FCABVTHR_M                0x00000020UL
// enums for bitfield DLOEV_FCABVTHR (width: 1)UL
#define RFE_DLOEV_FCABVTHR_ZERO                      0x0UL
#define RFE_DLOEV_FCABVTHR_ONE                       0x1UL
// bitfield: DLOEV_FCBLWTHR
#define RFE_DLOEV_FCBLWTHR                           4UL
#define RF24_RFE_DLOEV_FCBLWTHR_S                4UL
#define RFE_DLOEV_FCBLWTHR_BM                        0x00000010UL
#define RF24_RFE_DLOEV_FCBLWTHR_M                0x00000010UL
// enums for bitfield DLOEV_FCBLWTHR (width: 1)UL
#define RFE_DLOEV_FCBLWTHR_ZERO                      0x0UL
#define RFE_DLOEV_FCBLWTHR_ONE                       0x1UL
// bitfield: DLOEV_STATE
#define RFE_DLOEV_STATE                              0UL
#define RF24_RFE_DLOEV_STATE_S                   0UL
#define RFE_DLOEV_STATE_BM                           0x0000000FUL
#define RF24_RFE_DLOEV_STATE_M                   0x0000000FUL
// enums for bitfield DLOEV_STATE (width: 4)UL
#define RFE_DLOEV_STATE_ALLZEROS                     0x0UL
#define RFE_DLOEV_STATE_ALLONES                      0xFUL
// --------------------------------------------------------------
// DTSTRD
// 
#define RFE_DTSTRD_ADR (RFE_BASE + 0x01B8UL)
static volatile unsigned long* const SP_RFE_DTSTRD = (unsigned long*) RFE_DTSTRD_ADR;
#define S_RFE_DTSTRD (*SP_RFE_DTSTRD)
#define RF24_RFE_O_DTSTRD                        440
// bitfield: DTSTRD_DATA
#define RFE_DTSTRD_DATA                              0UL
#define RF24_RFE_DTSTRD_DATA_S                   0UL
#define RFE_DTSTRD_DATA_BM                           0x0000FFFFUL
#define RF24_RFE_DTSTRD_DATA_M                   0x0000FFFFUL
// enums for bitfield DTSTRD_DATA (width: 16)UL
#define RFE_DTSTRD_DATA_ALLZEROS                     0x0000UL
#define RFE_DTSTRD_DATA_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// FDCOSPANLSB
// 
#define RFE_FDCOSPANLSB_ADR (RFE_BASE + 0x01BCUL)
static volatile unsigned long* const SP_RFE_FDCOSPANLSB = (unsigned long*) RFE_FDCOSPANLSB_ADR;
#define S_RFE_FDCOSPANLSB (*SP_RFE_FDCOSPANLSB)
#define RF24_RFE_O_FDCOSPANLSB                   444
// bitfield: FDCOSPANLSB_VAL
#define RFE_FDCOSPANLSB_VAL                          0UL
#define RF24_RFE_FDCOSPANLSB_VAL_S               0UL
#define RFE_FDCOSPANLSB_VAL_BM                       0x0000FFFFUL
#define RF24_RFE_FDCOSPANLSB_VAL_M               0x0000FFFFUL
// enums for bitfield FDCOSPANLSB_VAL (width: 16)UL
#define RFE_FDCOSPANLSB_VAL_ALLZEROS                 0x0000UL
#define RFE_FDCOSPANLSB_VAL_ALLONES                  0xFFFFUL
// --------------------------------------------------------------
// FDCOSPANMSB
// 
#define RFE_FDCOSPANMSB_ADR (RFE_BASE + 0x01C0UL)
static volatile unsigned long* const SP_RFE_FDCOSPANMSB = (unsigned long*) RFE_FDCOSPANMSB_ADR;
#define S_RFE_FDCOSPANMSB (*SP_RFE_FDCOSPANMSB)
#define RF24_RFE_O_FDCOSPANMSB                   448
// bitfield: FDCOSPANMSB_VAL
#define RFE_FDCOSPANMSB_VAL                          0UL
#define RF24_RFE_FDCOSPANMSB_VAL_S               0UL
#define RFE_FDCOSPANMSB_VAL_BM                       0x00000007UL
#define RF24_RFE_FDCOSPANMSB_VAL_M               0x00000007UL
// enums for bitfield FDCOSPANMSB_VAL (width: 3)UL
#define RFE_FDCOSPANMSB_VAL_ALLZEROS                 0x0UL
#define RFE_FDCOSPANMSB_VAL_ALLONES                  0x7UL
// --------------------------------------------------------------
// TDCCAL
// 
#define RFE_TDCCAL_ADR (RFE_BASE + 0x01C4UL)
static volatile unsigned long* const SP_RFE_TDCCAL = (unsigned long*) RFE_TDCCAL_ADR;
#define S_RFE_TDCCAL (*SP_RFE_TDCCAL)
#define RF24_RFE_O_TDCCAL                        452
// bitfield: TDCCAL_VAL
#define RFE_TDCCAL_VAL                               0UL
#define RF24_RFE_TDCCAL_VAL_S                    0UL
#define RFE_TDCCAL_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_TDCCAL_VAL_M                    0x0000FFFFUL
// enums for bitfield TDCCAL_VAL (width: 16)UL
#define RFE_TDCCAL_VAL_ALLZEROS                      0x0000UL
#define RFE_TDCCAL_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// CALRES
// 
#define RFE_CALRES_ADR (RFE_BASE + 0x01C8UL)
static volatile unsigned long* const SP_RFE_CALRES = (unsigned long*) RFE_CALRES_ADR;
#define S_RFE_CALRES (*SP_RFE_CALRES)
#define RF24_RFE_O_CALRES                        456
// bitfield: CALRES_MIDCODE
#define RFE_CALRES_MIDCODE                           4UL
#define RF24_RFE_CALRES_MIDCODE_S                4UL
#define RFE_CALRES_MIDCODE_BM                        0x000003F0UL
#define RF24_RFE_CALRES_MIDCODE_M                0x000003F0UL
// enums for bitfield CALRES_MIDCODE (width: 6)UL
#define RFE_CALRES_MIDCODE_ALLZEROS                  0x00UL
#define RFE_CALRES_MIDCODE_ALLONES                   0x3FUL
// bitfield: CALRES_CRSCODE
#define RFE_CALRES_CRSCODE                           0UL
#define RF24_RFE_CALRES_CRSCODE_S                0UL
#define RFE_CALRES_CRSCODE_BM                        0x0000000FUL
#define RF24_RFE_CALRES_CRSCODE_M                0x0000000FUL
// enums for bitfield CALRES_CRSCODE (width: 4)UL
#define RFE_CALRES_CRSCODE_ALLZEROS                  0x0UL
#define RFE_CALRES_CRSCODE_ALLONES                   0xFUL
// --------------------------------------------------------------
// GPI
// 
#define RFE_GPI_ADR (RFE_BASE + 0x01CCUL)
static volatile unsigned long* const SP_RFE_GPI = (unsigned long*) RFE_GPI_ADR;
#define S_RFE_GPI (*SP_RFE_GPI)
#define RF24_RFE_O_GPI                           460
// bitfield: GPI_GPI7
#define RFE_GPI_GPI7                                 7UL
#define RF24_RFE_GPI_GPI7_S                      7UL
#define RFE_GPI_GPI7_BM                              0x00000080UL
#define RF24_RFE_GPI_GPI7_M                      0x00000080UL
// enums for bitfield GPI_GPI7 (width: 1)UL
#define RFE_GPI_GPI7_ZERO                            0x0UL
#define RFE_GPI_GPI7_ONE                             0x1UL
// bitfield: GPI_GPI6
#define RFE_GPI_GPI6                                 6UL
#define RF24_RFE_GPI_GPI6_S                      6UL
#define RFE_GPI_GPI6_BM                              0x00000040UL
#define RF24_RFE_GPI_GPI6_M                      0x00000040UL
// enums for bitfield GPI_GPI6 (width: 1)UL
#define RFE_GPI_GPI6_ZERO                            0x0UL
#define RFE_GPI_GPI6_ONE                             0x1UL
// bitfield: GPI_GPI5
#define RFE_GPI_GPI5                                 5UL
#define RF24_RFE_GPI_GPI5_S                      5UL
#define RFE_GPI_GPI5_BM                              0x00000020UL
#define RF24_RFE_GPI_GPI5_M                      0x00000020UL
// enums for bitfield GPI_GPI5 (width: 1)UL
#define RFE_GPI_GPI5_ZERO                            0x0UL
#define RFE_GPI_GPI5_ONE                             0x1UL
// bitfield: GPI_GPI4
#define RFE_GPI_GPI4                                 4UL
#define RF24_RFE_GPI_GPI4_S                      4UL
#define RFE_GPI_GPI4_BM                              0x00000010UL
#define RF24_RFE_GPI_GPI4_M                      0x00000010UL
// enums for bitfield GPI_GPI4 (width: 1)UL
#define RFE_GPI_GPI4_ZERO                            0x0UL
#define RFE_GPI_GPI4_ONE                             0x1UL
// bitfield: GPI_GPI3
#define RFE_GPI_GPI3                                 3UL
#define RF24_RFE_GPI_GPI3_S                      3UL
#define RFE_GPI_GPI3_BM                              0x00000008UL
#define RF24_RFE_GPI_GPI3_M                      0x00000008UL
// enums for bitfield GPI_GPI3 (width: 1)UL
#define RFE_GPI_GPI3_ZERO                            0x0UL
#define RFE_GPI_GPI3_ONE                             0x1UL
// bitfield: GPI_GPI2
#define RFE_GPI_GPI2                                 2UL
#define RF24_RFE_GPI_GPI2_S                      2UL
#define RFE_GPI_GPI2_BM                              0x00000004UL
#define RF24_RFE_GPI_GPI2_M                      0x00000004UL
// enums for bitfield GPI_GPI2 (width: 1)UL
#define RFE_GPI_GPI2_ZERO                            0x0UL
#define RFE_GPI_GPI2_ONE                             0x1UL
// bitfield: GPI_GPI1
#define RFE_GPI_GPI1                                 1UL
#define RF24_RFE_GPI_GPI1_S                      1UL
#define RFE_GPI_GPI1_BM                              0x00000002UL
#define RF24_RFE_GPI_GPI1_M                      0x00000002UL
// enums for bitfield GPI_GPI1 (width: 1)UL
#define RFE_GPI_GPI1_ZERO                            0x0UL
#define RFE_GPI_GPI1_ONE                             0x1UL
// bitfield: GPI_GPI0
#define RFE_GPI_GPI0                                 0UL
#define RF24_RFE_GPI_GPI0_S                      0UL
#define RFE_GPI_GPI0_BM                              0x00000001UL
#define RF24_RFE_GPI_GPI0_M                      0x00000001UL
// enums for bitfield GPI_GPI0 (width: 1)UL
#define RFE_GPI_GPI0_ZERO                            0x0UL
#define RFE_GPI_GPI0_ONE                             0x1UL
// --------------------------------------------------------------
// MATHACCELIN
// 
#define RFE_MATHACCELIN_ADR (RFE_BASE + 0x01D0UL)
static volatile unsigned long* const SP_RFE_MATHACCELIN = (unsigned long*) RFE_MATHACCELIN_ADR;
#define S_RFE_MATHACCELIN (*SP_RFE_MATHACCELIN)
#define RF24_RFE_O_MATHACCELIN                   464
// bitfield: MATHACCELIN_VAL
#define RFE_MATHACCELIN_VAL                          0UL
#define RF24_RFE_MATHACCELIN_VAL_S               0UL
#define RFE_MATHACCELIN_VAL_BM                       0x0000FFFFUL
#define RF24_RFE_MATHACCELIN_VAL_M               0x0000FFFFUL
// enums for bitfield MATHACCELIN_VAL (width: 16)UL
#define RFE_MATHACCELIN_VAL_ALLZEROS                 0x0000UL
#define RFE_MATHACCELIN_VAL_ALLONES                  0xFFFFUL
// --------------------------------------------------------------
// LIN2LOGOUT
// 
#define RFE_LIN2LOGOUT_ADR (RFE_BASE + 0x01D4UL)
static volatile unsigned long* const SP_RFE_LIN2LOGOUT = (unsigned long*) RFE_LIN2LOGOUT_ADR;
#define S_RFE_LIN2LOGOUT (*SP_RFE_LIN2LOGOUT)
#define RF24_RFE_O_LIN2LOGOUT                    468
// bitfield: LIN2LOGOUT_LOGVAL
#define RFE_LIN2LOGOUT_LOGVAL                        0UL
#define RF24_RFE_LIN2LOGOUT_LOGVAL_S             0UL
#define RFE_LIN2LOGOUT_LOGVAL_BM                     0x0000007FUL
#define RF24_RFE_LIN2LOGOUT_LOGVAL_M             0x0000007FUL
// enums for bitfield LIN2LOGOUT_LOGVAL (width: 7)UL
#define RFE_LIN2LOGOUT_LOGVAL_ALLZEROS               0x00UL
#define RFE_LIN2LOGOUT_LOGVAL_ALLONES                0x7FUL
// --------------------------------------------------------------
// DIVBY3OUT
// 
#define RFE_DIVBY3OUT_ADR (RFE_BASE + 0x01D8UL)
static volatile unsigned long* const SP_RFE_DIVBY3OUT = (unsigned long*) RFE_DIVBY3OUT_ADR;
#define S_RFE_DIVBY3OUT (*SP_RFE_DIVBY3OUT)
#define RF24_RFE_O_DIVBY3OUT                     472
// bitfield: DIVBY3OUT_DIV3
#define RFE_DIVBY3OUT_DIV3                           0UL
#define RF24_RFE_DIVBY3OUT_DIV3_S                0UL
#define RFE_DIVBY3OUT_DIV3_BM                        0x0000000FUL
#define RF24_RFE_DIVBY3OUT_DIV3_M                0x0000000FUL
// enums for bitfield DIVBY3OUT_DIV3 (width: 4)UL
#define RFE_DIVBY3OUT_DIV3_ALLZEROS                  0x0UL
#define RFE_DIVBY3OUT_DIV3_ALLONES                   0xFUL
// --------------------------------------------------------------
// TIMCTL
// 
#define RFE_TIMCTL_ADR (RFE_BASE + 0x01DCUL)
static volatile unsigned long* const SP_RFE_TIMCTL = (unsigned long*) RFE_TIMCTL_ADR;
#define S_RFE_TIMCTL (*SP_RFE_TIMCTL)
#define RF24_RFE_O_TIMCTL                        476
// bitfield: TIMCTL_CPTSRC
#define RFE_TIMCTL_CPTSRC                            8UL
#define RF24_RFE_TIMCTL_CPTSRC_S                 8UL
#define RFE_TIMCTL_CPTSRC_BM                         0x00003F00UL
#define RF24_RFE_TIMCTL_CPTSRC_M                 0x00003F00UL
// enums for bitfield TIMCTL_CPTSRC (width: 6)UL
#define RFE_TIMCTL_CPTSRC_ALLZEROS                   0x00UL
#define RFE_TIMCTL_CPTSRC_ALLONES                    0x3FUL
// bitfield: TIMCTL_CPTCTL
#define RFE_TIMCTL_CPTCTL                            7UL
#define RF24_RFE_TIMCTL_CPTCTL_S                 7UL
#define RFE_TIMCTL_CPTCTL_BM                         0x00000080UL
#define RF24_RFE_TIMCTL_CPTCTL_M                 0x00000080UL
// enums for bitfield TIMCTL_CPTCTL (width: 1)UL
#define RFE_TIMCTL_CPTCTL_DIS                        0x0UL
#define RFE_TIMCTL_CPTCTL_EN                         0x1UL
// bitfield: TIMCTL_CNTRSRC
#define RFE_TIMCTL_CNTRSRC                           5UL
#define RF24_RFE_TIMCTL_CNTRSRC_S                5UL
#define RFE_TIMCTL_CNTRSRC_BM                        0x00000060UL
#define RF24_RFE_TIMCTL_CNTRSRC_M                0x00000060UL
// enums for bitfield TIMCTL_CNTRSRC (width: 2)UL
#define RFE_TIMCTL_CNTRSRC_CLK                       0x0UL
#define RFE_TIMCTL_CNTRSRC_MAGN0                     0x1UL
#define RFE_TIMCTL_CNTRSRC_MAGN1                     0x2UL
#define RFE_TIMCTL_CNTRSRC_FREF                      0x3UL
// bitfield: TIMCTL_CNTRCLR
#define RFE_TIMCTL_CNTRCLR                           4UL
#define RF24_RFE_TIMCTL_CNTRCLR_S                4UL
#define RFE_TIMCTL_CNTRCLR_BM                        0x00000010UL
#define RF24_RFE_TIMCTL_CNTRCLR_M                0x00000010UL
// enums for bitfield TIMCTL_CNTRCLR (width: 1)UL
#define RFE_TIMCTL_CNTRCLR_ZERO                      0x0UL
#define RFE_TIMCTL_CNTRCLR_ONE                       0x1UL
// bitfield: TIMCTL_CNTRCTL
#define RFE_TIMCTL_CNTRCTL                           3UL
#define RF24_RFE_TIMCTL_CNTRCTL_S                3UL
#define RFE_TIMCTL_CNTRCTL_BM                        0x00000008UL
#define RF24_RFE_TIMCTL_CNTRCTL_M                0x00000008UL
// enums for bitfield TIMCTL_CNTRCTL (width: 1)UL
#define RFE_TIMCTL_CNTRCTL_DIS                       0x0UL
#define RFE_TIMCTL_CNTRCTL_EN                        0x1UL
// bitfield: TIMCTL_TIMSRC
#define RFE_TIMCTL_TIMSRC                            1UL
#define RF24_RFE_TIMCTL_TIMSRC_S                 1UL
#define RFE_TIMCTL_TIMSRC_BM                         0x00000006UL
#define RF24_RFE_TIMCTL_TIMSRC_M                 0x00000006UL
// enums for bitfield TIMCTL_TIMSRC (width: 2)UL
#define RFE_TIMCTL_TIMSRC_CLK                        0x0UL
#define RFE_TIMCTL_TIMSRC_MAGN0                      0x1UL
#define RFE_TIMCTL_TIMSRC_MAGN1                      0x2UL
#define RFE_TIMCTL_TIMSRC_FREF                       0x3UL
// bitfield: TIMCTL_TIMCTL
#define RFE_TIMCTL_TIMCTL                            0UL
#define RF24_RFE_TIMCTL_TIMCTL_S                 0UL
#define RFE_TIMCTL_TIMCTL_BM                         0x00000001UL
#define RF24_RFE_TIMCTL_TIMCTL_M                 0x00000001UL
// enums for bitfield TIMCTL_TIMCTL (width: 1)UL
#define RFE_TIMCTL_TIMCTL_DIS                        0x0UL
#define RFE_TIMCTL_TIMCTL_EN                         0x1UL
// --------------------------------------------------------------
// TIMINC
// 
#define RFE_TIMINC_ADR (RFE_BASE + 0x01E0UL)
static volatile unsigned long* const SP_RFE_TIMINC = (unsigned long*) RFE_TIMINC_ADR;
#define S_RFE_TIMINC (*SP_RFE_TIMINC)
#define RF24_RFE_O_TIMINC                        480
// bitfield: TIMINC_VAL
#define RFE_TIMINC_VAL                               0UL
#define RF24_RFE_TIMINC_VAL_S                    0UL
#define RFE_TIMINC_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_TIMINC_VAL_M                    0x0000FFFFUL
// enums for bitfield TIMINC_VAL (width: 16)UL
#define RFE_TIMINC_VAL_ALLZEROS                      0x0000UL
#define RFE_TIMINC_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// TIMPER
// 
#define RFE_TIMPER_ADR (RFE_BASE + 0x01E4UL)
static volatile unsigned long* const SP_RFE_TIMPER = (unsigned long*) RFE_TIMPER_ADR;
#define S_RFE_TIMPER (*SP_RFE_TIMPER)
#define RF24_RFE_O_TIMPER                        484
// bitfield: TIMPER_VAL
#define RFE_TIMPER_VAL                               0UL
#define RF24_RFE_TIMPER_VAL_S                    0UL
#define RFE_TIMPER_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_TIMPER_VAL_M                    0x0000FFFFUL
// enums for bitfield TIMPER_VAL (width: 16)UL
#define RFE_TIMPER_VAL_ALLZEROS                      0x0000UL
#define RFE_TIMPER_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// TIMCNT
// 
#define RFE_TIMCNT_ADR (RFE_BASE + 0x01E8UL)
static volatile unsigned long* const SP_RFE_TIMCNT = (unsigned long*) RFE_TIMCNT_ADR;
#define S_RFE_TIMCNT (*SP_RFE_TIMCNT)
#define RF24_RFE_O_TIMCNT                        488
// bitfield: TIMCNT_VAL
#define RFE_TIMCNT_VAL                               0UL
#define RF24_RFE_TIMCNT_VAL_S                    0UL
#define RFE_TIMCNT_VAL_BM                            0x0000FFFFUL
#define RF24_RFE_TIMCNT_VAL_M                    0x0000FFFFUL
// enums for bitfield TIMCNT_VAL (width: 16)UL
#define RFE_TIMCNT_VAL_ALLZEROS                      0x0000UL
#define RFE_TIMCNT_VAL_ALLONES                       0xFFFFUL
// --------------------------------------------------------------
// TIMCAPT
// 
#define RFE_TIMCAPT_ADR (RFE_BASE + 0x01ECUL)
static volatile unsigned long* const SP_RFE_TIMCAPT = (unsigned long*) RFE_TIMCAPT_ADR;
#define S_RFE_TIMCAPT (*SP_RFE_TIMCAPT)
#define RF24_RFE_O_TIMCAPT                       492
// bitfield: TIMCAPT_VALUE
#define RFE_TIMCAPT_VALUE                            0UL
#define RF24_RFE_TIMCAPT_VALUE_S                 0UL
#define RFE_TIMCAPT_VALUE_BM                         0x0000FFFFUL
#define RF24_RFE_TIMCAPT_VALUE_M                 0x0000FFFFUL
// enums for bitfield TIMCAPT_VALUE (width: 16)UL
#define RFE_TIMCAPT_VALUE_ALLZEROS                   0x0000UL
#define RFE_TIMCAPT_VALUE_ALLONES                    0xFFFFUL
// --------------------------------------------------------------
// TRCCTRL
// 
#define RFE_TRCCTRL_ADR (RFE_BASE + 0x01F0UL)
static volatile unsigned long* const SP_RFE_TRCCTRL = (unsigned long*) RFE_TRCCTRL_ADR;
#define S_RFE_TRCCTRL (*SP_RFE_TRCCTRL)
#define RF24_RFE_O_TRCCTRL                       496
// bitfield: TRCCTRL_SEND
#define RFE_TRCCTRL_SEND                             0UL
#define RF24_RFE_TRCCTRL_SEND_S                  0UL
#define RFE_TRCCTRL_SEND_BM                          0x00000001UL
#define RF24_RFE_TRCCTRL_SEND_M                  0x00000001UL
// enums for bitfield TRCCTRL_SEND (width: 1)UL
#define RFE_TRCCTRL_SEND_ZERO                        0x0UL
#define RFE_TRCCTRL_SEND_ONE                         0x1UL
// --------------------------------------------------------------
// TRCSTAT
// 
#define RFE_TRCSTAT_ADR (RFE_BASE + 0x01F4UL)
static volatile unsigned long* const SP_RFE_TRCSTAT = (unsigned long*) RFE_TRCSTAT_ADR;
#define S_RFE_TRCSTAT (*SP_RFE_TRCSTAT)
#define RF24_RFE_O_TRCSTAT                       500
// bitfield: TRCSTAT_BUSY
#define RFE_TRCSTAT_BUSY                             0UL
#define RF24_RFE_TRCSTAT_BUSY_S                  0UL
#define RFE_TRCSTAT_BUSY_BM                          0x00000001UL
#define RF24_RFE_TRCSTAT_BUSY_M                  0x00000001UL
// enums for bitfield TRCSTAT_BUSY (width: 1)UL
#define RFE_TRCSTAT_BUSY_ZERO                        0x0UL
#define RFE_TRCSTAT_BUSY_ONE                         0x1UL
// --------------------------------------------------------------
// TRCCMD
// 
#define RFE_TRCCMD_ADR (RFE_BASE + 0x01F8UL)
static volatile unsigned long* const SP_RFE_TRCCMD = (unsigned long*) RFE_TRCCMD_ADR;
#define S_RFE_TRCCMD (*SP_RFE_TRCCMD)
#define RF24_RFE_O_TRCCMD                        504
// bitfield: TRCCMD_PARCNT
#define RFE_TRCCMD_PARCNT                            8UL
#define RF24_RFE_TRCCMD_PARCNT_S                 8UL
#define RFE_TRCCMD_PARCNT_BM                         0x00000300UL
#define RF24_RFE_TRCCMD_PARCNT_M                 0x00000300UL
// enums for bitfield TRCCMD_PARCNT (width: 2)UL
#define RFE_TRCCMD_PARCNT_ALLZEROS                   0x0UL
#define RFE_TRCCMD_PARCNT_ALLONES                    0x3UL
// bitfield: TRCCMD_PKTHDR
#define RFE_TRCCMD_PKTHDR                            0UL
#define RF24_RFE_TRCCMD_PKTHDR_S                 0UL
#define RFE_TRCCMD_PKTHDR_BM                         0x000000FFUL
#define RF24_RFE_TRCCMD_PKTHDR_M                 0x000000FFUL
// enums for bitfield TRCCMD_PKTHDR (width: 8)UL
#define RFE_TRCCMD_PKTHDR_ALLZEROS                   0x00UL
#define RFE_TRCCMD_PKTHDR_ALLONES                    0xFFUL
// --------------------------------------------------------------
// TRCPAR0
// 
#define RFE_TRCPAR0_ADR (RFE_BASE + 0x01FCUL)
static volatile unsigned long* const SP_RFE_TRCPAR0 = (unsigned long*) RFE_TRCPAR0_ADR;
#define S_RFE_TRCPAR0 (*SP_RFE_TRCPAR0)
#define RF24_RFE_O_TRCPAR0                       508
// bitfield: TRCPAR0_VAL
#define RFE_TRCPAR0_VAL                              0UL
#define RF24_RFE_TRCPAR0_VAL_S                   0UL
#define RFE_TRCPAR0_VAL_BM                           0x0000FFFFUL
#define RF24_RFE_TRCPAR0_VAL_M                   0x0000FFFFUL
// enums for bitfield TRCPAR0_VAL (width: 16)UL
#define RFE_TRCPAR0_VAL_ALLZEROS                     0x0000UL
#define RFE_TRCPAR0_VAL_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// TRCPAR1
// 
#define RFE_TRCPAR1_ADR (RFE_BASE + 0x0200UL)
static volatile unsigned long* const SP_RFE_TRCPAR1 = (unsigned long*) RFE_TRCPAR1_ADR;
#define S_RFE_TRCPAR1 (*SP_RFE_TRCPAR1)
#define RF24_RFE_O_TRCPAR1                       512
// bitfield: TRCPAR1_VAL
#define RFE_TRCPAR1_VAL                              0UL
#define RF24_RFE_TRCPAR1_VAL_S                   0UL
#define RFE_TRCPAR1_VAL_BM                           0x0000FFFFUL
#define RF24_RFE_TRCPAR1_VAL_M                   0x0000FFFFUL
// enums for bitfield TRCPAR1_VAL (width: 16)UL
#define RFE_TRCPAR1_VAL_ALLZEROS                     0x0000UL
#define RFE_TRCPAR1_VAL_ALLONES                      0xFFFFUL
// --------------------------------------------------------------
// GPOCTL
// 
#define RFE_GPOCTL_ADR (RFE_BASE + 0x0204UL)
static volatile unsigned long* const SP_RFE_GPOCTL = (unsigned long*) RFE_GPOCTL_ADR;
#define S_RFE_GPOCTL (*SP_RFE_GPOCTL)
#define RF24_RFE_O_GPOCTL                        516
// bitfield: GPOCTL_SEL7
#define RFE_GPOCTL_SEL7                              15UL
#define RF24_RFE_GPOCTL_SEL7_S                   15UL
#define RFE_GPOCTL_SEL7_BM                           0x00008000UL
#define RF24_RFE_GPOCTL_SEL7_M                   0x00008000UL
// enums for bitfield GPOCTL_SEL7 (width: 1)UL
#define RFE_GPOCTL_SEL7_SW                           0x0UL
#define RFE_GPOCTL_SEL7_HW                           0x1UL
// bitfield: GPOCTL_SEL6
#define RFE_GPOCTL_SEL6                              14UL
#define RF24_RFE_GPOCTL_SEL6_S                   14UL
#define RFE_GPOCTL_SEL6_BM                           0x00004000UL
#define RF24_RFE_GPOCTL_SEL6_M                   0x00004000UL
// enums for bitfield GPOCTL_SEL6 (width: 1)UL
#define RFE_GPOCTL_SEL6_SW                           0x0UL
#define RFE_GPOCTL_SEL6_HW                           0x1UL
// bitfield: GPOCTL_SEL5
#define RFE_GPOCTL_SEL5                              13UL
#define RF24_RFE_GPOCTL_SEL5_S                   13UL
#define RFE_GPOCTL_SEL5_BM                           0x00002000UL
#define RF24_RFE_GPOCTL_SEL5_M                   0x00002000UL
// enums for bitfield GPOCTL_SEL5 (width: 1)UL
#define RFE_GPOCTL_SEL5_SW                           0x0UL
#define RFE_GPOCTL_SEL5_HW                           0x1UL
// bitfield: GPOCTL_SEL4
#define RFE_GPOCTL_SEL4                              12UL
#define RF24_RFE_GPOCTL_SEL4_S                   12UL
#define RFE_GPOCTL_SEL4_BM                           0x00001000UL
#define RF24_RFE_GPOCTL_SEL4_M                   0x00001000UL
// enums for bitfield GPOCTL_SEL4 (width: 1)UL
#define RFE_GPOCTL_SEL4_SW                           0x0UL
#define RFE_GPOCTL_SEL4_HW                           0x1UL
// bitfield: GPOCTL_SEL3
#define RFE_GPOCTL_SEL3                              11UL
#define RF24_RFE_GPOCTL_SEL3_S                   11UL
#define RFE_GPOCTL_SEL3_BM                           0x00000800UL
#define RF24_RFE_GPOCTL_SEL3_M                   0x00000800UL
// enums for bitfield GPOCTL_SEL3 (width: 1)UL
#define RFE_GPOCTL_SEL3_SW                           0x0UL
#define RFE_GPOCTL_SEL3_HW                           0x1UL
// bitfield: GPOCTL_SEL2
#define RFE_GPOCTL_SEL2                              10UL
#define RF24_RFE_GPOCTL_SEL2_S                   10UL
#define RFE_GPOCTL_SEL2_BM                           0x00000400UL
#define RF24_RFE_GPOCTL_SEL2_M                   0x00000400UL
// enums for bitfield GPOCTL_SEL2 (width: 1)UL
#define RFE_GPOCTL_SEL2_SW                           0x0UL
#define RFE_GPOCTL_SEL2_HW                           0x1UL
// bitfield: GPOCTL_SEL1
#define RFE_GPOCTL_SEL1                              9UL
#define RF24_RFE_GPOCTL_SEL1_S                   9UL
#define RFE_GPOCTL_SEL1_BM                           0x00000200UL
#define RF24_RFE_GPOCTL_SEL1_M                   0x00000200UL
// enums for bitfield GPOCTL_SEL1 (width: 1)UL
#define RFE_GPOCTL_SEL1_SW                           0x0UL
#define RFE_GPOCTL_SEL1_HW                           0x1UL
// bitfield: GPOCTL_SEL0
#define RFE_GPOCTL_SEL0                              8UL
#define RF24_RFE_GPOCTL_SEL0_S                   8UL
#define RFE_GPOCTL_SEL0_BM                           0x00000100UL
#define RF24_RFE_GPOCTL_SEL0_M                   0x00000100UL
// enums for bitfield GPOCTL_SEL0 (width: 1)UL
#define RFE_GPOCTL_SEL0_SW                           0x0UL
#define RFE_GPOCTL_SEL0_HW                           0x1UL
// bitfield: GPOCTL_GPO7
#define RFE_GPOCTL_GPO7                              7UL
#define RF24_RFE_GPOCTL_GPO7_S                   7UL
#define RFE_GPOCTL_GPO7_BM                           0x00000080UL
#define RF24_RFE_GPOCTL_GPO7_M                   0x00000080UL
// enums for bitfield GPOCTL_GPO7 (width: 1)UL
#define RFE_GPOCTL_GPO7_ZERO                         0x0UL
#define RFE_GPOCTL_GPO7_ONE                          0x1UL
// bitfield: GPOCTL_GPO6
#define RFE_GPOCTL_GPO6                              6UL
#define RF24_RFE_GPOCTL_GPO6_S                   6UL
#define RFE_GPOCTL_GPO6_BM                           0x00000040UL
#define RF24_RFE_GPOCTL_GPO6_M                   0x00000040UL
// enums for bitfield GPOCTL_GPO6 (width: 1)UL
#define RFE_GPOCTL_GPO6_ZERO                         0x0UL
#define RFE_GPOCTL_GPO6_ONE                          0x1UL
// bitfield: GPOCTL_GPO5
#define RFE_GPOCTL_GPO5                              5UL
#define RF24_RFE_GPOCTL_GPO5_S                   5UL
#define RFE_GPOCTL_GPO5_BM                           0x00000020UL
#define RF24_RFE_GPOCTL_GPO5_M                   0x00000020UL
// enums for bitfield GPOCTL_GPO5 (width: 1)UL
#define RFE_GPOCTL_GPO5_ZERO                         0x0UL
#define RFE_GPOCTL_GPO5_ONE                          0x1UL
// bitfield: GPOCTL_GPO4
#define RFE_GPOCTL_GPO4                              4UL
#define RF24_RFE_GPOCTL_GPO4_S                   4UL
#define RFE_GPOCTL_GPO4_BM                           0x00000010UL
#define RF24_RFE_GPOCTL_GPO4_M                   0x00000010UL
// enums for bitfield GPOCTL_GPO4 (width: 1)UL
#define RFE_GPOCTL_GPO4_ZERO                         0x0UL
#define RFE_GPOCTL_GPO4_ONE                          0x1UL
// bitfield: GPOCTL_GPO3
#define RFE_GPOCTL_GPO3                              3UL
#define RF24_RFE_GPOCTL_GPO3_S                   3UL
#define RFE_GPOCTL_GPO3_BM                           0x00000008UL
#define RF24_RFE_GPOCTL_GPO3_M                   0x00000008UL
// enums for bitfield GPOCTL_GPO3 (width: 1)UL
#define RFE_GPOCTL_GPO3_ZERO                         0x0UL
#define RFE_GPOCTL_GPO3_ONE                          0x1UL
// bitfield: GPOCTL_GPO2
#define RFE_GPOCTL_GPO2                              2UL
#define RF24_RFE_GPOCTL_GPO2_S                   2UL
#define RFE_GPOCTL_GPO2_BM                           0x00000004UL
#define RF24_RFE_GPOCTL_GPO2_M                   0x00000004UL
// enums for bitfield GPOCTL_GPO2 (width: 1)UL
#define RFE_GPOCTL_GPO2_ZERO                         0x0UL
#define RFE_GPOCTL_GPO2_ONE                          0x1UL
// bitfield: GPOCTL_GPO1
#define RFE_GPOCTL_GPO1                              1UL
#define RF24_RFE_GPOCTL_GPO1_S                   1UL
#define RFE_GPOCTL_GPO1_BM                           0x00000002UL
#define RF24_RFE_GPOCTL_GPO1_M                   0x00000002UL
// enums for bitfield GPOCTL_GPO1 (width: 1)UL
#define RFE_GPOCTL_GPO1_ZERO                         0x0UL
#define RFE_GPOCTL_GPO1_ONE                          0x1UL
// bitfield: GPOCTL_GPO0
#define RFE_GPOCTL_GPO0                              0UL
#define RF24_RFE_GPOCTL_GPO0_S                   0UL
#define RFE_GPOCTL_GPO0_BM                           0x00000001UL
#define RF24_RFE_GPOCTL_GPO0_M                   0x00000001UL
// enums for bitfield GPOCTL_GPO0 (width: 1)UL
#define RFE_GPOCTL_GPO0_ZERO                         0x0UL
#define RFE_GPOCTL_GPO0_ONE                          0x1UL
// --------------------------------------------------------------
// ANAISOCTL
// 
#define RFE_ANAISOCTL_ADR (RFE_BASE + 0x0208UL)
static volatile unsigned long* const SP_RFE_ANAISOCTL = (unsigned long*) RFE_ANAISOCTL_ADR;
#define S_RFE_ANAISOCTL (*SP_RFE_ANAISOCTL)
#define RF24_RFE_O_ANAISOCTL                     520
// bitfield: ANAISOCTL_ADCDIGRSTN
#define RFE_ANAISOCTL_ADCDIGRSTN                     4UL
#define RF24_RFE_ANAISOCTL_ADCDIGRSTN_S          4UL
#define RFE_ANAISOCTL_ADCDIGRSTN_BM                  0x00000010UL
#define RF24_RFE_ANAISOCTL_ADCDIGRSTN_M          0x00000010UL
// enums for bitfield ANAISOCTL_ADCDIGRSTN (width: 1)UL
#define RFE_ANAISOCTL_ADCDIGRSTN_ACTIVE              0x1UL
#define RFE_ANAISOCTL_ADCDIGRSTN_RESET               0x0UL
// bitfield: ANAISOCTL_IFADC2SVTISO
#define RFE_ANAISOCTL_IFADC2SVTISO                   3UL
#define RF24_RFE_ANAISOCTL_IFADC2SVTISO_S        3UL
#define RFE_ANAISOCTL_IFADC2SVTISO_BM                0x00000008UL
#define RF24_RFE_ANAISOCTL_IFADC2SVTISO_M        0x00000008UL
// enums for bitfield ANAISOCTL_IFADC2SVTISO (width: 1)UL
#define RFE_ANAISOCTL_IFADC2SVTISO_CONNECT           0x0UL
#define RFE_ANAISOCTL_IFADC2SVTISO_ISOLATE           0x1UL
// bitfield: ANAISOCTL_DIV2IFADCISO
#define RFE_ANAISOCTL_DIV2IFADCISO                   2UL
#define RF24_RFE_ANAISOCTL_DIV2IFADCISO_S        2UL
#define RFE_ANAISOCTL_DIV2IFADCISO_BM                0x00000004UL
#define RF24_RFE_ANAISOCTL_DIV2IFADCISO_M        0x00000004UL
// enums for bitfield ANAISOCTL_DIV2IFADCISO (width: 1)UL
#define RFE_ANAISOCTL_DIV2IFADCISO_CONNECT           0x0UL
#define RFE_ANAISOCTL_DIV2IFADCISO_ISOLATE           0x1UL
// bitfield: ANAISOCTL_MTDC2SVTISO
#define RFE_ANAISOCTL_MTDC2SVTISO                    1UL
#define RF24_RFE_ANAISOCTL_MTDC2SVTISO_S         1UL
#define RFE_ANAISOCTL_MTDC2SVTISO_BM                 0x00000002UL
#define RF24_RFE_ANAISOCTL_MTDC2SVTISO_M         0x00000002UL
// enums for bitfield ANAISOCTL_MTDC2SVTISO (width: 1)UL
#define RFE_ANAISOCTL_MTDC2SVTISO_CONNECT            0x0UL
#define RFE_ANAISOCTL_MTDC2SVTISO_ISOLATE            0x1UL
// bitfield: ANAISOCTL_DIV2MTDCISO
#define RFE_ANAISOCTL_DIV2MTDCISO                    0UL
#define RF24_RFE_ANAISOCTL_DIV2MTDCISO_S         0UL
#define RFE_ANAISOCTL_DIV2MTDCISO_BM                 0x00000001UL
#define RF24_RFE_ANAISOCTL_DIV2MTDCISO_M         0x00000001UL
// enums for bitfield ANAISOCTL_DIV2MTDCISO (width: 1)UL
#define RFE_ANAISOCTL_DIV2MTDCISO_CONNECT            0x0UL
#define RFE_ANAISOCTL_DIV2MTDCISO_ISOLATE            0x1UL
// --------------------------------------------------------------
// DIVCTL
// 
#define RFE_DIVCTL_ADR (RFE_BASE + 0x020CUL)
static volatile unsigned long* const SP_RFE_DIVCTL = (unsigned long*) RFE_DIVCTL_ADR;
#define S_RFE_DIVCTL (*SP_RFE_DIVCTL)
#define RF24_RFE_O_DIVCTL                        524
// bitfield: DIVCTL_DIV2PH180
#define RFE_DIVCTL_DIV2PH180                         15UL
#define RF24_RFE_DIVCTL_DIV2PH180_S              15UL
#define RFE_DIVCTL_DIV2PH180_BM                      0x00008000UL
#define RF24_RFE_DIVCTL_DIV2PH180_M              0x00008000UL
// enums for bitfield DIVCTL_DIV2PH180 (width: 1)UL
#define RFE_DIVCTL_DIV2PH180_DIS                     0x0UL
#define RFE_DIVCTL_DIV2PH180_EN                      0x1UL
// bitfield: DIVCTL_DIV2PH0
#define RFE_DIVCTL_DIV2PH0                           14UL
#define RF24_RFE_DIVCTL_DIV2PH0_S                14UL
#define RFE_DIVCTL_DIV2PH0_BM                        0x00004000UL
#define RF24_RFE_DIVCTL_DIV2PH0_M                0x00004000UL
// enums for bitfield DIVCTL_DIV2PH0 (width: 1)UL
#define RFE_DIVCTL_DIV2PH0_DIS                       0x0UL
#define RFE_DIVCTL_DIV2PH0_EN                        0x1UL
// bitfield: DIVCTL_DIV2PH270
#define RFE_DIVCTL_DIV2PH270                         13UL
#define RF24_RFE_DIVCTL_DIV2PH270_S              13UL
#define RFE_DIVCTL_DIV2PH270_BM                      0x00002000UL
#define RF24_RFE_DIVCTL_DIV2PH270_M              0x00002000UL
// enums for bitfield DIVCTL_DIV2PH270 (width: 1)UL
#define RFE_DIVCTL_DIV2PH270_DIS                     0x0UL
#define RFE_DIVCTL_DIV2PH270_EN                      0x1UL
// bitfield: DIVCTL_DIV2PH90
#define RFE_DIVCTL_DIV2PH90                          12UL
#define RF24_RFE_DIVCTL_DIV2PH90_S               12UL
#define RFE_DIVCTL_DIV2PH90_BM                       0x00001000UL
#define RF24_RFE_DIVCTL_DIV2PH90_M               0x00001000UL
// enums for bitfield DIVCTL_DIV2PH90 (width: 1)UL
#define RFE_DIVCTL_DIV2PH90_DIS                      0x0UL
#define RFE_DIVCTL_DIV2PH90_EN                       0x1UL
// bitfield: DIVCTL_SPARE11
#define RFE_DIVCTL_SPARE11                           11UL
#define RF24_RFE_DIVCTL_SPARE11_S                11UL
#define RFE_DIVCTL_SPARE11_BM                        0x00000800UL
#define RF24_RFE_DIVCTL_SPARE11_M                0x00000800UL
// enums for bitfield DIVCTL_SPARE11 (width: 1)UL
#define RFE_DIVCTL_SPARE11_ZERO                      0x0UL
#define RFE_DIVCTL_SPARE11_ONE                       0x1UL
// bitfield: DIVCTL_S1G20DBMMUX
#define RFE_DIVCTL_S1G20DBMMUX                       10UL
#define RF24_RFE_DIVCTL_S1G20DBMMUX_S            10UL
#define RFE_DIVCTL_S1G20DBMMUX_BM                    0x00000400UL
#define RF24_RFE_DIVCTL_S1G20DBMMUX_M            0x00000400UL
// enums for bitfield DIVCTL_S1G20DBMMUX (width: 1)UL
#define RFE_DIVCTL_S1G20DBMMUX_ENABLEN               0x0UL
#define RFE_DIVCTL_S1G20DBMMUX_DISABLE               0x1UL
// bitfield: DIVCTL_ADCDIV
#define RFE_DIVCTL_ADCDIV                            9UL
#define RF24_RFE_DIVCTL_ADCDIV_S                 9UL
#define RFE_DIVCTL_ADCDIV_BM                         0x00000200UL
#define RF24_RFE_DIVCTL_ADCDIV_M                 0x00000200UL
// enums for bitfield DIVCTL_ADCDIV (width: 1)UL
#define RFE_DIVCTL_ADCDIV_DIS                        0x0UL
#define RFE_DIVCTL_ADCDIV_EN                         0x1UL
// bitfield: DIVCTL_ENSYNTH
#define RFE_DIVCTL_ENSYNTH                           8UL
#define RF24_RFE_DIVCTL_ENSYNTH_S                8UL
#define RFE_DIVCTL_ENSYNTH_BM                        0x00000100UL
#define RF24_RFE_DIVCTL_ENSYNTH_M                0x00000100UL
// enums for bitfield DIVCTL_ENSYNTH (width: 1)UL
#define RFE_DIVCTL_ENSYNTH_DIS                       0x0UL
#define RFE_DIVCTL_ENSYNTH_EN                        0x1UL
// bitfield: DIVCTL_TXPH18020DBMDIV
#define RFE_DIVCTL_TXPH18020DBMDIV                   7UL
#define RF24_RFE_DIVCTL_TXPH18020DBMDIV_S        7UL
#define RFE_DIVCTL_TXPH18020DBMDIV_BM                0x00000080UL
#define RF24_RFE_DIVCTL_TXPH18020DBMDIV_M        0x00000080UL
// enums for bitfield DIVCTL_TXPH18020DBMDIV (width: 1)UL
#define RFE_DIVCTL_TXPH18020DBMDIV_DIS               0x0UL
#define RFE_DIVCTL_TXPH18020DBMDIV_EN                0x1UL
// bitfield: DIVCTL_TXPH020DBMDIV
#define RFE_DIVCTL_TXPH020DBMDIV                     6UL
#define RF24_RFE_DIVCTL_TXPH020DBMDIV_S          6UL
#define RFE_DIVCTL_TXPH020DBMDIV_BM                  0x00000040UL
#define RF24_RFE_DIVCTL_TXPH020DBMDIV_M          0x00000040UL
// enums for bitfield DIVCTL_TXPH020DBMDIV (width: 1)UL
#define RFE_DIVCTL_TXPH020DBMDIV_DIS                 0x0UL
#define RFE_DIVCTL_TXPH020DBMDIV_EN                  0x1UL
// bitfield: DIVCTL_TXPH180DIV
#define RFE_DIVCTL_TXPH180DIV                        5UL
#define RF24_RFE_DIVCTL_TXPH180DIV_S             5UL
#define RFE_DIVCTL_TXPH180DIV_BM                     0x00000020UL
#define RF24_RFE_DIVCTL_TXPH180DIV_M             0x00000020UL
// enums for bitfield DIVCTL_TXPH180DIV (width: 1)UL
#define RFE_DIVCTL_TXPH180DIV_DIS                    0x0UL
#define RFE_DIVCTL_TXPH180DIV_EN                     0x1UL
// bitfield: DIVCTL_TXPH0DIV
#define RFE_DIVCTL_TXPH0DIV                          4UL
#define RF24_RFE_DIVCTL_TXPH0DIV_S               4UL
#define RFE_DIVCTL_TXPH0DIV_BM                       0x00000010UL
#define RF24_RFE_DIVCTL_TXPH0DIV_M               0x00000010UL
// enums for bitfield DIVCTL_TXPH0DIV (width: 1)UL
#define RFE_DIVCTL_TXPH0DIV_DIS                      0x0UL
#define RFE_DIVCTL_TXPH0DIV_EN                       0x1UL
// bitfield: DIVCTL_RXPH90DIV
#define RFE_DIVCTL_RXPH90DIV                         3UL
#define RF24_RFE_DIVCTL_RXPH90DIV_S              3UL
#define RFE_DIVCTL_RXPH90DIV_BM                      0x00000008UL
#define RF24_RFE_DIVCTL_RXPH90DIV_M              0x00000008UL
// enums for bitfield DIVCTL_RXPH90DIV (width: 1)UL
#define RFE_DIVCTL_RXPH90DIV_DIS                     0x0UL
#define RFE_DIVCTL_RXPH90DIV_EN                      0x1UL
// bitfield: DIVCTL_RXPH0DIV
#define RFE_DIVCTL_RXPH0DIV                          2UL
#define RF24_RFE_DIVCTL_RXPH0DIV_S               2UL
#define RFE_DIVCTL_RXPH0DIV_BM                       0x00000004UL
#define RF24_RFE_DIVCTL_RXPH0DIV_M               0x00000004UL
// enums for bitfield DIVCTL_RXPH0DIV (width: 1)UL
#define RFE_DIVCTL_RXPH0DIV_DIS                      0x0UL
#define RFE_DIVCTL_RXPH0DIV_EN                       0x1UL
// bitfield: DIVCTL_SPARE1
#define RFE_DIVCTL_SPARE1                            1UL
#define RF24_RFE_DIVCTL_SPARE1_S                 1UL
#define RFE_DIVCTL_SPARE1_BM                         0x00000002UL
#define RF24_RFE_DIVCTL_SPARE1_M                 0x00000002UL
// enums for bitfield DIVCTL_SPARE1 (width: 1)UL
#define RFE_DIVCTL_SPARE1_ZERO                       0x0UL
#define RFE_DIVCTL_SPARE1_ONE                        0x1UL
// bitfield: DIVCTL_EN
#define RFE_DIVCTL_EN                                0UL
#define RF24_RFE_DIVCTL_EN_S                     0UL
#define RFE_DIVCTL_EN_BM                             0x00000001UL
#define RF24_RFE_DIVCTL_EN_M                     0x00000001UL
// enums for bitfield DIVCTL_EN (width: 1)UL
#define RFE_DIVCTL_EN_OFF                            0x0UL
#define RFE_DIVCTL_EN_ON                             0x1UL
// --------------------------------------------------------------
// RXCTRL
// 
#define RFE_RXCTRL_ADR (RFE_BASE + 0x0210UL)
static volatile unsigned long* const SP_RFE_RXCTRL = (unsigned long*) RFE_RXCTRL_ADR;
#define S_RFE_RXCTRL (*SP_RFE_RXCTRL)
#define RF24_RFE_O_RXCTRL                        528
// bitfield: RXCTRL_SPARE
#define RFE_RXCTRL_SPARE                             12UL
#define RF24_RFE_RXCTRL_SPARE_S                  12UL
#define RFE_RXCTRL_SPARE_BM                          0x00001000UL
#define RF24_RFE_RXCTRL_SPARE_M                  0x00001000UL
// enums for bitfield RXCTRL_SPARE (width: 1)UL
#define RFE_RXCTRL_SPARE_ZERO                        0x0UL
#define RFE_RXCTRL_SPARE_ONE                         0x1UL
// bitfield: RXCTRL_ATTN
#define RFE_RXCTRL_ATTN                              9UL
#define RF24_RFE_RXCTRL_ATTN_S                   9UL
#define RFE_RXCTRL_ATTN_BM                           0x00000E00UL
#define RF24_RFE_RXCTRL_ATTN_M                   0x00000E00UL
// enums for bitfield RXCTRL_ATTN (width: 3)UL
#define RFE_RXCTRL_ATTN_NOATT                        0x0UL
#define RFE_RXCTRL_ATTN__18DB                        0x6UL
#define RFE_RXCTRL_ATTN__3DB                         0x1UL
#define RFE_RXCTRL_ATTN__6DB                         0x2UL
#define RFE_RXCTRL_ATTN__9DB                         0x3UL
#define RFE_RXCTRL_ATTN__12DB                        0x4UL
#define RFE_RXCTRL_ATTN__15DB                        0x5UL
#define RFE_RXCTRL_ATTN__21DB                        0x7UL
// bitfield: RXCTRL_IFAMPGC
#define RFE_RXCTRL_IFAMPGC                           4UL
#define RF24_RFE_RXCTRL_IFAMPGC_S                4UL
#define RFE_RXCTRL_IFAMPGC_BM                        0x000001F0UL
#define RF24_RFE_RXCTRL_IFAMPGC_M                0x000001F0UL
// enums for bitfield RXCTRL_IFAMPGC (width: 5)UL
#define RFE_RXCTRL_IFAMPGC_MIN15DB                   0x00UL
#define RFE_RXCTRL_IFAMPGC_MIN12DB                   0x01UL
#define RFE_RXCTRL_IFAMPGC_MIN9DB                    0x03UL
#define RFE_RXCTRL_IFAMPGC_MIN6DB                    0x07UL
#define RFE_RXCTRL_IFAMPGC_MIN3DB                    0x0FUL
#define RFE_RXCTRL_IFAMPGC_MAX                       0x1FUL
// bitfield: RXCTRL_LNAGAIN
#define RFE_RXCTRL_LNAGAIN                           0UL
#define RF24_RFE_RXCTRL_LNAGAIN_S                0UL
#define RFE_RXCTRL_LNAGAIN_BM                        0x0000000FUL
#define RF24_RFE_RXCTRL_LNAGAIN_M                0x0000000FUL
// enums for bitfield RXCTRL_LNAGAIN (width: 4)UL
#define RFE_RXCTRL_LNAGAIN_MAX                       0xFUL
#define RFE_RXCTRL_LNAGAIN_MIN6DB                    0x3UL
#define RFE_RXCTRL_LNAGAIN_MIN3DB                    0x7UL
#define RFE_RXCTRL_LNAGAIN_MIN12DB                   0x0UL
#define RFE_RXCTRL_LNAGAIN_MIN9DB                    0x1UL
// --------------------------------------------------------------
// MAGNACC0
// 
#define RFE_MAGNACC0_ADR (RFE_BASE + 0x0214UL)
static volatile unsigned long* const SP_RFE_MAGNACC0 = (unsigned long*) RFE_MAGNACC0_ADR;
#define S_RFE_MAGNACC0 (*SP_RFE_MAGNACC0)
#define RF24_RFE_O_MAGNACC0                      532
// bitfield: MAGNACC0_VAL
#define RFE_MAGNACC0_VAL                             0UL
#define RF24_RFE_MAGNACC0_VAL_S                  0UL
#define RFE_MAGNACC0_VAL_BM                          0x0000FFFFUL
#define RF24_RFE_MAGNACC0_VAL_M                  0x0000FFFFUL
// enums for bitfield MAGNACC0_VAL (width: 16)UL
#define RFE_MAGNACC0_VAL_ALLZEROS                    0x0000UL
#define RFE_MAGNACC0_VAL_ALLONES                     0xFFFFUL
// --------------------------------------------------------------
// MAGNACC1
// 
#define RFE_MAGNACC1_ADR (RFE_BASE + 0x0218UL)
static volatile unsigned long* const SP_RFE_MAGNACC1 = (unsigned long*) RFE_MAGNACC1_ADR;
#define S_RFE_MAGNACC1 (*SP_RFE_MAGNACC1)
#define RF24_RFE_O_MAGNACC1                      536
// bitfield: MAGNACC1_VAL
#define RFE_MAGNACC1_VAL                             0UL
#define RF24_RFE_MAGNACC1_VAL_S                  0UL
#define RFE_MAGNACC1_VAL_BM                          0x0000FFFFUL
#define RF24_RFE_MAGNACC1_VAL_M                  0x0000FFFFUL
// enums for bitfield MAGNACC1_VAL (width: 16)UL
#define RFE_MAGNACC1_VAL_ALLZEROS                    0x0000UL
#define RFE_MAGNACC1_VAL_ALLONES                     0xFFFFUL
// --------------------------------------------------------------
// RSSI
// 
#define RFE_RSSI_ADR (RFE_BASE + 0x021CUL)
static volatile unsigned long* const SP_RFE_RSSI = (unsigned long*) RFE_RSSI_ADR;
#define S_RFE_RSSI (*SP_RFE_RSSI)
#define RF24_RFE_O_RSSI                          540
// bitfield: RSSI_VAL
#define RFE_RSSI_VAL                                 0UL
#define RF24_RFE_RSSI_VAL_S                      0UL
#define RFE_RSSI_VAL_BM                              0x000000FFUL
#define RF24_RFE_RSSI_VAL_M                      0x000000FFUL
// enums for bitfield RSSI_VAL (width: 8)UL
#define RFE_RSSI_VAL_ALLZEROS                        0x00UL
#define RFE_RSSI_VAL_ALLONES                         0xFFUL
// --------------------------------------------------------------
// RSSIMAX
// 
#define RFE_RSSIMAX_ADR (RFE_BASE + 0x0220UL)
static volatile unsigned long* const SP_RFE_RSSIMAX = (unsigned long*) RFE_RSSIMAX_ADR;
#define S_RFE_RSSIMAX (*SP_RFE_RSSIMAX)
#define RF24_RFE_O_RSSIMAX                       544
// bitfield: RSSIMAX_VAL
#define RFE_RSSIMAX_VAL                              0UL
#define RF24_RFE_RSSIMAX_VAL_S                   0UL
#define RFE_RSSIMAX_VAL_BM                           0x000000FFUL
#define RF24_RFE_RSSIMAX_VAL_M                   0x000000FFUL
// enums for bitfield RSSIMAX_VAL (width: 8)UL
#define RFE_RSSIMAX_VAL_ALLZEROS                     0x00UL
#define RFE_RSSIMAX_VAL_ALLONES                      0xFFUL
// --------------------------------------------------------------
// RFGAIN
// 
#define RFE_RFGAIN_ADR (RFE_BASE + 0x0224UL)
static volatile unsigned long* const SP_RFE_RFGAIN = (unsigned long*) RFE_RFGAIN_ADR;
#define S_RFE_RFGAIN (*SP_RFE_RFGAIN)
#define RF24_RFE_O_RFGAIN                        548
// bitfield: RFGAIN_DBGAIN
#define RFE_RFGAIN_DBGAIN                            0UL
#define RF24_RFE_RFGAIN_DBGAIN_S                 0UL
#define RFE_RFGAIN_DBGAIN_BM                         0x000000FFUL
#define RF24_RFE_RFGAIN_DBGAIN_M                 0x000000FFUL
// enums for bitfield RFGAIN_DBGAIN (width: 8)UL
#define RFE_RFGAIN_DBGAIN_ALLZEROS                   0x00UL
#define RFE_RFGAIN_DBGAIN_ALLONES                    0xFFUL
// --------------------------------------------------------------
// IFADCSTAT
// 
#define RFE_IFADCSTAT_ADR (RFE_BASE + 0x0228UL)
static volatile unsigned long* const SP_RFE_IFADCSTAT = (unsigned long*) RFE_IFADCSTAT_ADR;
#define S_RFE_IFADCSTAT (*SP_RFE_IFADCSTAT)
#define RF24_RFE_O_IFADCSTAT                     552
// bitfield: IFADCSTAT_RESERVED7
#define RFE_IFADCSTAT_RESERVED7                      7UL
#define RF24_RFE_IFADCSTAT_RESERVED7_S           7UL
#define RFE_IFADCSTAT_RESERVED7_BM                   0x00000080UL
#define RF24_RFE_IFADCSTAT_RESERVED7_M           0x00000080UL
// enums for bitfield IFADCSTAT_RESERVED7 (width: 1)UL
#define RFE_IFADCSTAT_RESERVED7_ZERO                 0x0UL
#define RFE_IFADCSTAT_RESERVED7_ONE                  0x1UL
// bitfield: IFADCSTAT_QUANTCALVAL
#define RFE_IFADCSTAT_QUANTCALVAL                    2UL
#define RF24_RFE_IFADCSTAT_QUANTCALVAL_S         2UL
#define RFE_IFADCSTAT_QUANTCALVAL_BM                 0x0000007CUL
#define RF24_RFE_IFADCSTAT_QUANTCALVAL_M         0x0000007CUL
// enums for bitfield IFADCSTAT_QUANTCALVAL (width: 5)UL
#define RFE_IFADCSTAT_QUANTCALVAL_COMP0              0x00UL
#define RFE_IFADCSTAT_QUANTCALVAL_COMP1              0x01UL
// bitfield: IFADCSTAT_QUANTCALDONE
#define RFE_IFADCSTAT_QUANTCALDONE                   1UL
#define RF24_RFE_IFADCSTAT_QUANTCALDONE_S        1UL
#define RFE_IFADCSTAT_QUANTCALDONE_BM                0x00000002UL
#define RF24_RFE_IFADCSTAT_QUANTCALDONE_M        0x00000002UL
// enums for bitfield IFADCSTAT_QUANTCALDONE (width: 1)UL
#define RFE_IFADCSTAT_QUANTCALDONE_NOT_READY         0x0UL
#define RFE_IFADCSTAT_QUANTCALDONE_READY             0x1UL
// bitfield: IFADCSTAT_RESERVED0
#define RFE_IFADCSTAT_RESERVED0                      0UL
#define RF24_RFE_IFADCSTAT_RESERVED0_S           0UL
#define RFE_IFADCSTAT_RESERVED0_BM                   0x00000001UL
#define RF24_RFE_IFADCSTAT_RESERVED0_M           0x00000001UL
// enums for bitfield IFADCSTAT_RESERVED0 (width: 1)UL
#define RFE_IFADCSTAT_RESERVED0_ZERO                 0x0UL
#define RFE_IFADCSTAT_RESERVED0_ONE                  0x1UL
// --------------------------------------------------------------
// DIVSTA
// 
#define RFE_DIVSTA_ADR (RFE_BASE + 0x022CUL)
static volatile unsigned long* const SP_RFE_DIVSTA = (unsigned long*) RFE_DIVSTA_ADR;
#define S_RFE_DIVSTA (*SP_RFE_DIVSTA)
#define RF24_RFE_O_DIVSTA                        556
// bitfield: DIVSTA_STAT
#define RFE_DIVSTA_STAT                              0UL
#define RF24_RFE_DIVSTA_STAT_S                   0UL
#define RFE_DIVSTA_STAT_BM                           0x00000001UL
#define RF24_RFE_DIVSTA_STAT_M                   0x00000001UL
// enums for bitfield DIVSTA_STAT (width: 1)UL
#define RFE_DIVSTA_STAT_IDLE                         0x0UL
#define RFE_DIVSTA_STAT_BUSY                         0x1UL
// --------------------------------------------------------------
// DIVIDENDL
// 
#define RFE_DIVIDENDL_ADR (RFE_BASE + 0x0230UL)
static volatile unsigned long* const SP_RFE_DIVIDENDL = (unsigned long*) RFE_DIVIDENDL_ADR;
#define S_RFE_DIVIDENDL (*SP_RFE_DIVIDENDL)
#define RF24_RFE_O_DIVIDENDL                     560
// bitfield: DIVIDENDL_VALLSB
#define RFE_DIVIDENDL_VALLSB                         0UL
#define RF24_RFE_DIVIDENDL_VALLSB_S              0UL
#define RFE_DIVIDENDL_VALLSB_BM                      0x0000FFFFUL
#define RF24_RFE_DIVIDENDL_VALLSB_M              0x0000FFFFUL
// enums for bitfield DIVIDENDL_VALLSB (width: 16)UL
#define RFE_DIVIDENDL_VALLSB_ALLZEROS                0x0000UL
#define RFE_DIVIDENDL_VALLSB_ALLONES                 0xFFFFUL
// --------------------------------------------------------------
// DIVIDENDH
// 
#define RFE_DIVIDENDH_ADR (RFE_BASE + 0x0234UL)
static volatile unsigned long* const SP_RFE_DIVIDENDH = (unsigned long*) RFE_DIVIDENDH_ADR;
#define S_RFE_DIVIDENDH (*SP_RFE_DIVIDENDH)
#define RF24_RFE_O_DIVIDENDH                     564
// bitfield: DIVIDENDH_VALMSB
#define RFE_DIVIDENDH_VALMSB                         0UL
#define RF24_RFE_DIVIDENDH_VALMSB_S              0UL
#define RFE_DIVIDENDH_VALMSB_BM                      0x0000FFFFUL
#define RF24_RFE_DIVIDENDH_VALMSB_M              0x0000FFFFUL
// enums for bitfield DIVIDENDH_VALMSB (width: 16)UL
#define RFE_DIVIDENDH_VALMSB_ALLZEROS                0x0000UL
#define RFE_DIVIDENDH_VALMSB_ALLONES                 0xFFFFUL
// --------------------------------------------------------------
// DIVISORL
// 
#define RFE_DIVISORL_ADR (RFE_BASE + 0x0238UL)
static volatile unsigned long* const SP_RFE_DIVISORL = (unsigned long*) RFE_DIVISORL_ADR;
#define S_RFE_DIVISORL (*SP_RFE_DIVISORL)
#define RF24_RFE_O_DIVISORL                      568
// bitfield: DIVISORL_VALLSB
#define RFE_DIVISORL_VALLSB                          0UL
#define RF24_RFE_DIVISORL_VALLSB_S               0UL
#define RFE_DIVISORL_VALLSB_BM                       0x0000FFFFUL
#define RF24_RFE_DIVISORL_VALLSB_M               0x0000FFFFUL
// enums for bitfield DIVISORL_VALLSB (width: 16)UL
#define RFE_DIVISORL_VALLSB_ALLZEROS                 0x0000UL
#define RFE_DIVISORL_VALLSB_ALLONES                  0xFFFFUL
// --------------------------------------------------------------
// DIVISORH
// 
#define RFE_DIVISORH_ADR (RFE_BASE + 0x023CUL)
static volatile unsigned long* const SP_RFE_DIVISORH = (unsigned long*) RFE_DIVISORH_ADR;
#define S_RFE_DIVISORH (*SP_RFE_DIVISORH)
#define RF24_RFE_O_DIVISORH                      572
// bitfield: DIVISORH_VALMSB
#define RFE_DIVISORH_VALMSB                          0UL
#define RF24_RFE_DIVISORH_VALMSB_S               0UL
#define RFE_DIVISORH_VALMSB_BM                       0x0000FFFFUL
#define RF24_RFE_DIVISORH_VALMSB_M               0x0000FFFFUL
// enums for bitfield DIVISORH_VALMSB (width: 16)UL
#define RFE_DIVISORH_VALMSB_ALLZEROS                 0x0000UL
#define RFE_DIVISORH_VALMSB_ALLONES                  0xFFFFUL
// --------------------------------------------------------------
// QUOTIENTL
// 
#define RFE_QUOTIENTL_ADR (RFE_BASE + 0x0240UL)
static volatile unsigned long* const SP_RFE_QUOTIENTL = (unsigned long*) RFE_QUOTIENTL_ADR;
#define S_RFE_QUOTIENTL (*SP_RFE_QUOTIENTL)
#define RF24_RFE_O_QUOTIENTL                     576
// bitfield: QUOTIENTL_VALLSB
#define RFE_QUOTIENTL_VALLSB                         0UL
#define RF24_RFE_QUOTIENTL_VALLSB_S              0UL
#define RFE_QUOTIENTL_VALLSB_BM                      0x0000FFFFUL
#define RF24_RFE_QUOTIENTL_VALLSB_M              0x0000FFFFUL
// enums for bitfield QUOTIENTL_VALLSB (width: 16)UL
#define RFE_QUOTIENTL_VALLSB_ALLZEROS                0x0000UL
#define RFE_QUOTIENTL_VALLSB_ALLONES                 0xFFFFUL
// --------------------------------------------------------------
// QUOTIENTH
// 
#define RFE_QUOTIENTH_ADR (RFE_BASE + 0x0244UL)
static volatile unsigned long* const SP_RFE_QUOTIENTH = (unsigned long*) RFE_QUOTIENTH_ADR;
#define S_RFE_QUOTIENTH (*SP_RFE_QUOTIENTH)
#define RF24_RFE_O_QUOTIENTH                     580
// bitfield: QUOTIENTH_VALMSB
#define RFE_QUOTIENTH_VALMSB                         0UL
#define RF24_RFE_QUOTIENTH_VALMSB_S              0UL
#define RFE_QUOTIENTH_VALMSB_BM                      0x0000FFFFUL
#define RF24_RFE_QUOTIENTH_VALMSB_M              0x0000FFFFUL
// enums for bitfield QUOTIENTH_VALMSB (width: 16)UL
#define RFE_QUOTIENTH_VALMSB_ALLZEROS                0x0000UL
#define RFE_QUOTIENTH_VALMSB_ALLONES                 0xFFFFUL
// --------------------------------------------------------------
// PRODUCTL
// 
#define RFE_PRODUCTL_ADR (RFE_BASE + 0x0248UL)
static volatile unsigned long* const SP_RFE_PRODUCTL = (unsigned long*) RFE_PRODUCTL_ADR;
#define S_RFE_PRODUCTL (*SP_RFE_PRODUCTL)
#define RF24_RFE_O_PRODUCTL                      584
// bitfield: PRODUCTL_VALLSB
#define RFE_PRODUCTL_VALLSB                          0UL
#define RF24_RFE_PRODUCTL_VALLSB_S               0UL
#define RFE_PRODUCTL_VALLSB_BM                       0x0000FFFFUL
#define RF24_RFE_PRODUCTL_VALLSB_M               0x0000FFFFUL
// enums for bitfield PRODUCTL_VALLSB (width: 16)UL
#define RFE_PRODUCTL_VALLSB_ALLZEROS                 0x0000UL
#define RFE_PRODUCTL_VALLSB_ALLONES                  0xFFFFUL
// --------------------------------------------------------------
// PRODUCTH
// 
#define RFE_PRODUCTH_ADR (RFE_BASE + 0x024CUL)
static volatile unsigned long* const SP_RFE_PRODUCTH = (unsigned long*) RFE_PRODUCTH_ADR;
#define S_RFE_PRODUCTH (*SP_RFE_PRODUCTH)
#define RF24_RFE_O_PRODUCTH                      588
// bitfield: PRODUCTH_VALMSB
#define RFE_PRODUCTH_VALMSB                          0UL
#define RF24_RFE_PRODUCTH_VALMSB_S               0UL
#define RFE_PRODUCTH_VALMSB_BM                       0x0000FFFFUL
#define RF24_RFE_PRODUCTH_VALMSB_M               0x0000FFFFUL
// enums for bitfield PRODUCTH_VALMSB (width: 16)UL
#define RFE_PRODUCTH_VALMSB_ALLZEROS                 0x0000UL
#define RFE_PRODUCTH_VALMSB_ALLONES                  0xFFFFUL
// --------------------------------------------------------------
// MULTSTA
// 
#define RFE_MULTSTA_ADR (RFE_BASE + 0x0250UL)
static volatile unsigned long* const SP_RFE_MULTSTA = (unsigned long*) RFE_MULTSTA_ADR;
#define S_RFE_MULTSTA (*SP_RFE_MULTSTA)
#define RF24_RFE_O_MULTSTA                       592
// bitfield: MULTSTA_STAT
#define RFE_MULTSTA_STAT                             0UL
#define RF24_RFE_MULTSTA_STAT_S                  0UL
#define RFE_MULTSTA_STAT_BM                          0x00000001UL
#define RF24_RFE_MULTSTA_STAT_M                  0x00000001UL
// enums for bitfield MULTSTA_STAT (width: 1)UL
#define RFE_MULTSTA_STAT_IDLE                        0x0UL
#define RFE_MULTSTA_STAT_BUSY                        0x1UL
// --------------------------------------------------------------
// MULTCFG
// 
#define RFE_MULTCFG_ADR (RFE_BASE + 0x0258UL)
static volatile unsigned long* const SP_RFE_MULTCFG = (unsigned long*) RFE_MULTCFG_ADR;
#define S_RFE_MULTCFG (*SP_RFE_MULTCFG)
#define RF24_RFE_O_MULTCFG                       600
// bitfield: MULTCFG_MODE
#define RFE_MULTCFG_MODE                             0UL
#define RF24_RFE_MULTCFG_MODE_S                  0UL
#define RFE_MULTCFG_MODE_BM                          0x00000001UL
#define RF24_RFE_MULTCFG_MODE_M                  0x00000001UL
// enums for bitfield MULTCFG_MODE (width: 1)UL
#define RFE_MULTCFG_MODE_UNSIGNED                    0x0UL
#define RFE_MULTCFG_MODE_SIGNED                      0x1UL

#endif
