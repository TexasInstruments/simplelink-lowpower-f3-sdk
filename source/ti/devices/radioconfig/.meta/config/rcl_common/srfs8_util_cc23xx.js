// NB! This file is autogenerated, do not edit!

// Ensure that object is not created twice
const InstanceCache = {};

// Exported functions
exports = {
    get: get,
    create: create
};

/*!
 *  ======== get ========
 *  Get the Javascript utility module. Create if it doesn't exist.
 *
 *  @param phyGroup - ble, prop, ieee_154
 *  @param phyName - PHY instance ID
 *  @param imports - Support functions from PHY instance
 */
function get(phyGroup, phyName, imports) {
    if (!(phyName in InstanceCache)) {
        InstanceCache[phyName] = create(phyGroup, imports);
    }
    // Update PHY functions in case PHY handler object has been cloned
    InstanceCache[phyName].setContext(imports);

    return InstanceCache[phyName];
}

/*!
 *  ======== create ========
 *  Create the Javascript utility module.
 *
 *  @param phyGroup - ble, prop, ieee_154
 */
function create(phyGroup) {
    // Module imports and exports
    const PhyGroup = phyGroup;    let getPhyProperty;

    function setContext(imports) {
        getPhyProperty = imports.getPhyProperty;
    }

    function getPpFrequency() {
        if (PhyGroup === "ble") {
            return getPpFrequencyBle();
        }
        else if (PhyGroup === "prop") {
            return getPpFrequencyProp();
        }
        return getPpFrequency154();
    }

    function convBleChannelToFreq(channel, customFreq) {
        if (channel == 40) {
            return customFreq;
        } else if (channel == 37) {
            return 2402;
        } else if (channel == 38) {
            return 2426;
        } else if (channel == 39) {
            return 2480;
        } else if ((channel >= 0) && (channel <= 10)) {
            return 2402 + 2 + (2 * channel);
        } else if ((channel >= 11) && (channel <= 36)) {
            return 2402 + 2 + 2 + (2 * channel);
        } else {
            return NaN;
        }
    }

    function convIeee802154ChannelToFreq(channel) {
        if ((channel >= 11) && (channel <= 26)) {
            return 2405 + (5 * (channel - 11));
        } else {
            return NaN;
        }
    }

    function convPaTableSettingToBinary(txPower, value, isHighPa) {
        var tempCoeff = (value >> 12) & 0xFF;
        var settingData = [];
        value = value << 5;
        settingData[0] = Math.ceil(txPower * 2) & 0xFF;
        settingData[1] = tempCoeff;
        settingData[2] = (value >> 0) & 0xFF;
        settingData[3] = (value >> 8) & 0xFF;
        return settingData;
    }

    function convPaTableSettingToString(txPower, value, isHighPa) {
        var txPowerInt         = Math.ceil(txPower * 2) >> 1;
        var txPowerFract       = Math.ceil(txPower * 2) & 1;
        var tempCoeff          = (value >> 12) & 0xFF;
        var ib                 = (value >> 0) & 0x3F;
        var gain               = (value >> 6) & 0x07;
        var mode               = (value >> 9) & 0x01;
        var noIfampRfLdoBypass = (value >> 10) & 0x01;
        return "{ .power = { .fraction = " + txPowerFract + ", .dBm = " + txPowerInt + " }, .tempCoeff = " + tempCoeff + ", .value = { .reserved = 0, .ib = " + ib + ", .gain = " + gain + ", .mode = " + mode + ", .noIfampRfLdoBypass = " + noIfampRfLdoBypass + " } }"
    }

    function getFrequencyWithOffset() {
        return getPpFrequency() + getTestProperty("frequencyOffset");
    }

    function getPpFrequencyBle() {
        return convBleChannelToFreq(getPhyProperty("bleChannel"), getPhyProperty("frequency"));
    }

    function getPpFrequency154() {
        return convIeee802154ChannelToFreq(getPhyProperty("ieee802154Channel"));
    }

    function packetTxGenView() {
        var sections = [];

        // Add header
        var n = 0;
        sections[n++] = "Transmitted packet (non-connectable advertising event)";

        // Add preamble
        sections[n++] = "Preamble;010101...";

        // Add access address
        sections[n++] = "Access address;" + byteString(valueToBytesBe(getRclCommandField("CMD_GENERIC_TX.syncWord"), 4));

        // Add PDU header
        var packetData = [getDataArray()];
        sections[n++] = "PDU header;" + byteString(packetData.slice(0, 0 + 2));

        // Add extended header
        sections[n++] = "Extended header;" + byteString(packetData.slice(2, 2 + 1)) + ";" + byteString(packetData.slice(3, 3 + 1)) + ";" +
                        byteString(packetData.slice(4, 4 + 6)) + ";" + byteString(packetData.slice(10, 10 + 2));

        // Add payload
        if (getTestProperty("seqNumberEnable") == 0) {
            sections[n++] = "Advertising data;%" + byteString(packetData.slice(12));
        } else {
            sections[n++] = "Advertising data;Seq.;%" + byteString(packetData.slice(14));
        }

        // Add CRC
        sections[n++] = genCrcSection(getRclRegisterField("PBE_GENERIC_RAM.NUMCRCBITS.VAL,sub_phy:1_mbps,test"));

        return sections;
    }

    function packetTxGenView() {
        var sections = [];

        // Add header
        var n = 0;
        sections[n++] = "Transmitted packet (SmartRF Studio 7 compatible)";

        // Add preamble
        sections[n++] = "Preamble;00 00 00 00";

        // Add start of frame delimiter (SDF)
        sections[n++] = "SFD;" + byteString([getPhyProperty("sfd")]);

        // Add length
        var packetLengthSize = 1;
        var packetData = [getDataArray()];
        sections[n++] = "Length;" + byteString(packetData.slice(0, 0 + packetLengthSize));

        // Constrain displayed payload to 100 bytes
        var payloadSuffix = "";
        var maxPayloadLength = 100;
        var payloadLength = packetData.length - packetLengthSize;
        if (payloadLength > maxPayloadLength) {
            payloadSuffix = " + " + (payloadLength - maxPayloadLength) + " byte(s)"
            payloadLength = maxPayloadLength;
        }

        // Add payload
        if (getTestProperty("seqNumberEnable") == 0) {
            sections[n++] = "Payload;%" + byteString(packetData.slice(packetLengthSize, packetLengthSize + payloadLength)) + payloadSuffix;
        } else {
            sections[n++] = "Payload;Seq.;%" + byteString(packetData.slice(packetLengthSize + 2, packetLengthSize + payloadLength)) + payloadSuffix;
        }

        // Add CRC
        sections[n++] = genCrcSection(getRclRegisterField("PBE_GENERIC_RAM.NUMCRCBITS.VAL,test"));

        return sections;
    }

    function packetTxGenView() {
        var sections = [];

        // Add header
        var n = 0;
        sections[n++] = "Transmitted packet";

        // Add preamble
        sections[n++] = "Preamble;010101...";

        // Add synchronization word
        sections[n++] = "Address (sync. word);" + byteString(valueToBytesBe(getPhyProperty("syncWord"), 4));

        // Add header
        var packetData = [getDataArray()];
        sections[n++] = "PCF (11-bit);" + zeroPadStart(Number(packetData[0] + (packetData[1] << 8)).toString(2), 11);

        // Constrain displayed payload to 100 bytes
        var payloadSuffix = "";
        var maxPayloadLength = 100;
        var payloadLength = packetData.length - 2;
        if (payloadLength > maxPayloadLength) {
            payloadSuffix = " + " + (payloadLength - maxPayloadLength) + " byte(s)"
            payloadLength = maxPayloadLength;
        }

        // Add payload
        if (getTestProperty("seqNumberEnable") == 0) {
            sections[n++] = "Payload;%" + byteString(packetData.slice(2, 2 + payloadLength)) + payloadSuffix;
        } else {
            sections[n++] = "Payload;Seq.;%" + byteString(packetData.slice(4, 4 + payloadLength)) + payloadSuffix;
        }

        // Add CRC
        sections[n++] = genCrcSection(getRclRegisterField("PBE_GENERIC_RAM.NUMCRCBITS.VAL,sub_phy:1_mbps,test"));

        return sections;
    }

    function packetTxGenView() {
        var sections = [];

        // Add header
        var n = 0;
        sections[n++] = "Transmitted packet";

        // Add preamble
        sections[n++] = "Preamble;010101...";

        // Add synchronization word
        sections[n++] = "Sync. word;" + byteString(valueToBytesBe(getPhyProperty("syncWord"), 4));

        // Add header?
        var packetLengthSize = getPhyProperty("packetLengthSize");
        var packetData = [getDataArray()];
        if (packetLengthSize > 0) {
            sections[n++] = "Header;" + byteString(packetData.slice(0, 0 + packetLengthSize));
        }

        // Constrain displayed payload to 100 bytes
        var payloadSuffix = "";
        var maxPayloadLength = 100;
        var payloadLength = packetData.length - packetLengthSize;
        if (payloadLength > maxPayloadLength) {
            payloadSuffix = " + " + (payloadLength - maxPayloadLength) + " byte(s)"
            payloadLength = maxPayloadLength;
        }

        // Add payload
        if (getTestProperty("seqNumberEnable") == 0) {
            sections[n++] = "Payload;%" + byteString(packetData.slice(packetLengthSize, packetLengthSize + payloadLength)) + payloadSuffix;
        } else {
            sections[n++] = "Payload;Seq.;%" + byteString(packetData.slice(packetLengthSize + 2, packetLengthSize + payloadLength)) + payloadSuffix;
        }

        // Add CRC
        sections[n++] = genCrcSection(getRclRegisterField("PBE_GENERIC_RAM.NUMCRCBITS.VAL,test"));

        return sections;
    }

    function zeroPadStart(valueString, width) {
        while (valueString.length < width) {
            valueString = "0" + valueString;
        }
        return valueString;
    }

    function hexString(value, width) {
        return zeroPadStart(Number(value).toString(16), width);
    }

    function byteString(values) {
        var bytes = [];
        for (i = 0; i < values.length; i++) {
            bytes[i] = zeroPadStart(Number(values[i]).toString(16), 2);
        }
        return bytes.join(" ");
    }

    function valueToBytesBe(value, byteCount) {
        var bytes = [];
        for (i = 0; i < byteCount; i++) {
            bytes[i] = (value >> (8 * (byteCount - 1 - i))) & 0xFF;
        }
        return bytes
    }

    function valueToBytesLe(value, byteCount) {
        var bytes = [];
        for (i = 0; i < byteCount; i++) {
            bytes[i] = (value >> (8 * i)) & 0xFF;
        }
        return bytes
    }

    function genCrcSection(bitCount) {
        section = "CRC-" + bitCount + ";XX";
        for (n = 1; n < (bitCount / 8); n++) {
            section = section + " XX";
        }
        return section;
    }

    function updCfRfFrequency() {
        return Math.floor(getPpFrequency() * 1e6);
    }

    // Exported functions
    return {
        setContext: setContext,
        getPpFrequency: getPpFrequency,
        convBleChannelToFreq: convBleChannelToFreq,
        convIeee802154ChannelToFreq: convIeee802154ChannelToFreq,
        convPaTableSettingToBinary: convPaTableSettingToBinary,
        convPaTableSettingToString: convPaTableSettingToString,
        getFrequencyWithOffset: getFrequencyWithOffset,
        getPpFrequencyBle: getPpFrequencyBle,
        getPpFrequency154: getPpFrequency154,
        packetTxGenView: packetTxGenView,
        packetTxGenView: packetTxGenView,
        packetTxGenView: packetTxGenView,
        packetTxGenView: packetTxGenView,
        genCrcSection: genCrcSection,
        updCfRfFrequency: updCfRfFrequency
    }
}
