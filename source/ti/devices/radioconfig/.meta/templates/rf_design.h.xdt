%%{
/*
 * Copyright (c) 2022-2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== rf_design.h.xdt ========
 */
/* Common utility functions */
const Common = system.getScript("/ti/devices/radioconfig/radioconfig_common.js");
if (!Common.isPlatformRFD()) {
    return;
}

/* Get module and instance */
const mod = system.modules["/ti/devices/radioconfig/rfdesign"];
const inst = mod.$static;

const useHpa = mod.getHighPaAssociation(inst) !== "none";
const frontendCode = mod.generateFrontEndCode(inst);
const design = inst.rfDesign;
%%}
// *********************************************************************************
//   RF Frontend configuration
// *********************************************************************************
%
// RF design based on: `design`
#define `design.replace(/-|\s+/g, "_").replace(/,/, "").toUpperCase()`

% if (useHpa) {
// High-Power Amplifier supported
#define SUPPORT_HIGH_PA

% }
// RF frontend configuration
`frontendCode`
%
% // Defines and data for frequency bands
% let defines = "";
% let structs = "";
% let support = "";
%
% const freqBands = mod.getFreqBands();
% for (const fb in freqBands) {
%   const target = freqBands[fb];
%   if (mod.isFreqBandSelected(inst, target)) {
%     const paCode = mod.generateTxPowerHeader(inst, target);
%     if (paCode !== null) {
%       defines += paCode.define;
%       structs += paCode.struct;
%       support += paCode.support;
%     }
%   } // if mod
% } // for frequency bands
%
% if (support !== "") {
// Supported frequency bands
`support`
% }
%
% if (defines !== "") {
// TX power table size definitions
`defines`
// TX power tables
`structs`
% }
%