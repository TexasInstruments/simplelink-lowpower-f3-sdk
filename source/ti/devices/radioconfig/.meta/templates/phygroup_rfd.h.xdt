%%{
/*
 * Copyright (c) 2019-2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== phygroup_rfd.h.xdt ========
 */

/* Common utility functions */
const Common = system.getScript("/ti/devices/radioconfig/radioconfig_common.js");

/* Radio code export configuration */
const CodeExportHandler = Common.getScript("code_export_param");

/* RF Command Handler */
const PhyHandler = Common.getPhyHandler();

/* PHY header */
const phyHeader = system.getTemplate("/ti/devices/radioconfig/templates/phyheader.xdt");

/* RadioConfig instances */
const mod = args[0];
const phyGroup = mod.phyGroup;
const instances = mod.$instances;

%%}
%
% for (let i = 0; i < instances.length; i++) {
%   const inst = instances[i];
%   const ceConfig = inst.codeExportConfig;
%   const phy = Common.getPhyType(inst);
%   const cmdHandler = PhyHandler.getUpdatedRfCommands(inst, phyGroup);
%   const symNames = CodeExportHandler.getSymNames(ceConfig, phy);
%   const qualifier = ceConfig.useConst ? 'const ' : '';
%   const pa = module.getPaUsage(inst);
`phyHeader(cmdHandler)`
%   const soMacro = symNames.stackOverrideMacro;
%   const aoMacro = symNames.appOverrideMacro;
%   if ((soMacro !== "" || aoMacro !== "") && i === 0) {
// Custom override offsets
%     const ovr = cmdHandler.generateOverrideCode(symNames.overrides, ceConfig);
%     if (ovr.stackOffset > 0) {
#define `soMacro`_OFFSET `ovr.stackOffset`
%     }
%     if (ovr.appOffset > 0) {
#define `aoMacro`_OFFSET `ovr.appOffset`
%     }

%   }
%   if (pa !== null) {
// PA table usage
`pa.size`
`pa.code`
%   }
// TI-RTOS RF Mode object
extern RF_Mode `symNames.rfMode`;
%
%   let needHeader = true;
%   const cmds = cmdHandler.getCommands();
%   for (let j = 0; j < cmds.length; j++) {
%     const cmd = cmds[j];
%     const cmdName = cmdHandler.getCommandName(cmd);
%     const cmdKey = _.camelCase(cmdName);
%     if (cmdKey in symNames) {
%       if (needHeader) {

// RF Core API commands
%         needHeader = false;
%       }
%       const varName = symNames[cmdKey].replace("SetupPa", "Setup");
extern `qualifier`rfc_`cmdName`_t `varName`;
%     }
%   }
% }