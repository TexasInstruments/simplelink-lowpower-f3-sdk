%%{
/*
 * Copyright (c) 2022-2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== phygroup_rcl.h.xdt ========
 */

/* Common utility functions */
const Common = system.getScript("/ti/devices/radioconfig/radioconfig_common.js");

/* Radio code export configuration */
const CodeExportHandler = Common.getScript("code_export_param");

/* PHY Handler */
const PhyHandler = Common.getPhyHandler();

/* PHY header */
const phyHeader = system.getTemplate("/ti/devices/radioconfig/templates/phyheader.xdt");

/* RadioConfig object (instances) */
const mod = args[0];

%%}
% for (const inst of mod.$instances) {
%   const ceConfig = inst.codeExportConfig;
%   const phy = Common.getPhyType(inst);
%   const phyHandler = PhyHandler.get(mod.phyGroup, phy);
%   const symNames = CodeExportHandler.getSymNames(ceConfig, phy);
`phyHeader(phyHandler)`
%   const featureCode = phyHandler.generatePhyFeatureCode(ceConfig.phyAbbr);
%   const registerFieldDefines = phyHandler.generateRegisterFieldDefines(ceConfig, inst);
%   const cmdCode = phyHandler.generateRfCommandCode("H", symNames, ceConfig);
%   const dataCode = phyHandler.generateDataStructCode("H", symNames, ceConfig);
%   const regSummaryCode = phyHandler.generateRegisterSummary(inst);
%   if (featureCode) {
// PHY features
`featureCode`
%   }
`cmdCode`
`registerFieldDefines`
// LRF data structures
`dataCode`

`regSummaryCode`
% 
% }